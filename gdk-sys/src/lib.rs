// This file was generated by gir (5e8c56e+) from gir-files (71d73f0)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals)]

extern crate libc;
#[macro_use] extern crate bitflags;
extern crate glib_sys as glib;
extern crate gobject_sys as gobject;
extern crate gio_sys as gio;
extern crate gdk_pixbuf_sys as gdk_pixbuf;
extern crate pango_sys as pango;
extern crate cairo_sys as cairo;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, time_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType, Volatile};

pub type GdkAtom = *mut GdkAtom_;
pub type GdkXEvent = gpointer;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkAxisUse {
    Ignore = 0,
    X = 1,
    Y = 2,
    Pressure = 3,
    Xtilt = 4,
    Ytilt = 5,
    Wheel = 6,
    Distance = 7,
    Rotation = 8,
    Slider = 9,
    Last = 10,
}
pub const GDK_AXIS_IGNORE: GdkAxisUse = GdkAxisUse::Ignore;
pub const GDK_AXIS_X: GdkAxisUse = GdkAxisUse::X;
pub const GDK_AXIS_Y: GdkAxisUse = GdkAxisUse::Y;
pub const GDK_AXIS_PRESSURE: GdkAxisUse = GdkAxisUse::Pressure;
pub const GDK_AXIS_XTILT: GdkAxisUse = GdkAxisUse::Xtilt;
pub const GDK_AXIS_YTILT: GdkAxisUse = GdkAxisUse::Ytilt;
pub const GDK_AXIS_WHEEL: GdkAxisUse = GdkAxisUse::Wheel;
pub const GDK_AXIS_DISTANCE: GdkAxisUse = GdkAxisUse::Distance;
pub const GDK_AXIS_ROTATION: GdkAxisUse = GdkAxisUse::Rotation;
pub const GDK_AXIS_SLIDER: GdkAxisUse = GdkAxisUse::Slider;
pub const GDK_AXIS_LAST: GdkAxisUse = GdkAxisUse::Last;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkByteOrder {
    LsbFirst = 0,
    MsbFirst = 1,
}
pub const GDK_LSB_FIRST: GdkByteOrder = GdkByteOrder::LsbFirst;
pub const GDK_MSB_FIRST: GdkByteOrder = GdkByteOrder::MsbFirst;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkCrossingMode {
    Normal = 0,
    Grab = 1,
    Ungrab = 2,
    GtkGrab = 3,
    GtkUngrab = 4,
    StateChanged = 5,
    TouchBegin = 6,
    TouchEnd = 7,
    DeviceSwitch = 8,
}
pub const GDK_CROSSING_NORMAL: GdkCrossingMode = GdkCrossingMode::Normal;
pub const GDK_CROSSING_GRAB: GdkCrossingMode = GdkCrossingMode::Grab;
pub const GDK_CROSSING_UNGRAB: GdkCrossingMode = GdkCrossingMode::Ungrab;
pub const GDK_CROSSING_GTK_GRAB: GdkCrossingMode = GdkCrossingMode::GtkGrab;
pub const GDK_CROSSING_GTK_UNGRAB: GdkCrossingMode = GdkCrossingMode::GtkUngrab;
pub const GDK_CROSSING_STATE_CHANGED: GdkCrossingMode = GdkCrossingMode::StateChanged;
pub const GDK_CROSSING_TOUCH_BEGIN: GdkCrossingMode = GdkCrossingMode::TouchBegin;
pub const GDK_CROSSING_TOUCH_END: GdkCrossingMode = GdkCrossingMode::TouchEnd;
pub const GDK_CROSSING_DEVICE_SWITCH: GdkCrossingMode = GdkCrossingMode::DeviceSwitch;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkCursorType {
    XCursor = 0,
    Arrow = 2,
    BasedArrowDown = 4,
    BasedArrowUp = 6,
    Boat = 8,
    Bogosity = 10,
    BottomLeftCorner = 12,
    BottomRightCorner = 14,
    BottomSide = 16,
    BottomTee = 18,
    BoxSpiral = 20,
    CenterPtr = 22,
    Circle = 24,
    Clock = 26,
    CoffeeMug = 28,
    Cross = 30,
    CrossReverse = 32,
    Crosshair = 34,
    DiamondCross = 36,
    Dot = 38,
    Dotbox = 40,
    DoubleArrow = 42,
    DraftLarge = 44,
    DraftSmall = 46,
    DrapedBox = 48,
    Exchange = 50,
    Fleur = 52,
    Gobbler = 54,
    Gumby = 56,
    Hand1 = 58,
    Hand2 = 60,
    Heart = 62,
    Icon = 64,
    IronCross = 66,
    LeftPtr = 68,
    LeftSide = 70,
    LeftTee = 72,
    Leftbutton = 74,
    LlAngle = 76,
    LrAngle = 78,
    Man = 80,
    Middlebutton = 82,
    Mouse = 84,
    Pencil = 86,
    Pirate = 88,
    Plus = 90,
    QuestionArrow = 92,
    RightPtr = 94,
    RightSide = 96,
    RightTee = 98,
    Rightbutton = 100,
    RtlLogo = 102,
    Sailboat = 104,
    SbDownArrow = 106,
    SbHDoubleArrow = 108,
    SbLeftArrow = 110,
    SbRightArrow = 112,
    SbUpArrow = 114,
    SbVDoubleArrow = 116,
    Shuttle = 118,
    Sizing = 120,
    Spider = 122,
    Spraycan = 124,
    Star = 126,
    Target = 128,
    Tcross = 130,
    TopLeftArrow = 132,
    TopLeftCorner = 134,
    TopRightCorner = 136,
    TopSide = 138,
    TopTee = 140,
    Trek = 142,
    UlAngle = 144,
    Umbrella = 146,
    UrAngle = 148,
    Watch = 150,
    Xterm = 152,
    LastCursor = 153,
    BlankCursor = -2,
    CursorIsPixmap = -1,
}
pub const GDK_X_CURSOR: GdkCursorType = GdkCursorType::XCursor;
pub const GDK_ARROW: GdkCursorType = GdkCursorType::Arrow;
pub const GDK_BASED_ARROW_DOWN: GdkCursorType = GdkCursorType::BasedArrowDown;
pub const GDK_BASED_ARROW_UP: GdkCursorType = GdkCursorType::BasedArrowUp;
pub const GDK_BOAT: GdkCursorType = GdkCursorType::Boat;
pub const GDK_BOGOSITY: GdkCursorType = GdkCursorType::Bogosity;
pub const GDK_BOTTOM_LEFT_CORNER: GdkCursorType = GdkCursorType::BottomLeftCorner;
pub const GDK_BOTTOM_RIGHT_CORNER: GdkCursorType = GdkCursorType::BottomRightCorner;
pub const GDK_BOTTOM_SIDE: GdkCursorType = GdkCursorType::BottomSide;
pub const GDK_BOTTOM_TEE: GdkCursorType = GdkCursorType::BottomTee;
pub const GDK_BOX_SPIRAL: GdkCursorType = GdkCursorType::BoxSpiral;
pub const GDK_CENTER_PTR: GdkCursorType = GdkCursorType::CenterPtr;
pub const GDK_CIRCLE: GdkCursorType = GdkCursorType::Circle;
pub const GDK_CLOCK: GdkCursorType = GdkCursorType::Clock;
pub const GDK_COFFEE_MUG: GdkCursorType = GdkCursorType::CoffeeMug;
pub const GDK_CROSS: GdkCursorType = GdkCursorType::Cross;
pub const GDK_CROSS_REVERSE: GdkCursorType = GdkCursorType::CrossReverse;
pub const GDK_CROSSHAIR: GdkCursorType = GdkCursorType::Crosshair;
pub const GDK_DIAMOND_CROSS: GdkCursorType = GdkCursorType::DiamondCross;
pub const GDK_DOT: GdkCursorType = GdkCursorType::Dot;
pub const GDK_DOTBOX: GdkCursorType = GdkCursorType::Dotbox;
pub const GDK_DOUBLE_ARROW: GdkCursorType = GdkCursorType::DoubleArrow;
pub const GDK_DRAFT_LARGE: GdkCursorType = GdkCursorType::DraftLarge;
pub const GDK_DRAFT_SMALL: GdkCursorType = GdkCursorType::DraftSmall;
pub const GDK_DRAPED_BOX: GdkCursorType = GdkCursorType::DrapedBox;
pub const GDK_EXCHANGE: GdkCursorType = GdkCursorType::Exchange;
pub const GDK_FLEUR: GdkCursorType = GdkCursorType::Fleur;
pub const GDK_GOBBLER: GdkCursorType = GdkCursorType::Gobbler;
pub const GDK_GUMBY: GdkCursorType = GdkCursorType::Gumby;
pub const GDK_HAND1: GdkCursorType = GdkCursorType::Hand1;
pub const GDK_HAND2: GdkCursorType = GdkCursorType::Hand2;
pub const GDK_HEART: GdkCursorType = GdkCursorType::Heart;
pub const GDK_ICON: GdkCursorType = GdkCursorType::Icon;
pub const GDK_IRON_CROSS: GdkCursorType = GdkCursorType::IronCross;
pub const GDK_LEFT_PTR: GdkCursorType = GdkCursorType::LeftPtr;
pub const GDK_LEFT_SIDE: GdkCursorType = GdkCursorType::LeftSide;
pub const GDK_LEFT_TEE: GdkCursorType = GdkCursorType::LeftTee;
pub const GDK_LEFTBUTTON: GdkCursorType = GdkCursorType::Leftbutton;
pub const GDK_LL_ANGLE: GdkCursorType = GdkCursorType::LlAngle;
pub const GDK_LR_ANGLE: GdkCursorType = GdkCursorType::LrAngle;
pub const GDK_MAN: GdkCursorType = GdkCursorType::Man;
pub const GDK_MIDDLEBUTTON: GdkCursorType = GdkCursorType::Middlebutton;
pub const GDK_MOUSE: GdkCursorType = GdkCursorType::Mouse;
pub const GDK_PENCIL: GdkCursorType = GdkCursorType::Pencil;
pub const GDK_PIRATE: GdkCursorType = GdkCursorType::Pirate;
pub const GDK_PLUS: GdkCursorType = GdkCursorType::Plus;
pub const GDK_QUESTION_ARROW: GdkCursorType = GdkCursorType::QuestionArrow;
pub const GDK_RIGHT_PTR: GdkCursorType = GdkCursorType::RightPtr;
pub const GDK_RIGHT_SIDE: GdkCursorType = GdkCursorType::RightSide;
pub const GDK_RIGHT_TEE: GdkCursorType = GdkCursorType::RightTee;
pub const GDK_RIGHTBUTTON: GdkCursorType = GdkCursorType::Rightbutton;
pub const GDK_RTL_LOGO: GdkCursorType = GdkCursorType::RtlLogo;
pub const GDK_SAILBOAT: GdkCursorType = GdkCursorType::Sailboat;
pub const GDK_SB_DOWN_ARROW: GdkCursorType = GdkCursorType::SbDownArrow;
pub const GDK_SB_H_DOUBLE_ARROW: GdkCursorType = GdkCursorType::SbHDoubleArrow;
pub const GDK_SB_LEFT_ARROW: GdkCursorType = GdkCursorType::SbLeftArrow;
pub const GDK_SB_RIGHT_ARROW: GdkCursorType = GdkCursorType::SbRightArrow;
pub const GDK_SB_UP_ARROW: GdkCursorType = GdkCursorType::SbUpArrow;
pub const GDK_SB_V_DOUBLE_ARROW: GdkCursorType = GdkCursorType::SbVDoubleArrow;
pub const GDK_SHUTTLE: GdkCursorType = GdkCursorType::Shuttle;
pub const GDK_SIZING: GdkCursorType = GdkCursorType::Sizing;
pub const GDK_SPIDER: GdkCursorType = GdkCursorType::Spider;
pub const GDK_SPRAYCAN: GdkCursorType = GdkCursorType::Spraycan;
pub const GDK_STAR: GdkCursorType = GdkCursorType::Star;
pub const GDK_TARGET: GdkCursorType = GdkCursorType::Target;
pub const GDK_TCROSS: GdkCursorType = GdkCursorType::Tcross;
pub const GDK_TOP_LEFT_ARROW: GdkCursorType = GdkCursorType::TopLeftArrow;
pub const GDK_TOP_LEFT_CORNER: GdkCursorType = GdkCursorType::TopLeftCorner;
pub const GDK_TOP_RIGHT_CORNER: GdkCursorType = GdkCursorType::TopRightCorner;
pub const GDK_TOP_SIDE: GdkCursorType = GdkCursorType::TopSide;
pub const GDK_TOP_TEE: GdkCursorType = GdkCursorType::TopTee;
pub const GDK_TREK: GdkCursorType = GdkCursorType::Trek;
pub const GDK_UL_ANGLE: GdkCursorType = GdkCursorType::UlAngle;
pub const GDK_UMBRELLA: GdkCursorType = GdkCursorType::Umbrella;
pub const GDK_UR_ANGLE: GdkCursorType = GdkCursorType::UrAngle;
pub const GDK_WATCH: GdkCursorType = GdkCursorType::Watch;
pub const GDK_XTERM: GdkCursorType = GdkCursorType::Xterm;
pub const GDK_LAST_CURSOR: GdkCursorType = GdkCursorType::LastCursor;
pub const GDK_BLANK_CURSOR: GdkCursorType = GdkCursorType::BlankCursor;
pub const GDK_CURSOR_IS_PIXMAP: GdkCursorType = GdkCursorType::CursorIsPixmap;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkDevicePadFeature {
    Button = 0,
    Ring = 1,
    Strip = 2,
}
pub const GDK_DEVICE_PAD_FEATURE_BUTTON: GdkDevicePadFeature = GdkDevicePadFeature::Button;
pub const GDK_DEVICE_PAD_FEATURE_RING: GdkDevicePadFeature = GdkDevicePadFeature::Ring;
pub const GDK_DEVICE_PAD_FEATURE_STRIP: GdkDevicePadFeature = GdkDevicePadFeature::Strip;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkDeviceToolType {
    Unknown = 0,
    Pen = 1,
    Eraser = 2,
    Brush = 3,
    Pencil = 4,
    Airbrush = 5,
    Mouse = 6,
    Lens = 7,
}
pub const GDK_DEVICE_TOOL_TYPE_UNKNOWN: GdkDeviceToolType = GdkDeviceToolType::Unknown;
pub const GDK_DEVICE_TOOL_TYPE_PEN: GdkDeviceToolType = GdkDeviceToolType::Pen;
pub const GDK_DEVICE_TOOL_TYPE_ERASER: GdkDeviceToolType = GdkDeviceToolType::Eraser;
pub const GDK_DEVICE_TOOL_TYPE_BRUSH: GdkDeviceToolType = GdkDeviceToolType::Brush;
pub const GDK_DEVICE_TOOL_TYPE_PENCIL: GdkDeviceToolType = GdkDeviceToolType::Pencil;
pub const GDK_DEVICE_TOOL_TYPE_AIRBRUSH: GdkDeviceToolType = GdkDeviceToolType::Airbrush;
pub const GDK_DEVICE_TOOL_TYPE_MOUSE: GdkDeviceToolType = GdkDeviceToolType::Mouse;
pub const GDK_DEVICE_TOOL_TYPE_LENS: GdkDeviceToolType = GdkDeviceToolType::Lens;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkDeviceType {
    Master = 0,
    Slave = 1,
    Floating = 2,
}
pub const GDK_DEVICE_TYPE_MASTER: GdkDeviceType = GdkDeviceType::Master;
pub const GDK_DEVICE_TYPE_SLAVE: GdkDeviceType = GdkDeviceType::Slave;
pub const GDK_DEVICE_TYPE_FLOATING: GdkDeviceType = GdkDeviceType::Floating;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkDragCancelReason {
    NoTarget = 0,
    UserCancelled = 1,
    Error = 2,
}
pub const GDK_DRAG_CANCEL_NO_TARGET: GdkDragCancelReason = GdkDragCancelReason::NoTarget;
pub const GDK_DRAG_CANCEL_USER_CANCELLED: GdkDragCancelReason = GdkDragCancelReason::UserCancelled;
pub const GDK_DRAG_CANCEL_ERROR: GdkDragCancelReason = GdkDragCancelReason::Error;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkDragProtocol {
    None = 0,
    Motif = 1,
    Xdnd = 2,
    Rootwin = 3,
    Win32Dropfiles = 4,
    Ole2 = 5,
    Local = 6,
    Wayland = 7,
}
pub const GDK_DRAG_PROTO_NONE: GdkDragProtocol = GdkDragProtocol::None;
pub const GDK_DRAG_PROTO_MOTIF: GdkDragProtocol = GdkDragProtocol::Motif;
pub const GDK_DRAG_PROTO_XDND: GdkDragProtocol = GdkDragProtocol::Xdnd;
pub const GDK_DRAG_PROTO_ROOTWIN: GdkDragProtocol = GdkDragProtocol::Rootwin;
pub const GDK_DRAG_PROTO_WIN32_DROPFILES: GdkDragProtocol = GdkDragProtocol::Win32Dropfiles;
pub const GDK_DRAG_PROTO_OLE2: GdkDragProtocol = GdkDragProtocol::Ole2;
pub const GDK_DRAG_PROTO_LOCAL: GdkDragProtocol = GdkDragProtocol::Local;
pub const GDK_DRAG_PROTO_WAYLAND: GdkDragProtocol = GdkDragProtocol::Wayland;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkEventType {
    Nothing = -1,
    Delete = 0,
    Destroy = 1,
    Expose = 2,
    MotionNotify = 3,
    ButtonPress = 4,
    DoubleButtonPress = 5,
    TripleButtonPress = 6,
    ButtonRelease = 7,
    KeyPress = 8,
    KeyRelease = 9,
    EnterNotify = 10,
    LeaveNotify = 11,
    FocusChange = 12,
    Configure = 13,
    Map = 14,
    Unmap = 15,
    PropertyNotify = 16,
    SelectionClear = 17,
    SelectionRequest = 18,
    SelectionNotify = 19,
    ProximityIn = 20,
    ProximityOut = 21,
    DragEnter = 22,
    DragLeave = 23,
    DragMotion = 24,
    DragStatus = 25,
    DropStart = 26,
    DropFinished = 27,
    ClientEvent = 28,
    VisibilityNotify = 29,
    Scroll = 31,
    WindowState = 32,
    Setting = 33,
    OwnerChange = 34,
    GrabBroken = 35,
    Damage = 36,
    TouchBegin = 37,
    TouchUpdate = 38,
    TouchEnd = 39,
    TouchCancel = 40,
    #[cfg(feature = "v3_18")]
    TouchpadSwipe = 41,
    #[cfg(feature = "v3_18")]
    TouchpadPinch = 42,
    PadButtonPress = 43,
    PadButtonRelease = 44,
    PadRing = 45,
    PadStrip = 46,
    PadGroupMode = 47,
}
pub const GDK_NOTHING: GdkEventType = GdkEventType::Nothing;
pub const GDK_DELETE: GdkEventType = GdkEventType::Delete;
pub const GDK_DESTROY: GdkEventType = GdkEventType::Destroy;
pub const GDK_EXPOSE: GdkEventType = GdkEventType::Expose;
pub const GDK_MOTION_NOTIFY: GdkEventType = GdkEventType::MotionNotify;
pub const GDK_BUTTON_PRESS: GdkEventType = GdkEventType::ButtonPress;
pub const GDK_2BUTTON_PRESS: GdkEventType = GdkEventType::DoubleButtonPress;
pub const GDK_DOUBLE_BUTTON_PRESS: GdkEventType = GdkEventType::DoubleButtonPress;
pub const GDK_3BUTTON_PRESS: GdkEventType = GdkEventType::TripleButtonPress;
pub const GDK_TRIPLE_BUTTON_PRESS: GdkEventType = GdkEventType::TripleButtonPress;
pub const GDK_BUTTON_RELEASE: GdkEventType = GdkEventType::ButtonRelease;
pub const GDK_KEY_PRESS: GdkEventType = GdkEventType::KeyPress;
pub const GDK_KEY_RELEASE: GdkEventType = GdkEventType::KeyRelease;
pub const GDK_ENTER_NOTIFY: GdkEventType = GdkEventType::EnterNotify;
pub const GDK_LEAVE_NOTIFY: GdkEventType = GdkEventType::LeaveNotify;
pub const GDK_FOCUS_CHANGE: GdkEventType = GdkEventType::FocusChange;
pub const GDK_CONFIGURE: GdkEventType = GdkEventType::Configure;
pub const GDK_MAP: GdkEventType = GdkEventType::Map;
pub const GDK_UNMAP: GdkEventType = GdkEventType::Unmap;
pub const GDK_PROPERTY_NOTIFY: GdkEventType = GdkEventType::PropertyNotify;
pub const GDK_SELECTION_CLEAR: GdkEventType = GdkEventType::SelectionClear;
pub const GDK_SELECTION_REQUEST: GdkEventType = GdkEventType::SelectionRequest;
pub const GDK_SELECTION_NOTIFY: GdkEventType = GdkEventType::SelectionNotify;
pub const GDK_PROXIMITY_IN: GdkEventType = GdkEventType::ProximityIn;
pub const GDK_PROXIMITY_OUT: GdkEventType = GdkEventType::ProximityOut;
pub const GDK_DRAG_ENTER: GdkEventType = GdkEventType::DragEnter;
pub const GDK_DRAG_LEAVE: GdkEventType = GdkEventType::DragLeave;
pub const GDK_DRAG_MOTION: GdkEventType = GdkEventType::DragMotion;
pub const GDK_DRAG_STATUS: GdkEventType = GdkEventType::DragStatus;
pub const GDK_DROP_START: GdkEventType = GdkEventType::DropStart;
pub const GDK_DROP_FINISHED: GdkEventType = GdkEventType::DropFinished;
pub const GDK_CLIENT_EVENT: GdkEventType = GdkEventType::ClientEvent;
pub const GDK_VISIBILITY_NOTIFY: GdkEventType = GdkEventType::VisibilityNotify;
pub const GDK_SCROLL: GdkEventType = GdkEventType::Scroll;
pub const GDK_WINDOW_STATE: GdkEventType = GdkEventType::WindowState;
pub const GDK_SETTING: GdkEventType = GdkEventType::Setting;
pub const GDK_OWNER_CHANGE: GdkEventType = GdkEventType::OwnerChange;
pub const GDK_GRAB_BROKEN: GdkEventType = GdkEventType::GrabBroken;
pub const GDK_DAMAGE: GdkEventType = GdkEventType::Damage;
pub const GDK_TOUCH_BEGIN: GdkEventType = GdkEventType::TouchBegin;
pub const GDK_TOUCH_UPDATE: GdkEventType = GdkEventType::TouchUpdate;
pub const GDK_TOUCH_END: GdkEventType = GdkEventType::TouchEnd;
pub const GDK_TOUCH_CANCEL: GdkEventType = GdkEventType::TouchCancel;
#[cfg(feature = "v3_18")]
pub const GDK_TOUCHPAD_SWIPE: GdkEventType = GdkEventType::TouchpadSwipe;
#[cfg(feature = "v3_18")]
pub const GDK_TOUCHPAD_PINCH: GdkEventType = GdkEventType::TouchpadPinch;
pub const GDK_PAD_BUTTON_PRESS: GdkEventType = GdkEventType::PadButtonPress;
pub const GDK_PAD_BUTTON_RELEASE: GdkEventType = GdkEventType::PadButtonRelease;
pub const GDK_PAD_RING: GdkEventType = GdkEventType::PadRing;
pub const GDK_PAD_STRIP: GdkEventType = GdkEventType::PadStrip;
pub const GDK_PAD_GROUP_MODE: GdkEventType = GdkEventType::PadGroupMode;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkFilterReturn {
    Continue = 0,
    Translate = 1,
    Remove = 2,
}
pub const GDK_FILTER_CONTINUE: GdkFilterReturn = GdkFilterReturn::Continue;
pub const GDK_FILTER_TRANSLATE: GdkFilterReturn = GdkFilterReturn::Translate;
pub const GDK_FILTER_REMOVE: GdkFilterReturn = GdkFilterReturn::Remove;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkFullscreenMode {
    CurrentMonitor = 0,
    AllMonitors = 1,
}
pub const GDK_FULLSCREEN_ON_CURRENT_MONITOR: GdkFullscreenMode = GdkFullscreenMode::CurrentMonitor;
pub const GDK_FULLSCREEN_ON_ALL_MONITORS: GdkFullscreenMode = GdkFullscreenMode::AllMonitors;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkGLError {
    NotAvailable = 0,
    UnsupportedFormat = 1,
    UnsupportedProfile = 2,
}
pub const GDK_GL_ERROR_NOT_AVAILABLE: GdkGLError = GdkGLError::NotAvailable;
pub const GDK_GL_ERROR_UNSUPPORTED_FORMAT: GdkGLError = GdkGLError::UnsupportedFormat;
pub const GDK_GL_ERROR_UNSUPPORTED_PROFILE: GdkGLError = GdkGLError::UnsupportedProfile;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkGrabOwnership {
    None = 0,
    Window = 1,
    Application = 2,
}
pub const GDK_OWNERSHIP_NONE: GdkGrabOwnership = GdkGrabOwnership::None;
pub const GDK_OWNERSHIP_WINDOW: GdkGrabOwnership = GdkGrabOwnership::Window;
pub const GDK_OWNERSHIP_APPLICATION: GdkGrabOwnership = GdkGrabOwnership::Application;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkGrabStatus {
    Success = 0,
    AlreadyGrabbed = 1,
    InvalidTime = 2,
    NotViewable = 3,
    Frozen = 4,
    Failed = 5,
}
pub const GDK_GRAB_SUCCESS: GdkGrabStatus = GdkGrabStatus::Success;
pub const GDK_GRAB_ALREADY_GRABBED: GdkGrabStatus = GdkGrabStatus::AlreadyGrabbed;
pub const GDK_GRAB_INVALID_TIME: GdkGrabStatus = GdkGrabStatus::InvalidTime;
pub const GDK_GRAB_NOT_VIEWABLE: GdkGrabStatus = GdkGrabStatus::NotViewable;
pub const GDK_GRAB_FROZEN: GdkGrabStatus = GdkGrabStatus::Frozen;
pub const GDK_GRAB_FAILED: GdkGrabStatus = GdkGrabStatus::Failed;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkGravity {
    NorthWest = 1,
    North = 2,
    NorthEast = 3,
    West = 4,
    Center = 5,
    East = 6,
    SouthWest = 7,
    South = 8,
    SouthEast = 9,
    Static = 10,
}
pub const GDK_GRAVITY_NORTH_WEST: GdkGravity = GdkGravity::NorthWest;
pub const GDK_GRAVITY_NORTH: GdkGravity = GdkGravity::North;
pub const GDK_GRAVITY_NORTH_EAST: GdkGravity = GdkGravity::NorthEast;
pub const GDK_GRAVITY_WEST: GdkGravity = GdkGravity::West;
pub const GDK_GRAVITY_CENTER: GdkGravity = GdkGravity::Center;
pub const GDK_GRAVITY_EAST: GdkGravity = GdkGravity::East;
pub const GDK_GRAVITY_SOUTH_WEST: GdkGravity = GdkGravity::SouthWest;
pub const GDK_GRAVITY_SOUTH: GdkGravity = GdkGravity::South;
pub const GDK_GRAVITY_SOUTH_EAST: GdkGravity = GdkGravity::SouthEast;
pub const GDK_GRAVITY_STATIC: GdkGravity = GdkGravity::Static;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkInputMode {
    Disabled = 0,
    Screen = 1,
    Window = 2,
}
pub const GDK_MODE_DISABLED: GdkInputMode = GdkInputMode::Disabled;
pub const GDK_MODE_SCREEN: GdkInputMode = GdkInputMode::Screen;
pub const GDK_MODE_WINDOW: GdkInputMode = GdkInputMode::Window;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkInputSource {
    Mouse = 0,
    Pen = 1,
    Eraser = 2,
    Cursor = 3,
    Keyboard = 4,
    Touchscreen = 5,
    Touchpad = 6,
    Trackpoint = 7,
    TabletPad = 8,
}
pub const GDK_SOURCE_MOUSE: GdkInputSource = GdkInputSource::Mouse;
pub const GDK_SOURCE_PEN: GdkInputSource = GdkInputSource::Pen;
pub const GDK_SOURCE_ERASER: GdkInputSource = GdkInputSource::Eraser;
pub const GDK_SOURCE_CURSOR: GdkInputSource = GdkInputSource::Cursor;
pub const GDK_SOURCE_KEYBOARD: GdkInputSource = GdkInputSource::Keyboard;
pub const GDK_SOURCE_TOUCHSCREEN: GdkInputSource = GdkInputSource::Touchscreen;
pub const GDK_SOURCE_TOUCHPAD: GdkInputSource = GdkInputSource::Touchpad;
pub const GDK_SOURCE_TRACKPOINT: GdkInputSource = GdkInputSource::Trackpoint;
pub const GDK_SOURCE_TABLET_PAD: GdkInputSource = GdkInputSource::TabletPad;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkModifierIntent {
    PrimaryAccelerator = 0,
    ContextMenu = 1,
    ExtendSelection = 2,
    ModifySelection = 3,
    NoTextInput = 4,
    ShiftGroup = 5,
    DefaultModMask = 6,
}
pub const GDK_MODIFIER_INTENT_PRIMARY_ACCELERATOR: GdkModifierIntent = GdkModifierIntent::PrimaryAccelerator;
pub const GDK_MODIFIER_INTENT_CONTEXT_MENU: GdkModifierIntent = GdkModifierIntent::ContextMenu;
pub const GDK_MODIFIER_INTENT_EXTEND_SELECTION: GdkModifierIntent = GdkModifierIntent::ExtendSelection;
pub const GDK_MODIFIER_INTENT_MODIFY_SELECTION: GdkModifierIntent = GdkModifierIntent::ModifySelection;
pub const GDK_MODIFIER_INTENT_NO_TEXT_INPUT: GdkModifierIntent = GdkModifierIntent::NoTextInput;
pub const GDK_MODIFIER_INTENT_SHIFT_GROUP: GdkModifierIntent = GdkModifierIntent::ShiftGroup;
pub const GDK_MODIFIER_INTENT_DEFAULT_MOD_MASK: GdkModifierIntent = GdkModifierIntent::DefaultModMask;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkNotifyType {
    Ancestor = 0,
    Virtual = 1,
    Inferior = 2,
    Nonlinear = 3,
    NonlinearVirtual = 4,
    Unknown = 5,
}
pub const GDK_NOTIFY_ANCESTOR: GdkNotifyType = GdkNotifyType::Ancestor;
pub const GDK_NOTIFY_VIRTUAL: GdkNotifyType = GdkNotifyType::Virtual;
pub const GDK_NOTIFY_INFERIOR: GdkNotifyType = GdkNotifyType::Inferior;
pub const GDK_NOTIFY_NONLINEAR: GdkNotifyType = GdkNotifyType::Nonlinear;
pub const GDK_NOTIFY_NONLINEAR_VIRTUAL: GdkNotifyType = GdkNotifyType::NonlinearVirtual;
pub const GDK_NOTIFY_UNKNOWN: GdkNotifyType = GdkNotifyType::Unknown;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkOwnerChange {
    NewOwner = 0,
    Destroy = 1,
    Close = 2,
}
pub const GDK_OWNER_CHANGE_NEW_OWNER: GdkOwnerChange = GdkOwnerChange::NewOwner;
pub const GDK_OWNER_CHANGE_DESTROY: GdkOwnerChange = GdkOwnerChange::Destroy;
pub const GDK_OWNER_CHANGE_CLOSE: GdkOwnerChange = GdkOwnerChange::Close;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkPropMode {
    Replace = 0,
    Prepend = 1,
    Append = 2,
}
pub const GDK_PROP_MODE_REPLACE: GdkPropMode = GdkPropMode::Replace;
pub const GDK_PROP_MODE_PREPEND: GdkPropMode = GdkPropMode::Prepend;
pub const GDK_PROP_MODE_APPEND: GdkPropMode = GdkPropMode::Append;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkPropertyState {
    NewValue = 0,
    Delete = 1,
}
pub const GDK_PROPERTY_NEW_VALUE: GdkPropertyState = GdkPropertyState::NewValue;
pub const GDK_PROPERTY_DELETE: GdkPropertyState = GdkPropertyState::Delete;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkScrollDirection {
    Up = 0,
    Down = 1,
    Left = 2,
    Right = 3,
    Smooth = 4,
}
pub const GDK_SCROLL_UP: GdkScrollDirection = GdkScrollDirection::Up;
pub const GDK_SCROLL_DOWN: GdkScrollDirection = GdkScrollDirection::Down;
pub const GDK_SCROLL_LEFT: GdkScrollDirection = GdkScrollDirection::Left;
pub const GDK_SCROLL_RIGHT: GdkScrollDirection = GdkScrollDirection::Right;
pub const GDK_SCROLL_SMOOTH: GdkScrollDirection = GdkScrollDirection::Smooth;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkSettingAction {
    New = 0,
    Changed = 1,
    Deleted = 2,
}
pub const GDK_SETTING_ACTION_NEW: GdkSettingAction = GdkSettingAction::New;
pub const GDK_SETTING_ACTION_CHANGED: GdkSettingAction = GdkSettingAction::Changed;
pub const GDK_SETTING_ACTION_DELETED: GdkSettingAction = GdkSettingAction::Deleted;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkStatus {
    Ok = 0,
    Error = -1,
    ErrorParam = -2,
    ErrorFile = -3,
    ErrorMem = -4,
}
pub const GDK_OK: GdkStatus = GdkStatus::Ok;
pub const GDK_ERROR: GdkStatus = GdkStatus::Error;
pub const GDK_ERROR_PARAM: GdkStatus = GdkStatus::ErrorParam;
pub const GDK_ERROR_FILE: GdkStatus = GdkStatus::ErrorFile;
pub const GDK_ERROR_MEM: GdkStatus = GdkStatus::ErrorMem;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkSubpixelLayout {
    Unknown = 0,
    None = 1,
    HorizontalRgb = 2,
    HorizontalBgr = 3,
    VerticalRgb = 4,
    VerticalBgr = 5,
}
pub const GDK_SUBPIXEL_LAYOUT_UNKNOWN: GdkSubpixelLayout = GdkSubpixelLayout::Unknown;
pub const GDK_SUBPIXEL_LAYOUT_NONE: GdkSubpixelLayout = GdkSubpixelLayout::None;
pub const GDK_SUBPIXEL_LAYOUT_HORIZONTAL_RGB: GdkSubpixelLayout = GdkSubpixelLayout::HorizontalRgb;
pub const GDK_SUBPIXEL_LAYOUT_HORIZONTAL_BGR: GdkSubpixelLayout = GdkSubpixelLayout::HorizontalBgr;
pub const GDK_SUBPIXEL_LAYOUT_VERTICAL_RGB: GdkSubpixelLayout = GdkSubpixelLayout::VerticalRgb;
pub const GDK_SUBPIXEL_LAYOUT_VERTICAL_BGR: GdkSubpixelLayout = GdkSubpixelLayout::VerticalBgr;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkTouchpadGesturePhase {
    Begin = 0,
    Update = 1,
    End = 2,
    Cancel = 3,
}
pub const GDK_TOUCHPAD_GESTURE_PHASE_BEGIN: GdkTouchpadGesturePhase = GdkTouchpadGesturePhase::Begin;
pub const GDK_TOUCHPAD_GESTURE_PHASE_UPDATE: GdkTouchpadGesturePhase = GdkTouchpadGesturePhase::Update;
pub const GDK_TOUCHPAD_GESTURE_PHASE_END: GdkTouchpadGesturePhase = GdkTouchpadGesturePhase::End;
pub const GDK_TOUCHPAD_GESTURE_PHASE_CANCEL: GdkTouchpadGesturePhase = GdkTouchpadGesturePhase::Cancel;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkVisibilityState {
    Unobscured = 0,
    Partial = 1,
    FullyObscured = 2,
}
pub const GDK_VISIBILITY_UNOBSCURED: GdkVisibilityState = GdkVisibilityState::Unobscured;
pub const GDK_VISIBILITY_PARTIAL: GdkVisibilityState = GdkVisibilityState::Partial;
pub const GDK_VISIBILITY_FULLY_OBSCURED: GdkVisibilityState = GdkVisibilityState::FullyObscured;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkVisualType {
    StaticGray = 0,
    Grayscale = 1,
    StaticColor = 2,
    PseudoColor = 3,
    TrueColor = 4,
    DirectColor = 5,
}
pub const GDK_VISUAL_STATIC_GRAY: GdkVisualType = GdkVisualType::StaticGray;
pub const GDK_VISUAL_GRAYSCALE: GdkVisualType = GdkVisualType::Grayscale;
pub const GDK_VISUAL_STATIC_COLOR: GdkVisualType = GdkVisualType::StaticColor;
pub const GDK_VISUAL_PSEUDO_COLOR: GdkVisualType = GdkVisualType::PseudoColor;
pub const GDK_VISUAL_TRUE_COLOR: GdkVisualType = GdkVisualType::TrueColor;
pub const GDK_VISUAL_DIRECT_COLOR: GdkVisualType = GdkVisualType::DirectColor;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkWindowEdge {
    NorthWest = 0,
    North = 1,
    NorthEast = 2,
    West = 3,
    East = 4,
    SouthWest = 5,
    South = 6,
    SouthEast = 7,
}
pub const GDK_WINDOW_EDGE_NORTH_WEST: GdkWindowEdge = GdkWindowEdge::NorthWest;
pub const GDK_WINDOW_EDGE_NORTH: GdkWindowEdge = GdkWindowEdge::North;
pub const GDK_WINDOW_EDGE_NORTH_EAST: GdkWindowEdge = GdkWindowEdge::NorthEast;
pub const GDK_WINDOW_EDGE_WEST: GdkWindowEdge = GdkWindowEdge::West;
pub const GDK_WINDOW_EDGE_EAST: GdkWindowEdge = GdkWindowEdge::East;
pub const GDK_WINDOW_EDGE_SOUTH_WEST: GdkWindowEdge = GdkWindowEdge::SouthWest;
pub const GDK_WINDOW_EDGE_SOUTH: GdkWindowEdge = GdkWindowEdge::South;
pub const GDK_WINDOW_EDGE_SOUTH_EAST: GdkWindowEdge = GdkWindowEdge::SouthEast;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkWindowType {
    Root = 0,
    Toplevel = 1,
    Child = 2,
    Temp = 3,
    Foreign = 4,
    Offscreen = 5,
    Subsurface = 6,
}
pub const GDK_WINDOW_ROOT: GdkWindowType = GdkWindowType::Root;
pub const GDK_WINDOW_TOPLEVEL: GdkWindowType = GdkWindowType::Toplevel;
pub const GDK_WINDOW_CHILD: GdkWindowType = GdkWindowType::Child;
pub const GDK_WINDOW_TEMP: GdkWindowType = GdkWindowType::Temp;
pub const GDK_WINDOW_FOREIGN: GdkWindowType = GdkWindowType::Foreign;
pub const GDK_WINDOW_OFFSCREEN: GdkWindowType = GdkWindowType::Offscreen;
pub const GDK_WINDOW_SUBSURFACE: GdkWindowType = GdkWindowType::Subsurface;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkWindowTypeHint {
    Normal = 0,
    Dialog = 1,
    Menu = 2,
    Toolbar = 3,
    Splashscreen = 4,
    Utility = 5,
    Dock = 6,
    Desktop = 7,
    DropdownMenu = 8,
    PopupMenu = 9,
    Tooltip = 10,
    Notification = 11,
    Combo = 12,
    Dnd = 13,
}
pub const GDK_WINDOW_TYPE_HINT_NORMAL: GdkWindowTypeHint = GdkWindowTypeHint::Normal;
pub const GDK_WINDOW_TYPE_HINT_DIALOG: GdkWindowTypeHint = GdkWindowTypeHint::Dialog;
pub const GDK_WINDOW_TYPE_HINT_MENU: GdkWindowTypeHint = GdkWindowTypeHint::Menu;
pub const GDK_WINDOW_TYPE_HINT_TOOLBAR: GdkWindowTypeHint = GdkWindowTypeHint::Toolbar;
pub const GDK_WINDOW_TYPE_HINT_SPLASHSCREEN: GdkWindowTypeHint = GdkWindowTypeHint::Splashscreen;
pub const GDK_WINDOW_TYPE_HINT_UTILITY: GdkWindowTypeHint = GdkWindowTypeHint::Utility;
pub const GDK_WINDOW_TYPE_HINT_DOCK: GdkWindowTypeHint = GdkWindowTypeHint::Dock;
pub const GDK_WINDOW_TYPE_HINT_DESKTOP: GdkWindowTypeHint = GdkWindowTypeHint::Desktop;
pub const GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU: GdkWindowTypeHint = GdkWindowTypeHint::DropdownMenu;
pub const GDK_WINDOW_TYPE_HINT_POPUP_MENU: GdkWindowTypeHint = GdkWindowTypeHint::PopupMenu;
pub const GDK_WINDOW_TYPE_HINT_TOOLTIP: GdkWindowTypeHint = GdkWindowTypeHint::Tooltip;
pub const GDK_WINDOW_TYPE_HINT_NOTIFICATION: GdkWindowTypeHint = GdkWindowTypeHint::Notification;
pub const GDK_WINDOW_TYPE_HINT_COMBO: GdkWindowTypeHint = GdkWindowTypeHint::Combo;
pub const GDK_WINDOW_TYPE_HINT_DND: GdkWindowTypeHint = GdkWindowTypeHint::Dnd;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GdkWindowWindowClass {
    InputOutput = 0,
    InputOnly = 1,
}
pub const GDK_INPUT_OUTPUT: GdkWindowWindowClass = GdkWindowWindowClass::InputOutput;
pub const GDK_INPUT_ONLY: GdkWindowWindowClass = GdkWindowWindowClass::InputOnly;


pub const GDK_BUTTON_MIDDLE: i32 = 2;
pub const GDK_BUTTON_PRIMARY: i32 = 1;
pub const GDK_BUTTON_SECONDARY: i32 = 3;
pub const GDK_CURRENT_TIME: i32 = 0;
pub const GDK_EVENT_PROPAGATE: bool = false;
pub const GDK_EVENT_STOP: bool = true;
pub const GDK_KEY_0: i32 = 48;
pub const GDK_KEY_1: i32 = 49;
pub const GDK_KEY_2: i32 = 50;
pub const GDK_KEY_3: i32 = 51;
pub const GDK_KEY_3270_AltCursor: i32 = 64784;
pub const GDK_KEY_3270_Attn: i32 = 64782;
pub const GDK_KEY_3270_BackTab: i32 = 64773;
pub const GDK_KEY_3270_ChangeScreen: i32 = 64793;
pub const GDK_KEY_3270_Copy: i32 = 64789;
pub const GDK_KEY_3270_CursorBlink: i32 = 64783;
pub const GDK_KEY_3270_CursorSelect: i32 = 64796;
pub const GDK_KEY_3270_DeleteWord: i32 = 64794;
pub const GDK_KEY_3270_Duplicate: i32 = 64769;
pub const GDK_KEY_3270_Enter: i32 = 64798;
pub const GDK_KEY_3270_EraseEOF: i32 = 64774;
pub const GDK_KEY_3270_EraseInput: i32 = 64775;
pub const GDK_KEY_3270_ExSelect: i32 = 64795;
pub const GDK_KEY_3270_FieldMark: i32 = 64770;
pub const GDK_KEY_3270_Ident: i32 = 64787;
pub const GDK_KEY_3270_Jump: i32 = 64786;
pub const GDK_KEY_3270_KeyClick: i32 = 64785;
pub const GDK_KEY_3270_Left2: i32 = 64772;
pub const GDK_KEY_3270_PA1: i32 = 64778;
pub const GDK_KEY_3270_PA2: i32 = 64779;
pub const GDK_KEY_3270_PA3: i32 = 64780;
pub const GDK_KEY_3270_Play: i32 = 64790;
pub const GDK_KEY_3270_PrintScreen: i32 = 64797;
pub const GDK_KEY_3270_Quit: i32 = 64777;
pub const GDK_KEY_3270_Record: i32 = 64792;
pub const GDK_KEY_3270_Reset: i32 = 64776;
pub const GDK_KEY_3270_Right2: i32 = 64771;
pub const GDK_KEY_3270_Rule: i32 = 64788;
pub const GDK_KEY_3270_Setup: i32 = 64791;
pub const GDK_KEY_3270_Test: i32 = 64781;
pub const GDK_KEY_4: i32 = 52;
pub const GDK_KEY_5: i32 = 53;
pub const GDK_KEY_6: i32 = 54;
pub const GDK_KEY_7: i32 = 55;
pub const GDK_KEY_8: i32 = 56;
pub const GDK_KEY_9: i32 = 57;
pub const GDK_KEY_A: i32 = 65;
pub const GDK_KEY_AE: i32 = 198;
pub const GDK_KEY_Aacute: i32 = 193;
pub const GDK_KEY_Abelowdot: i32 = 16785056;
pub const GDK_KEY_Abreve: i32 = 451;
pub const GDK_KEY_Abreveacute: i32 = 16785070;
pub const GDK_KEY_Abrevebelowdot: i32 = 16785078;
pub const GDK_KEY_Abrevegrave: i32 = 16785072;
pub const GDK_KEY_Abrevehook: i32 = 16785074;
pub const GDK_KEY_Abrevetilde: i32 = 16785076;
pub const GDK_KEY_AccessX_Enable: i32 = 65136;
pub const GDK_KEY_AccessX_Feedback_Enable: i32 = 65137;
pub const GDK_KEY_Acircumflex: i32 = 194;
pub const GDK_KEY_Acircumflexacute: i32 = 16785060;
pub const GDK_KEY_Acircumflexbelowdot: i32 = 16785068;
pub const GDK_KEY_Acircumflexgrave: i32 = 16785062;
pub const GDK_KEY_Acircumflexhook: i32 = 16785064;
pub const GDK_KEY_Acircumflextilde: i32 = 16785066;
pub const GDK_KEY_AddFavorite: i32 = 269025081;
pub const GDK_KEY_Adiaeresis: i32 = 196;
pub const GDK_KEY_Agrave: i32 = 192;
pub const GDK_KEY_Ahook: i32 = 16785058;
pub const GDK_KEY_Alt_L: i32 = 65513;
pub const GDK_KEY_Alt_R: i32 = 65514;
pub const GDK_KEY_Amacron: i32 = 960;
pub const GDK_KEY_Aogonek: i32 = 417;
pub const GDK_KEY_ApplicationLeft: i32 = 269025104;
pub const GDK_KEY_ApplicationRight: i32 = 269025105;
pub const GDK_KEY_Arabic_0: i32 = 16778848;
pub const GDK_KEY_Arabic_1: i32 = 16778849;
pub const GDK_KEY_Arabic_2: i32 = 16778850;
pub const GDK_KEY_Arabic_3: i32 = 16778851;
pub const GDK_KEY_Arabic_4: i32 = 16778852;
pub const GDK_KEY_Arabic_5: i32 = 16778853;
pub const GDK_KEY_Arabic_6: i32 = 16778854;
pub const GDK_KEY_Arabic_7: i32 = 16778855;
pub const GDK_KEY_Arabic_8: i32 = 16778856;
pub const GDK_KEY_Arabic_9: i32 = 16778857;
pub const GDK_KEY_Arabic_ain: i32 = 1497;
pub const GDK_KEY_Arabic_alef: i32 = 1479;
pub const GDK_KEY_Arabic_alefmaksura: i32 = 1513;
pub const GDK_KEY_Arabic_beh: i32 = 1480;
pub const GDK_KEY_Arabic_comma: i32 = 1452;
pub const GDK_KEY_Arabic_dad: i32 = 1494;
pub const GDK_KEY_Arabic_dal: i32 = 1487;
pub const GDK_KEY_Arabic_damma: i32 = 1519;
pub const GDK_KEY_Arabic_dammatan: i32 = 1516;
pub const GDK_KEY_Arabic_ddal: i32 = 16778888;
pub const GDK_KEY_Arabic_farsi_yeh: i32 = 16778956;
pub const GDK_KEY_Arabic_fatha: i32 = 1518;
pub const GDK_KEY_Arabic_fathatan: i32 = 1515;
pub const GDK_KEY_Arabic_feh: i32 = 1505;
pub const GDK_KEY_Arabic_fullstop: i32 = 16778964;
pub const GDK_KEY_Arabic_gaf: i32 = 16778927;
pub const GDK_KEY_Arabic_ghain: i32 = 1498;
pub const GDK_KEY_Arabic_ha: i32 = 1511;
pub const GDK_KEY_Arabic_hah: i32 = 1485;
pub const GDK_KEY_Arabic_hamza: i32 = 1473;
pub const GDK_KEY_Arabic_hamza_above: i32 = 16778836;
pub const GDK_KEY_Arabic_hamza_below: i32 = 16778837;
pub const GDK_KEY_Arabic_hamzaonalef: i32 = 1475;
pub const GDK_KEY_Arabic_hamzaonwaw: i32 = 1476;
pub const GDK_KEY_Arabic_hamzaonyeh: i32 = 1478;
pub const GDK_KEY_Arabic_hamzaunderalef: i32 = 1477;
pub const GDK_KEY_Arabic_heh: i32 = 1511;
pub const GDK_KEY_Arabic_heh_doachashmee: i32 = 16778942;
pub const GDK_KEY_Arabic_heh_goal: i32 = 16778945;
pub const GDK_KEY_Arabic_jeem: i32 = 1484;
pub const GDK_KEY_Arabic_jeh: i32 = 16778904;
pub const GDK_KEY_Arabic_kaf: i32 = 1507;
pub const GDK_KEY_Arabic_kasra: i32 = 1520;
pub const GDK_KEY_Arabic_kasratan: i32 = 1517;
pub const GDK_KEY_Arabic_keheh: i32 = 16778921;
pub const GDK_KEY_Arabic_khah: i32 = 1486;
pub const GDK_KEY_Arabic_lam: i32 = 1508;
pub const GDK_KEY_Arabic_madda_above: i32 = 16778835;
pub const GDK_KEY_Arabic_maddaonalef: i32 = 1474;
pub const GDK_KEY_Arabic_meem: i32 = 1509;
pub const GDK_KEY_Arabic_noon: i32 = 1510;
pub const GDK_KEY_Arabic_noon_ghunna: i32 = 16778938;
pub const GDK_KEY_Arabic_peh: i32 = 16778878;
pub const GDK_KEY_Arabic_percent: i32 = 16778858;
pub const GDK_KEY_Arabic_qaf: i32 = 1506;
pub const GDK_KEY_Arabic_question_mark: i32 = 1471;
pub const GDK_KEY_Arabic_ra: i32 = 1489;
pub const GDK_KEY_Arabic_rreh: i32 = 16778897;
pub const GDK_KEY_Arabic_sad: i32 = 1493;
pub const GDK_KEY_Arabic_seen: i32 = 1491;
pub const GDK_KEY_Arabic_semicolon: i32 = 1467;
pub const GDK_KEY_Arabic_shadda: i32 = 1521;
pub const GDK_KEY_Arabic_sheen: i32 = 1492;
pub const GDK_KEY_Arabic_sukun: i32 = 1522;
pub const GDK_KEY_Arabic_superscript_alef: i32 = 16778864;
pub const GDK_KEY_Arabic_switch: i32 = 65406;
pub const GDK_KEY_Arabic_tah: i32 = 1495;
pub const GDK_KEY_Arabic_tatweel: i32 = 1504;
pub const GDK_KEY_Arabic_tcheh: i32 = 16778886;
pub const GDK_KEY_Arabic_teh: i32 = 1482;
pub const GDK_KEY_Arabic_tehmarbuta: i32 = 1481;
pub const GDK_KEY_Arabic_thal: i32 = 1488;
pub const GDK_KEY_Arabic_theh: i32 = 1483;
pub const GDK_KEY_Arabic_tteh: i32 = 16778873;
pub const GDK_KEY_Arabic_veh: i32 = 16778916;
pub const GDK_KEY_Arabic_waw: i32 = 1512;
pub const GDK_KEY_Arabic_yeh: i32 = 1514;
pub const GDK_KEY_Arabic_yeh_baree: i32 = 16778962;
pub const GDK_KEY_Arabic_zah: i32 = 1496;
pub const GDK_KEY_Arabic_zain: i32 = 1490;
pub const GDK_KEY_Aring: i32 = 197;
pub const GDK_KEY_Armenian_AT: i32 = 16778552;
pub const GDK_KEY_Armenian_AYB: i32 = 16778545;
pub const GDK_KEY_Armenian_BEN: i32 = 16778546;
pub const GDK_KEY_Armenian_CHA: i32 = 16778569;
pub const GDK_KEY_Armenian_DA: i32 = 16778548;
pub const GDK_KEY_Armenian_DZA: i32 = 16778561;
pub const GDK_KEY_Armenian_E: i32 = 16778551;
pub const GDK_KEY_Armenian_FE: i32 = 16778582;
pub const GDK_KEY_Armenian_GHAT: i32 = 16778562;
pub const GDK_KEY_Armenian_GIM: i32 = 16778547;
pub const GDK_KEY_Armenian_HI: i32 = 16778565;
pub const GDK_KEY_Armenian_HO: i32 = 16778560;
pub const GDK_KEY_Armenian_INI: i32 = 16778555;
pub const GDK_KEY_Armenian_JE: i32 = 16778571;
pub const GDK_KEY_Armenian_KE: i32 = 16778580;
pub const GDK_KEY_Armenian_KEN: i32 = 16778559;
pub const GDK_KEY_Armenian_KHE: i32 = 16778557;
pub const GDK_KEY_Armenian_LYUN: i32 = 16778556;
pub const GDK_KEY_Armenian_MEN: i32 = 16778564;
pub const GDK_KEY_Armenian_NU: i32 = 16778566;
pub const GDK_KEY_Armenian_O: i32 = 16778581;
pub const GDK_KEY_Armenian_PE: i32 = 16778570;
pub const GDK_KEY_Armenian_PYUR: i32 = 16778579;
pub const GDK_KEY_Armenian_RA: i32 = 16778572;
pub const GDK_KEY_Armenian_RE: i32 = 16778576;
pub const GDK_KEY_Armenian_SE: i32 = 16778573;
pub const GDK_KEY_Armenian_SHA: i32 = 16778567;
pub const GDK_KEY_Armenian_TCHE: i32 = 16778563;
pub const GDK_KEY_Armenian_TO: i32 = 16778553;
pub const GDK_KEY_Armenian_TSA: i32 = 16778558;
pub const GDK_KEY_Armenian_TSO: i32 = 16778577;
pub const GDK_KEY_Armenian_TYUN: i32 = 16778575;
pub const GDK_KEY_Armenian_VEV: i32 = 16778574;
pub const GDK_KEY_Armenian_VO: i32 = 16778568;
pub const GDK_KEY_Armenian_VYUN: i32 = 16778578;
pub const GDK_KEY_Armenian_YECH: i32 = 16778549;
pub const GDK_KEY_Armenian_ZA: i32 = 16778550;
pub const GDK_KEY_Armenian_ZHE: i32 = 16778554;
pub const GDK_KEY_Armenian_accent: i32 = 16778587;
pub const GDK_KEY_Armenian_amanak: i32 = 16778588;
pub const GDK_KEY_Armenian_apostrophe: i32 = 16778586;
pub const GDK_KEY_Armenian_at: i32 = 16778600;
pub const GDK_KEY_Armenian_ayb: i32 = 16778593;
pub const GDK_KEY_Armenian_ben: i32 = 16778594;
pub const GDK_KEY_Armenian_but: i32 = 16778589;
pub const GDK_KEY_Armenian_cha: i32 = 16778617;
pub const GDK_KEY_Armenian_da: i32 = 16778596;
pub const GDK_KEY_Armenian_dza: i32 = 16778609;
pub const GDK_KEY_Armenian_e: i32 = 16778599;
pub const GDK_KEY_Armenian_exclam: i32 = 16778588;
pub const GDK_KEY_Armenian_fe: i32 = 16778630;
pub const GDK_KEY_Armenian_full_stop: i32 = 16778633;
pub const GDK_KEY_Armenian_ghat: i32 = 16778610;
pub const GDK_KEY_Armenian_gim: i32 = 16778595;
pub const GDK_KEY_Armenian_hi: i32 = 16778613;
pub const GDK_KEY_Armenian_ho: i32 = 16778608;
pub const GDK_KEY_Armenian_hyphen: i32 = 16778634;
pub const GDK_KEY_Armenian_ini: i32 = 16778603;
pub const GDK_KEY_Armenian_je: i32 = 16778619;
pub const GDK_KEY_Armenian_ke: i32 = 16778628;
pub const GDK_KEY_Armenian_ken: i32 = 16778607;
pub const GDK_KEY_Armenian_khe: i32 = 16778605;
pub const GDK_KEY_Armenian_ligature_ew: i32 = 16778631;
pub const GDK_KEY_Armenian_lyun: i32 = 16778604;
pub const GDK_KEY_Armenian_men: i32 = 16778612;
pub const GDK_KEY_Armenian_nu: i32 = 16778614;
pub const GDK_KEY_Armenian_o: i32 = 16778629;
pub const GDK_KEY_Armenian_paruyk: i32 = 16778590;
pub const GDK_KEY_Armenian_pe: i32 = 16778618;
pub const GDK_KEY_Armenian_pyur: i32 = 16778627;
pub const GDK_KEY_Armenian_question: i32 = 16778590;
pub const GDK_KEY_Armenian_ra: i32 = 16778620;
pub const GDK_KEY_Armenian_re: i32 = 16778624;
pub const GDK_KEY_Armenian_se: i32 = 16778621;
pub const GDK_KEY_Armenian_separation_mark: i32 = 16778589;
pub const GDK_KEY_Armenian_sha: i32 = 16778615;
pub const GDK_KEY_Armenian_shesht: i32 = 16778587;
pub const GDK_KEY_Armenian_tche: i32 = 16778611;
pub const GDK_KEY_Armenian_to: i32 = 16778601;
pub const GDK_KEY_Armenian_tsa: i32 = 16778606;
pub const GDK_KEY_Armenian_tso: i32 = 16778625;
pub const GDK_KEY_Armenian_tyun: i32 = 16778623;
pub const GDK_KEY_Armenian_verjaket: i32 = 16778633;
pub const GDK_KEY_Armenian_vev: i32 = 16778622;
pub const GDK_KEY_Armenian_vo: i32 = 16778616;
pub const GDK_KEY_Armenian_vyun: i32 = 16778626;
pub const GDK_KEY_Armenian_yech: i32 = 16778597;
pub const GDK_KEY_Armenian_yentamna: i32 = 16778634;
pub const GDK_KEY_Armenian_za: i32 = 16778598;
pub const GDK_KEY_Armenian_zhe: i32 = 16778602;
pub const GDK_KEY_Atilde: i32 = 195;
pub const GDK_KEY_AudibleBell_Enable: i32 = 65146;
pub const GDK_KEY_AudioCycleTrack: i32 = 269025179;
pub const GDK_KEY_AudioForward: i32 = 269025175;
pub const GDK_KEY_AudioLowerVolume: i32 = 269025041;
pub const GDK_KEY_AudioMedia: i32 = 269025074;
pub const GDK_KEY_AudioMicMute: i32 = 269025202;
pub const GDK_KEY_AudioMute: i32 = 269025042;
pub const GDK_KEY_AudioNext: i32 = 269025047;
pub const GDK_KEY_AudioPause: i32 = 269025073;
pub const GDK_KEY_AudioPlay: i32 = 269025044;
pub const GDK_KEY_AudioPrev: i32 = 269025046;
pub const GDK_KEY_AudioRaiseVolume: i32 = 269025043;
pub const GDK_KEY_AudioRandomPlay: i32 = 269025177;
pub const GDK_KEY_AudioRecord: i32 = 269025052;
pub const GDK_KEY_AudioRepeat: i32 = 269025176;
pub const GDK_KEY_AudioRewind: i32 = 269025086;
pub const GDK_KEY_AudioStop: i32 = 269025045;
pub const GDK_KEY_Away: i32 = 269025165;
pub const GDK_KEY_B: i32 = 66;
pub const GDK_KEY_Babovedot: i32 = 16784898;
pub const GDK_KEY_Back: i32 = 269025062;
pub const GDK_KEY_BackForward: i32 = 269025087;
pub const GDK_KEY_BackSpace: i32 = 65288;
pub const GDK_KEY_Battery: i32 = 269025171;
pub const GDK_KEY_Begin: i32 = 65368;
pub const GDK_KEY_Blue: i32 = 269025190;
pub const GDK_KEY_Bluetooth: i32 = 269025172;
pub const GDK_KEY_Book: i32 = 269025106;
pub const GDK_KEY_BounceKeys_Enable: i32 = 65140;
pub const GDK_KEY_Break: i32 = 65387;
pub const GDK_KEY_BrightnessAdjust: i32 = 269025083;
pub const GDK_KEY_Byelorussian_SHORTU: i32 = 1726;
pub const GDK_KEY_Byelorussian_shortu: i32 = 1710;
pub const GDK_KEY_C: i32 = 67;
pub const GDK_KEY_CD: i32 = 269025107;
pub const GDK_KEY_CH: i32 = 65186;
pub const GDK_KEY_C_H: i32 = 65189;
pub const GDK_KEY_C_h: i32 = 65188;
pub const GDK_KEY_Cabovedot: i32 = 709;
pub const GDK_KEY_Cacute: i32 = 454;
pub const GDK_KEY_Calculator: i32 = 269025053;
pub const GDK_KEY_Calendar: i32 = 269025056;
pub const GDK_KEY_Cancel: i32 = 65385;
pub const GDK_KEY_Caps_Lock: i32 = 65509;
pub const GDK_KEY_Ccaron: i32 = 456;
pub const GDK_KEY_Ccedilla: i32 = 199;
pub const GDK_KEY_Ccircumflex: i32 = 710;
pub const GDK_KEY_Ch: i32 = 65185;
pub const GDK_KEY_Clear: i32 = 65291;
pub const GDK_KEY_ClearGrab: i32 = 269024801;
pub const GDK_KEY_Close: i32 = 269025110;
pub const GDK_KEY_Codeinput: i32 = 65335;
pub const GDK_KEY_ColonSign: i32 = 16785569;
pub const GDK_KEY_Community: i32 = 269025085;
pub const GDK_KEY_ContrastAdjust: i32 = 269025058;
pub const GDK_KEY_Control_L: i32 = 65507;
pub const GDK_KEY_Control_R: i32 = 65508;
pub const GDK_KEY_Copy: i32 = 269025111;
pub const GDK_KEY_CruzeiroSign: i32 = 16785570;
pub const GDK_KEY_Cut: i32 = 269025112;
pub const GDK_KEY_CycleAngle: i32 = 269025180;
pub const GDK_KEY_Cyrillic_A: i32 = 1761;
pub const GDK_KEY_Cyrillic_BE: i32 = 1762;
pub const GDK_KEY_Cyrillic_CHE: i32 = 1790;
pub const GDK_KEY_Cyrillic_CHE_descender: i32 = 16778422;
pub const GDK_KEY_Cyrillic_CHE_vertstroke: i32 = 16778424;
pub const GDK_KEY_Cyrillic_DE: i32 = 1764;
pub const GDK_KEY_Cyrillic_DZHE: i32 = 1727;
pub const GDK_KEY_Cyrillic_E: i32 = 1788;
pub const GDK_KEY_Cyrillic_EF: i32 = 1766;
pub const GDK_KEY_Cyrillic_EL: i32 = 1772;
pub const GDK_KEY_Cyrillic_EM: i32 = 1773;
pub const GDK_KEY_Cyrillic_EN: i32 = 1774;
pub const GDK_KEY_Cyrillic_EN_descender: i32 = 16778402;
pub const GDK_KEY_Cyrillic_ER: i32 = 1778;
pub const GDK_KEY_Cyrillic_ES: i32 = 1779;
pub const GDK_KEY_Cyrillic_GHE: i32 = 1767;
pub const GDK_KEY_Cyrillic_GHE_bar: i32 = 16778386;
pub const GDK_KEY_Cyrillic_HA: i32 = 1768;
pub const GDK_KEY_Cyrillic_HARDSIGN: i32 = 1791;
pub const GDK_KEY_Cyrillic_HA_descender: i32 = 16778418;
pub const GDK_KEY_Cyrillic_I: i32 = 1769;
pub const GDK_KEY_Cyrillic_IE: i32 = 1765;
pub const GDK_KEY_Cyrillic_IO: i32 = 1715;
pub const GDK_KEY_Cyrillic_I_macron: i32 = 16778466;
pub const GDK_KEY_Cyrillic_JE: i32 = 1720;
pub const GDK_KEY_Cyrillic_KA: i32 = 1771;
pub const GDK_KEY_Cyrillic_KA_descender: i32 = 16778394;
pub const GDK_KEY_Cyrillic_KA_vertstroke: i32 = 16778396;
pub const GDK_KEY_Cyrillic_LJE: i32 = 1721;
pub const GDK_KEY_Cyrillic_NJE: i32 = 1722;
pub const GDK_KEY_Cyrillic_O: i32 = 1775;
pub const GDK_KEY_Cyrillic_O_bar: i32 = 16778472;
pub const GDK_KEY_Cyrillic_PE: i32 = 1776;
pub const GDK_KEY_Cyrillic_SCHWA: i32 = 16778456;
pub const GDK_KEY_Cyrillic_SHA: i32 = 1787;
pub const GDK_KEY_Cyrillic_SHCHA: i32 = 1789;
pub const GDK_KEY_Cyrillic_SHHA: i32 = 16778426;
pub const GDK_KEY_Cyrillic_SHORTI: i32 = 1770;
pub const GDK_KEY_Cyrillic_SOFTSIGN: i32 = 1784;
pub const GDK_KEY_Cyrillic_TE: i32 = 1780;
pub const GDK_KEY_Cyrillic_TSE: i32 = 1763;
pub const GDK_KEY_Cyrillic_U: i32 = 1781;
pub const GDK_KEY_Cyrillic_U_macron: i32 = 16778478;
pub const GDK_KEY_Cyrillic_U_straight: i32 = 16778414;
pub const GDK_KEY_Cyrillic_U_straight_bar: i32 = 16778416;
pub const GDK_KEY_Cyrillic_VE: i32 = 1783;
pub const GDK_KEY_Cyrillic_YA: i32 = 1777;
pub const GDK_KEY_Cyrillic_YERU: i32 = 1785;
pub const GDK_KEY_Cyrillic_YU: i32 = 1760;
pub const GDK_KEY_Cyrillic_ZE: i32 = 1786;
pub const GDK_KEY_Cyrillic_ZHE: i32 = 1782;
pub const GDK_KEY_Cyrillic_ZHE_descender: i32 = 16778390;
pub const GDK_KEY_Cyrillic_a: i32 = 1729;
pub const GDK_KEY_Cyrillic_be: i32 = 1730;
pub const GDK_KEY_Cyrillic_che: i32 = 1758;
pub const GDK_KEY_Cyrillic_che_descender: i32 = 16778423;
pub const GDK_KEY_Cyrillic_che_vertstroke: i32 = 16778425;
pub const GDK_KEY_Cyrillic_de: i32 = 1732;
pub const GDK_KEY_Cyrillic_dzhe: i32 = 1711;
pub const GDK_KEY_Cyrillic_e: i32 = 1756;
pub const GDK_KEY_Cyrillic_ef: i32 = 1734;
pub const GDK_KEY_Cyrillic_el: i32 = 1740;
pub const GDK_KEY_Cyrillic_em: i32 = 1741;
pub const GDK_KEY_Cyrillic_en: i32 = 1742;
pub const GDK_KEY_Cyrillic_en_descender: i32 = 16778403;
pub const GDK_KEY_Cyrillic_er: i32 = 1746;
pub const GDK_KEY_Cyrillic_es: i32 = 1747;
pub const GDK_KEY_Cyrillic_ghe: i32 = 1735;
pub const GDK_KEY_Cyrillic_ghe_bar: i32 = 16778387;
pub const GDK_KEY_Cyrillic_ha: i32 = 1736;
pub const GDK_KEY_Cyrillic_ha_descender: i32 = 16778419;
pub const GDK_KEY_Cyrillic_hardsign: i32 = 1759;
pub const GDK_KEY_Cyrillic_i: i32 = 1737;
pub const GDK_KEY_Cyrillic_i_macron: i32 = 16778467;
pub const GDK_KEY_Cyrillic_ie: i32 = 1733;
pub const GDK_KEY_Cyrillic_io: i32 = 1699;
pub const GDK_KEY_Cyrillic_je: i32 = 1704;
pub const GDK_KEY_Cyrillic_ka: i32 = 1739;
pub const GDK_KEY_Cyrillic_ka_descender: i32 = 16778395;
pub const GDK_KEY_Cyrillic_ka_vertstroke: i32 = 16778397;
pub const GDK_KEY_Cyrillic_lje: i32 = 1705;
pub const GDK_KEY_Cyrillic_nje: i32 = 1706;
pub const GDK_KEY_Cyrillic_o: i32 = 1743;
pub const GDK_KEY_Cyrillic_o_bar: i32 = 16778473;
pub const GDK_KEY_Cyrillic_pe: i32 = 1744;
pub const GDK_KEY_Cyrillic_schwa: i32 = 16778457;
pub const GDK_KEY_Cyrillic_sha: i32 = 1755;
pub const GDK_KEY_Cyrillic_shcha: i32 = 1757;
pub const GDK_KEY_Cyrillic_shha: i32 = 16778427;
pub const GDK_KEY_Cyrillic_shorti: i32 = 1738;
pub const GDK_KEY_Cyrillic_softsign: i32 = 1752;
pub const GDK_KEY_Cyrillic_te: i32 = 1748;
pub const GDK_KEY_Cyrillic_tse: i32 = 1731;
pub const GDK_KEY_Cyrillic_u: i32 = 1749;
pub const GDK_KEY_Cyrillic_u_macron: i32 = 16778479;
pub const GDK_KEY_Cyrillic_u_straight: i32 = 16778415;
pub const GDK_KEY_Cyrillic_u_straight_bar: i32 = 16778417;
pub const GDK_KEY_Cyrillic_ve: i32 = 1751;
pub const GDK_KEY_Cyrillic_ya: i32 = 1745;
pub const GDK_KEY_Cyrillic_yeru: i32 = 1753;
pub const GDK_KEY_Cyrillic_yu: i32 = 1728;
pub const GDK_KEY_Cyrillic_ze: i32 = 1754;
pub const GDK_KEY_Cyrillic_zhe: i32 = 1750;
pub const GDK_KEY_Cyrillic_zhe_descender: i32 = 16778391;
pub const GDK_KEY_D: i32 = 68;
pub const GDK_KEY_DOS: i32 = 269025114;
pub const GDK_KEY_Dabovedot: i32 = 16784906;
pub const GDK_KEY_Dcaron: i32 = 463;
pub const GDK_KEY_Delete: i32 = 65535;
pub const GDK_KEY_Display: i32 = 269025113;
pub const GDK_KEY_Documents: i32 = 269025115;
pub const GDK_KEY_DongSign: i32 = 16785579;
pub const GDK_KEY_Down: i32 = 65364;
pub const GDK_KEY_Dstroke: i32 = 464;
pub const GDK_KEY_E: i32 = 69;
pub const GDK_KEY_ENG: i32 = 957;
pub const GDK_KEY_ETH: i32 = 208;
pub const GDK_KEY_EZH: i32 = 16777655;
pub const GDK_KEY_Eabovedot: i32 = 972;
pub const GDK_KEY_Eacute: i32 = 201;
pub const GDK_KEY_Ebelowdot: i32 = 16785080;
pub const GDK_KEY_Ecaron: i32 = 460;
pub const GDK_KEY_Ecircumflex: i32 = 202;
pub const GDK_KEY_Ecircumflexacute: i32 = 16785086;
pub const GDK_KEY_Ecircumflexbelowdot: i32 = 16785094;
pub const GDK_KEY_Ecircumflexgrave: i32 = 16785088;
pub const GDK_KEY_Ecircumflexhook: i32 = 16785090;
pub const GDK_KEY_Ecircumflextilde: i32 = 16785092;
pub const GDK_KEY_EcuSign: i32 = 16785568;
pub const GDK_KEY_Ediaeresis: i32 = 203;
pub const GDK_KEY_Egrave: i32 = 200;
pub const GDK_KEY_Ehook: i32 = 16785082;
pub const GDK_KEY_Eisu_Shift: i32 = 65327;
pub const GDK_KEY_Eisu_toggle: i32 = 65328;
pub const GDK_KEY_Eject: i32 = 269025068;
pub const GDK_KEY_Emacron: i32 = 938;
pub const GDK_KEY_End: i32 = 65367;
pub const GDK_KEY_Eogonek: i32 = 458;
pub const GDK_KEY_Escape: i32 = 65307;
pub const GDK_KEY_Eth: i32 = 208;
pub const GDK_KEY_Etilde: i32 = 16785084;
pub const GDK_KEY_EuroSign: i32 = 8364;
pub const GDK_KEY_Excel: i32 = 269025116;
pub const GDK_KEY_Execute: i32 = 65378;
pub const GDK_KEY_Explorer: i32 = 269025117;
pub const GDK_KEY_F: i32 = 70;
pub const GDK_KEY_F1: i32 = 65470;
pub const GDK_KEY_F10: i32 = 65479;
pub const GDK_KEY_F11: i32 = 65480;
pub const GDK_KEY_F12: i32 = 65481;
pub const GDK_KEY_F13: i32 = 65482;
pub const GDK_KEY_F14: i32 = 65483;
pub const GDK_KEY_F15: i32 = 65484;
pub const GDK_KEY_F16: i32 = 65485;
pub const GDK_KEY_F17: i32 = 65486;
pub const GDK_KEY_F18: i32 = 65487;
pub const GDK_KEY_F19: i32 = 65488;
pub const GDK_KEY_F2: i32 = 65471;
pub const GDK_KEY_F20: i32 = 65489;
pub const GDK_KEY_F21: i32 = 65490;
pub const GDK_KEY_F22: i32 = 65491;
pub const GDK_KEY_F23: i32 = 65492;
pub const GDK_KEY_F24: i32 = 65493;
pub const GDK_KEY_F25: i32 = 65494;
pub const GDK_KEY_F26: i32 = 65495;
pub const GDK_KEY_F27: i32 = 65496;
pub const GDK_KEY_F28: i32 = 65497;
pub const GDK_KEY_F29: i32 = 65498;
pub const GDK_KEY_F3: i32 = 65472;
pub const GDK_KEY_F30: i32 = 65499;
pub const GDK_KEY_F31: i32 = 65500;
pub const GDK_KEY_F32: i32 = 65501;
pub const GDK_KEY_F33: i32 = 65502;
pub const GDK_KEY_F34: i32 = 65503;
pub const GDK_KEY_F35: i32 = 65504;
pub const GDK_KEY_F4: i32 = 65473;
pub const GDK_KEY_F5: i32 = 65474;
pub const GDK_KEY_F6: i32 = 65475;
pub const GDK_KEY_F7: i32 = 65476;
pub const GDK_KEY_F8: i32 = 65477;
pub const GDK_KEY_F9: i32 = 65478;
pub const GDK_KEY_FFrancSign: i32 = 16785571;
pub const GDK_KEY_Fabovedot: i32 = 16784926;
pub const GDK_KEY_Farsi_0: i32 = 16778992;
pub const GDK_KEY_Farsi_1: i32 = 16778993;
pub const GDK_KEY_Farsi_2: i32 = 16778994;
pub const GDK_KEY_Farsi_3: i32 = 16778995;
pub const GDK_KEY_Farsi_4: i32 = 16778996;
pub const GDK_KEY_Farsi_5: i32 = 16778997;
pub const GDK_KEY_Farsi_6: i32 = 16778998;
pub const GDK_KEY_Farsi_7: i32 = 16778999;
pub const GDK_KEY_Farsi_8: i32 = 16779000;
pub const GDK_KEY_Farsi_9: i32 = 16779001;
pub const GDK_KEY_Farsi_yeh: i32 = 16778956;
pub const GDK_KEY_Favorites: i32 = 269025072;
pub const GDK_KEY_Finance: i32 = 269025084;
pub const GDK_KEY_Find: i32 = 65384;
pub const GDK_KEY_First_Virtual_Screen: i32 = 65232;
pub const GDK_KEY_Forward: i32 = 269025063;
pub const GDK_KEY_FrameBack: i32 = 269025181;
pub const GDK_KEY_FrameForward: i32 = 269025182;
pub const GDK_KEY_G: i32 = 71;
pub const GDK_KEY_Gabovedot: i32 = 725;
pub const GDK_KEY_Game: i32 = 269025118;
pub const GDK_KEY_Gbreve: i32 = 683;
pub const GDK_KEY_Gcaron: i32 = 16777702;
pub const GDK_KEY_Gcedilla: i32 = 939;
pub const GDK_KEY_Gcircumflex: i32 = 728;
pub const GDK_KEY_Georgian_an: i32 = 16781520;
pub const GDK_KEY_Georgian_ban: i32 = 16781521;
pub const GDK_KEY_Georgian_can: i32 = 16781546;
pub const GDK_KEY_Georgian_char: i32 = 16781549;
pub const GDK_KEY_Georgian_chin: i32 = 16781545;
pub const GDK_KEY_Georgian_cil: i32 = 16781548;
pub const GDK_KEY_Georgian_don: i32 = 16781523;
pub const GDK_KEY_Georgian_en: i32 = 16781524;
pub const GDK_KEY_Georgian_fi: i32 = 16781558;
pub const GDK_KEY_Georgian_gan: i32 = 16781522;
pub const GDK_KEY_Georgian_ghan: i32 = 16781542;
pub const GDK_KEY_Georgian_hae: i32 = 16781552;
pub const GDK_KEY_Georgian_har: i32 = 16781556;
pub const GDK_KEY_Georgian_he: i32 = 16781553;
pub const GDK_KEY_Georgian_hie: i32 = 16781554;
pub const GDK_KEY_Georgian_hoe: i32 = 16781557;
pub const GDK_KEY_Georgian_in: i32 = 16781528;
pub const GDK_KEY_Georgian_jhan: i32 = 16781551;
pub const GDK_KEY_Georgian_jil: i32 = 16781547;
pub const GDK_KEY_Georgian_kan: i32 = 16781529;
pub const GDK_KEY_Georgian_khar: i32 = 16781541;
pub const GDK_KEY_Georgian_las: i32 = 16781530;
pub const GDK_KEY_Georgian_man: i32 = 16781531;
pub const GDK_KEY_Georgian_nar: i32 = 16781532;
pub const GDK_KEY_Georgian_on: i32 = 16781533;
pub const GDK_KEY_Georgian_par: i32 = 16781534;
pub const GDK_KEY_Georgian_phar: i32 = 16781540;
pub const GDK_KEY_Georgian_qar: i32 = 16781543;
pub const GDK_KEY_Georgian_rae: i32 = 16781536;
pub const GDK_KEY_Georgian_san: i32 = 16781537;
pub const GDK_KEY_Georgian_shin: i32 = 16781544;
pub const GDK_KEY_Georgian_tan: i32 = 16781527;
pub const GDK_KEY_Georgian_tar: i32 = 16781538;
pub const GDK_KEY_Georgian_un: i32 = 16781539;
pub const GDK_KEY_Georgian_vin: i32 = 16781525;
pub const GDK_KEY_Georgian_we: i32 = 16781555;
pub const GDK_KEY_Georgian_xan: i32 = 16781550;
pub const GDK_KEY_Georgian_zen: i32 = 16781526;
pub const GDK_KEY_Georgian_zhar: i32 = 16781535;
pub const GDK_KEY_Go: i32 = 269025119;
pub const GDK_KEY_Greek_ALPHA: i32 = 1985;
pub const GDK_KEY_Greek_ALPHAaccent: i32 = 1953;
pub const GDK_KEY_Greek_BETA: i32 = 1986;
pub const GDK_KEY_Greek_CHI: i32 = 2007;
pub const GDK_KEY_Greek_DELTA: i32 = 1988;
pub const GDK_KEY_Greek_EPSILON: i32 = 1989;
pub const GDK_KEY_Greek_EPSILONaccent: i32 = 1954;
pub const GDK_KEY_Greek_ETA: i32 = 1991;
pub const GDK_KEY_Greek_ETAaccent: i32 = 1955;
pub const GDK_KEY_Greek_GAMMA: i32 = 1987;
pub const GDK_KEY_Greek_IOTA: i32 = 1993;
pub const GDK_KEY_Greek_IOTAaccent: i32 = 1956;
pub const GDK_KEY_Greek_IOTAdiaeresis: i32 = 1957;
pub const GDK_KEY_Greek_IOTAdieresis: i32 = 1957;
pub const GDK_KEY_Greek_KAPPA: i32 = 1994;
pub const GDK_KEY_Greek_LAMBDA: i32 = 1995;
pub const GDK_KEY_Greek_LAMDA: i32 = 1995;
pub const GDK_KEY_Greek_MU: i32 = 1996;
pub const GDK_KEY_Greek_NU: i32 = 1997;
pub const GDK_KEY_Greek_OMEGA: i32 = 2009;
pub const GDK_KEY_Greek_OMEGAaccent: i32 = 1963;
pub const GDK_KEY_Greek_OMICRON: i32 = 1999;
pub const GDK_KEY_Greek_OMICRONaccent: i32 = 1959;
pub const GDK_KEY_Greek_PHI: i32 = 2006;
pub const GDK_KEY_Greek_PI: i32 = 2000;
pub const GDK_KEY_Greek_PSI: i32 = 2008;
pub const GDK_KEY_Greek_RHO: i32 = 2001;
pub const GDK_KEY_Greek_SIGMA: i32 = 2002;
pub const GDK_KEY_Greek_TAU: i32 = 2004;
pub const GDK_KEY_Greek_THETA: i32 = 1992;
pub const GDK_KEY_Greek_UPSILON: i32 = 2005;
pub const GDK_KEY_Greek_UPSILONaccent: i32 = 1960;
pub const GDK_KEY_Greek_UPSILONdieresis: i32 = 1961;
pub const GDK_KEY_Greek_XI: i32 = 1998;
pub const GDK_KEY_Greek_ZETA: i32 = 1990;
pub const GDK_KEY_Greek_accentdieresis: i32 = 1966;
pub const GDK_KEY_Greek_alpha: i32 = 2017;
pub const GDK_KEY_Greek_alphaaccent: i32 = 1969;
pub const GDK_KEY_Greek_beta: i32 = 2018;
pub const GDK_KEY_Greek_chi: i32 = 2039;
pub const GDK_KEY_Greek_delta: i32 = 2020;
pub const GDK_KEY_Greek_epsilon: i32 = 2021;
pub const GDK_KEY_Greek_epsilonaccent: i32 = 1970;
pub const GDK_KEY_Greek_eta: i32 = 2023;
pub const GDK_KEY_Greek_etaaccent: i32 = 1971;
pub const GDK_KEY_Greek_finalsmallsigma: i32 = 2035;
pub const GDK_KEY_Greek_gamma: i32 = 2019;
pub const GDK_KEY_Greek_horizbar: i32 = 1967;
pub const GDK_KEY_Greek_iota: i32 = 2025;
pub const GDK_KEY_Greek_iotaaccent: i32 = 1972;
pub const GDK_KEY_Greek_iotaaccentdieresis: i32 = 1974;
pub const GDK_KEY_Greek_iotadieresis: i32 = 1973;
pub const GDK_KEY_Greek_kappa: i32 = 2026;
pub const GDK_KEY_Greek_lambda: i32 = 2027;
pub const GDK_KEY_Greek_lamda: i32 = 2027;
pub const GDK_KEY_Greek_mu: i32 = 2028;
pub const GDK_KEY_Greek_nu: i32 = 2029;
pub const GDK_KEY_Greek_omega: i32 = 2041;
pub const GDK_KEY_Greek_omegaaccent: i32 = 1979;
pub const GDK_KEY_Greek_omicron: i32 = 2031;
pub const GDK_KEY_Greek_omicronaccent: i32 = 1975;
pub const GDK_KEY_Greek_phi: i32 = 2038;
pub const GDK_KEY_Greek_pi: i32 = 2032;
pub const GDK_KEY_Greek_psi: i32 = 2040;
pub const GDK_KEY_Greek_rho: i32 = 2033;
pub const GDK_KEY_Greek_sigma: i32 = 2034;
pub const GDK_KEY_Greek_switch: i32 = 65406;
pub const GDK_KEY_Greek_tau: i32 = 2036;
pub const GDK_KEY_Greek_theta: i32 = 2024;
pub const GDK_KEY_Greek_upsilon: i32 = 2037;
pub const GDK_KEY_Greek_upsilonaccent: i32 = 1976;
pub const GDK_KEY_Greek_upsilonaccentdieresis: i32 = 1978;
pub const GDK_KEY_Greek_upsilondieresis: i32 = 1977;
pub const GDK_KEY_Greek_xi: i32 = 2030;
pub const GDK_KEY_Greek_zeta: i32 = 2022;
pub const GDK_KEY_Green: i32 = 269025188;
pub const GDK_KEY_H: i32 = 72;
pub const GDK_KEY_Hangul: i32 = 65329;
pub const GDK_KEY_Hangul_A: i32 = 3775;
pub const GDK_KEY_Hangul_AE: i32 = 3776;
pub const GDK_KEY_Hangul_AraeA: i32 = 3830;
pub const GDK_KEY_Hangul_AraeAE: i32 = 3831;
pub const GDK_KEY_Hangul_Banja: i32 = 65337;
pub const GDK_KEY_Hangul_Cieuc: i32 = 3770;
pub const GDK_KEY_Hangul_Codeinput: i32 = 65335;
pub const GDK_KEY_Hangul_Dikeud: i32 = 3751;
pub const GDK_KEY_Hangul_E: i32 = 3780;
pub const GDK_KEY_Hangul_EO: i32 = 3779;
pub const GDK_KEY_Hangul_EU: i32 = 3793;
pub const GDK_KEY_Hangul_End: i32 = 65331;
pub const GDK_KEY_Hangul_Hanja: i32 = 65332;
pub const GDK_KEY_Hangul_Hieuh: i32 = 3774;
pub const GDK_KEY_Hangul_I: i32 = 3795;
pub const GDK_KEY_Hangul_Ieung: i32 = 3767;
pub const GDK_KEY_Hangul_J_Cieuc: i32 = 3818;
pub const GDK_KEY_Hangul_J_Dikeud: i32 = 3802;
pub const GDK_KEY_Hangul_J_Hieuh: i32 = 3822;
pub const GDK_KEY_Hangul_J_Ieung: i32 = 3816;
pub const GDK_KEY_Hangul_J_Jieuj: i32 = 3817;
pub const GDK_KEY_Hangul_J_Khieuq: i32 = 3819;
pub const GDK_KEY_Hangul_J_Kiyeog: i32 = 3796;
pub const GDK_KEY_Hangul_J_KiyeogSios: i32 = 3798;
pub const GDK_KEY_Hangul_J_KkogjiDalrinIeung: i32 = 3833;
pub const GDK_KEY_Hangul_J_Mieum: i32 = 3811;
pub const GDK_KEY_Hangul_J_Nieun: i32 = 3799;
pub const GDK_KEY_Hangul_J_NieunHieuh: i32 = 3801;
pub const GDK_KEY_Hangul_J_NieunJieuj: i32 = 3800;
pub const GDK_KEY_Hangul_J_PanSios: i32 = 3832;
pub const GDK_KEY_Hangul_J_Phieuf: i32 = 3821;
pub const GDK_KEY_Hangul_J_Pieub: i32 = 3812;
pub const GDK_KEY_Hangul_J_PieubSios: i32 = 3813;
pub const GDK_KEY_Hangul_J_Rieul: i32 = 3803;
pub const GDK_KEY_Hangul_J_RieulHieuh: i32 = 3810;
pub const GDK_KEY_Hangul_J_RieulKiyeog: i32 = 3804;
pub const GDK_KEY_Hangul_J_RieulMieum: i32 = 3805;
pub const GDK_KEY_Hangul_J_RieulPhieuf: i32 = 3809;
pub const GDK_KEY_Hangul_J_RieulPieub: i32 = 3806;
pub const GDK_KEY_Hangul_J_RieulSios: i32 = 3807;
pub const GDK_KEY_Hangul_J_RieulTieut: i32 = 3808;
pub const GDK_KEY_Hangul_J_Sios: i32 = 3814;
pub const GDK_KEY_Hangul_J_SsangKiyeog: i32 = 3797;
pub const GDK_KEY_Hangul_J_SsangSios: i32 = 3815;
pub const GDK_KEY_Hangul_J_Tieut: i32 = 3820;
pub const GDK_KEY_Hangul_J_YeorinHieuh: i32 = 3834;
pub const GDK_KEY_Hangul_Jamo: i32 = 65333;
pub const GDK_KEY_Hangul_Jeonja: i32 = 65336;
pub const GDK_KEY_Hangul_Jieuj: i32 = 3768;
pub const GDK_KEY_Hangul_Khieuq: i32 = 3771;
pub const GDK_KEY_Hangul_Kiyeog: i32 = 3745;
pub const GDK_KEY_Hangul_KiyeogSios: i32 = 3747;
pub const GDK_KEY_Hangul_KkogjiDalrinIeung: i32 = 3827;
pub const GDK_KEY_Hangul_Mieum: i32 = 3761;
pub const GDK_KEY_Hangul_MultipleCandidate: i32 = 65341;
pub const GDK_KEY_Hangul_Nieun: i32 = 3748;
pub const GDK_KEY_Hangul_NieunHieuh: i32 = 3750;
pub const GDK_KEY_Hangul_NieunJieuj: i32 = 3749;
pub const GDK_KEY_Hangul_O: i32 = 3783;
pub const GDK_KEY_Hangul_OE: i32 = 3786;
pub const GDK_KEY_Hangul_PanSios: i32 = 3826;
pub const GDK_KEY_Hangul_Phieuf: i32 = 3773;
pub const GDK_KEY_Hangul_Pieub: i32 = 3762;
pub const GDK_KEY_Hangul_PieubSios: i32 = 3764;
pub const GDK_KEY_Hangul_PostHanja: i32 = 65339;
pub const GDK_KEY_Hangul_PreHanja: i32 = 65338;
pub const GDK_KEY_Hangul_PreviousCandidate: i32 = 65342;
pub const GDK_KEY_Hangul_Rieul: i32 = 3753;
pub const GDK_KEY_Hangul_RieulHieuh: i32 = 3760;
pub const GDK_KEY_Hangul_RieulKiyeog: i32 = 3754;
pub const GDK_KEY_Hangul_RieulMieum: i32 = 3755;
pub const GDK_KEY_Hangul_RieulPhieuf: i32 = 3759;
pub const GDK_KEY_Hangul_RieulPieub: i32 = 3756;
pub const GDK_KEY_Hangul_RieulSios: i32 = 3757;
pub const GDK_KEY_Hangul_RieulTieut: i32 = 3758;
pub const GDK_KEY_Hangul_RieulYeorinHieuh: i32 = 3823;
pub const GDK_KEY_Hangul_Romaja: i32 = 65334;
pub const GDK_KEY_Hangul_SingleCandidate: i32 = 65340;
pub const GDK_KEY_Hangul_Sios: i32 = 3765;
pub const GDK_KEY_Hangul_Special: i32 = 65343;
pub const GDK_KEY_Hangul_SsangDikeud: i32 = 3752;
pub const GDK_KEY_Hangul_SsangJieuj: i32 = 3769;
pub const GDK_KEY_Hangul_SsangKiyeog: i32 = 3746;
pub const GDK_KEY_Hangul_SsangPieub: i32 = 3763;
pub const GDK_KEY_Hangul_SsangSios: i32 = 3766;
pub const GDK_KEY_Hangul_Start: i32 = 65330;
pub const GDK_KEY_Hangul_SunkyeongeumMieum: i32 = 3824;
pub const GDK_KEY_Hangul_SunkyeongeumPhieuf: i32 = 3828;
pub const GDK_KEY_Hangul_SunkyeongeumPieub: i32 = 3825;
pub const GDK_KEY_Hangul_Tieut: i32 = 3772;
pub const GDK_KEY_Hangul_U: i32 = 3788;
pub const GDK_KEY_Hangul_WA: i32 = 3784;
pub const GDK_KEY_Hangul_WAE: i32 = 3785;
pub const GDK_KEY_Hangul_WE: i32 = 3790;
pub const GDK_KEY_Hangul_WEO: i32 = 3789;
pub const GDK_KEY_Hangul_WI: i32 = 3791;
pub const GDK_KEY_Hangul_YA: i32 = 3777;
pub const GDK_KEY_Hangul_YAE: i32 = 3778;
pub const GDK_KEY_Hangul_YE: i32 = 3782;
pub const GDK_KEY_Hangul_YEO: i32 = 3781;
pub const GDK_KEY_Hangul_YI: i32 = 3794;
pub const GDK_KEY_Hangul_YO: i32 = 3787;
pub const GDK_KEY_Hangul_YU: i32 = 3792;
pub const GDK_KEY_Hangul_YeorinHieuh: i32 = 3829;
pub const GDK_KEY_Hangul_switch: i32 = 65406;
pub const GDK_KEY_Hankaku: i32 = 65321;
pub const GDK_KEY_Hcircumflex: i32 = 678;
pub const GDK_KEY_Hebrew_switch: i32 = 65406;
pub const GDK_KEY_Help: i32 = 65386;
pub const GDK_KEY_Henkan: i32 = 65315;
pub const GDK_KEY_Henkan_Mode: i32 = 65315;
pub const GDK_KEY_Hibernate: i32 = 269025192;
pub const GDK_KEY_Hiragana: i32 = 65317;
pub const GDK_KEY_Hiragana_Katakana: i32 = 65319;
pub const GDK_KEY_History: i32 = 269025079;
pub const GDK_KEY_Home: i32 = 65360;
pub const GDK_KEY_HomePage: i32 = 269025048;
pub const GDK_KEY_HotLinks: i32 = 269025082;
pub const GDK_KEY_Hstroke: i32 = 673;
pub const GDK_KEY_Hyper_L: i32 = 65517;
pub const GDK_KEY_Hyper_R: i32 = 65518;
pub const GDK_KEY_I: i32 = 73;
pub const GDK_KEY_ISO_Center_Object: i32 = 65075;
pub const GDK_KEY_ISO_Continuous_Underline: i32 = 65072;
pub const GDK_KEY_ISO_Discontinuous_Underline: i32 = 65073;
pub const GDK_KEY_ISO_Emphasize: i32 = 65074;
pub const GDK_KEY_ISO_Enter: i32 = 65076;
pub const GDK_KEY_ISO_Fast_Cursor_Down: i32 = 65071;
pub const GDK_KEY_ISO_Fast_Cursor_Left: i32 = 65068;
pub const GDK_KEY_ISO_Fast_Cursor_Right: i32 = 65069;
pub const GDK_KEY_ISO_Fast_Cursor_Up: i32 = 65070;
pub const GDK_KEY_ISO_First_Group: i32 = 65036;
pub const GDK_KEY_ISO_First_Group_Lock: i32 = 65037;
pub const GDK_KEY_ISO_Group_Latch: i32 = 65030;
pub const GDK_KEY_ISO_Group_Lock: i32 = 65031;
pub const GDK_KEY_ISO_Group_Shift: i32 = 65406;
pub const GDK_KEY_ISO_Last_Group: i32 = 65038;
pub const GDK_KEY_ISO_Last_Group_Lock: i32 = 65039;
pub const GDK_KEY_ISO_Left_Tab: i32 = 65056;
pub const GDK_KEY_ISO_Level2_Latch: i32 = 65026;
pub const GDK_KEY_ISO_Level3_Latch: i32 = 65028;
pub const GDK_KEY_ISO_Level3_Lock: i32 = 65029;
pub const GDK_KEY_ISO_Level3_Shift: i32 = 65027;
pub const GDK_KEY_ISO_Level5_Latch: i32 = 65042;
pub const GDK_KEY_ISO_Level5_Lock: i32 = 65043;
pub const GDK_KEY_ISO_Level5_Shift: i32 = 65041;
pub const GDK_KEY_ISO_Lock: i32 = 65025;
pub const GDK_KEY_ISO_Move_Line_Down: i32 = 65058;
pub const GDK_KEY_ISO_Move_Line_Up: i32 = 65057;
pub const GDK_KEY_ISO_Next_Group: i32 = 65032;
pub const GDK_KEY_ISO_Next_Group_Lock: i32 = 65033;
pub const GDK_KEY_ISO_Partial_Line_Down: i32 = 65060;
pub const GDK_KEY_ISO_Partial_Line_Up: i32 = 65059;
pub const GDK_KEY_ISO_Partial_Space_Left: i32 = 65061;
pub const GDK_KEY_ISO_Partial_Space_Right: i32 = 65062;
pub const GDK_KEY_ISO_Prev_Group: i32 = 65034;
pub const GDK_KEY_ISO_Prev_Group_Lock: i32 = 65035;
pub const GDK_KEY_ISO_Release_Both_Margins: i32 = 65067;
pub const GDK_KEY_ISO_Release_Margin_Left: i32 = 65065;
pub const GDK_KEY_ISO_Release_Margin_Right: i32 = 65066;
pub const GDK_KEY_ISO_Set_Margin_Left: i32 = 65063;
pub const GDK_KEY_ISO_Set_Margin_Right: i32 = 65064;
pub const GDK_KEY_Iabovedot: i32 = 681;
pub const GDK_KEY_Iacute: i32 = 205;
pub const GDK_KEY_Ibelowdot: i32 = 16785098;
pub const GDK_KEY_Ibreve: i32 = 16777516;
pub const GDK_KEY_Icircumflex: i32 = 206;
pub const GDK_KEY_Idiaeresis: i32 = 207;
pub const GDK_KEY_Igrave: i32 = 204;
pub const GDK_KEY_Ihook: i32 = 16785096;
pub const GDK_KEY_Imacron: i32 = 975;
pub const GDK_KEY_Insert: i32 = 65379;
pub const GDK_KEY_Iogonek: i32 = 967;
pub const GDK_KEY_Itilde: i32 = 933;
pub const GDK_KEY_J: i32 = 74;
pub const GDK_KEY_Jcircumflex: i32 = 684;
pub const GDK_KEY_K: i32 = 75;
pub const GDK_KEY_KP_0: i32 = 65456;
pub const GDK_KEY_KP_1: i32 = 65457;
pub const GDK_KEY_KP_2: i32 = 65458;
pub const GDK_KEY_KP_3: i32 = 65459;
pub const GDK_KEY_KP_4: i32 = 65460;
pub const GDK_KEY_KP_5: i32 = 65461;
pub const GDK_KEY_KP_6: i32 = 65462;
pub const GDK_KEY_KP_7: i32 = 65463;
pub const GDK_KEY_KP_8: i32 = 65464;
pub const GDK_KEY_KP_9: i32 = 65465;
pub const GDK_KEY_KP_Add: i32 = 65451;
pub const GDK_KEY_KP_Begin: i32 = 65437;
pub const GDK_KEY_KP_Decimal: i32 = 65454;
pub const GDK_KEY_KP_Delete: i32 = 65439;
pub const GDK_KEY_KP_Divide: i32 = 65455;
pub const GDK_KEY_KP_Down: i32 = 65433;
pub const GDK_KEY_KP_End: i32 = 65436;
pub const GDK_KEY_KP_Enter: i32 = 65421;
pub const GDK_KEY_KP_Equal: i32 = 65469;
pub const GDK_KEY_KP_F1: i32 = 65425;
pub const GDK_KEY_KP_F2: i32 = 65426;
pub const GDK_KEY_KP_F3: i32 = 65427;
pub const GDK_KEY_KP_F4: i32 = 65428;
pub const GDK_KEY_KP_Home: i32 = 65429;
pub const GDK_KEY_KP_Insert: i32 = 65438;
pub const GDK_KEY_KP_Left: i32 = 65430;
pub const GDK_KEY_KP_Multiply: i32 = 65450;
pub const GDK_KEY_KP_Next: i32 = 65435;
pub const GDK_KEY_KP_Page_Down: i32 = 65435;
pub const GDK_KEY_KP_Page_Up: i32 = 65434;
pub const GDK_KEY_KP_Prior: i32 = 65434;
pub const GDK_KEY_KP_Right: i32 = 65432;
pub const GDK_KEY_KP_Separator: i32 = 65452;
pub const GDK_KEY_KP_Space: i32 = 65408;
pub const GDK_KEY_KP_Subtract: i32 = 65453;
pub const GDK_KEY_KP_Tab: i32 = 65417;
pub const GDK_KEY_KP_Up: i32 = 65431;
pub const GDK_KEY_Kana_Lock: i32 = 65325;
pub const GDK_KEY_Kana_Shift: i32 = 65326;
pub const GDK_KEY_Kanji: i32 = 65313;
pub const GDK_KEY_Kanji_Bangou: i32 = 65335;
pub const GDK_KEY_Katakana: i32 = 65318;
pub const GDK_KEY_KbdBrightnessDown: i32 = 269025030;
pub const GDK_KEY_KbdBrightnessUp: i32 = 269025029;
pub const GDK_KEY_KbdLightOnOff: i32 = 269025028;
pub const GDK_KEY_Kcedilla: i32 = 979;
pub const GDK_KEY_Korean_Won: i32 = 3839;
pub const GDK_KEY_L: i32 = 76;
pub const GDK_KEY_L1: i32 = 65480;
pub const GDK_KEY_L10: i32 = 65489;
pub const GDK_KEY_L2: i32 = 65481;
pub const GDK_KEY_L3: i32 = 65482;
pub const GDK_KEY_L4: i32 = 65483;
pub const GDK_KEY_L5: i32 = 65484;
pub const GDK_KEY_L6: i32 = 65485;
pub const GDK_KEY_L7: i32 = 65486;
pub const GDK_KEY_L8: i32 = 65487;
pub const GDK_KEY_L9: i32 = 65488;
pub const GDK_KEY_Lacute: i32 = 453;
pub const GDK_KEY_Last_Virtual_Screen: i32 = 65236;
pub const GDK_KEY_Launch0: i32 = 269025088;
pub const GDK_KEY_Launch1: i32 = 269025089;
pub const GDK_KEY_Launch2: i32 = 269025090;
pub const GDK_KEY_Launch3: i32 = 269025091;
pub const GDK_KEY_Launch4: i32 = 269025092;
pub const GDK_KEY_Launch5: i32 = 269025093;
pub const GDK_KEY_Launch6: i32 = 269025094;
pub const GDK_KEY_Launch7: i32 = 269025095;
pub const GDK_KEY_Launch8: i32 = 269025096;
pub const GDK_KEY_Launch9: i32 = 269025097;
pub const GDK_KEY_LaunchA: i32 = 269025098;
pub const GDK_KEY_LaunchB: i32 = 269025099;
pub const GDK_KEY_LaunchC: i32 = 269025100;
pub const GDK_KEY_LaunchD: i32 = 269025101;
pub const GDK_KEY_LaunchE: i32 = 269025102;
pub const GDK_KEY_LaunchF: i32 = 269025103;
pub const GDK_KEY_Lbelowdot: i32 = 16784950;
pub const GDK_KEY_Lcaron: i32 = 421;
pub const GDK_KEY_Lcedilla: i32 = 934;
pub const GDK_KEY_Left: i32 = 65361;
pub const GDK_KEY_LightBulb: i32 = 269025077;
pub const GDK_KEY_Linefeed: i32 = 65290;
pub const GDK_KEY_LiraSign: i32 = 16785572;
pub const GDK_KEY_LogGrabInfo: i32 = 269024805;
pub const GDK_KEY_LogOff: i32 = 269025121;
pub const GDK_KEY_LogWindowTree: i32 = 269024804;
pub const GDK_KEY_Lstroke: i32 = 419;
pub const GDK_KEY_M: i32 = 77;
pub const GDK_KEY_Mabovedot: i32 = 16784960;
pub const GDK_KEY_Macedonia_DSE: i32 = 1717;
pub const GDK_KEY_Macedonia_GJE: i32 = 1714;
pub const GDK_KEY_Macedonia_KJE: i32 = 1724;
pub const GDK_KEY_Macedonia_dse: i32 = 1701;
pub const GDK_KEY_Macedonia_gje: i32 = 1698;
pub const GDK_KEY_Macedonia_kje: i32 = 1708;
pub const GDK_KEY_Mae_Koho: i32 = 65342;
pub const GDK_KEY_Mail: i32 = 269025049;
pub const GDK_KEY_MailForward: i32 = 269025168;
pub const GDK_KEY_Market: i32 = 269025122;
pub const GDK_KEY_Massyo: i32 = 65324;
pub const GDK_KEY_Meeting: i32 = 269025123;
pub const GDK_KEY_Memo: i32 = 269025054;
pub const GDK_KEY_Menu: i32 = 65383;
pub const GDK_KEY_MenuKB: i32 = 269025125;
pub const GDK_KEY_MenuPB: i32 = 269025126;
pub const GDK_KEY_Messenger: i32 = 269025166;
pub const GDK_KEY_Meta_L: i32 = 65511;
pub const GDK_KEY_Meta_R: i32 = 65512;
pub const GDK_KEY_MillSign: i32 = 16785573;
pub const GDK_KEY_ModeLock: i32 = 269025025;
pub const GDK_KEY_Mode_switch: i32 = 65406;
pub const GDK_KEY_MonBrightnessDown: i32 = 269025027;
pub const GDK_KEY_MonBrightnessUp: i32 = 269025026;
pub const GDK_KEY_MouseKeys_Accel_Enable: i32 = 65143;
pub const GDK_KEY_MouseKeys_Enable: i32 = 65142;
pub const GDK_KEY_Muhenkan: i32 = 65314;
pub const GDK_KEY_Multi_key: i32 = 65312;
pub const GDK_KEY_MultipleCandidate: i32 = 65341;
pub const GDK_KEY_Music: i32 = 269025170;
pub const GDK_KEY_MyComputer: i32 = 269025075;
pub const GDK_KEY_MySites: i32 = 269025127;
pub const GDK_KEY_N: i32 = 78;
pub const GDK_KEY_Nacute: i32 = 465;
pub const GDK_KEY_NairaSign: i32 = 16785574;
pub const GDK_KEY_Ncaron: i32 = 466;
pub const GDK_KEY_Ncedilla: i32 = 977;
pub const GDK_KEY_New: i32 = 269025128;
pub const GDK_KEY_NewSheqelSign: i32 = 16785578;
pub const GDK_KEY_News: i32 = 269025129;
pub const GDK_KEY_Next: i32 = 65366;
pub const GDK_KEY_Next_VMode: i32 = 269024802;
pub const GDK_KEY_Next_Virtual_Screen: i32 = 65234;
pub const GDK_KEY_Ntilde: i32 = 209;
pub const GDK_KEY_Num_Lock: i32 = 65407;
pub const GDK_KEY_O: i32 = 79;
pub const GDK_KEY_OE: i32 = 5052;
pub const GDK_KEY_Oacute: i32 = 211;
pub const GDK_KEY_Obarred: i32 = 16777631;
pub const GDK_KEY_Obelowdot: i32 = 16785100;
pub const GDK_KEY_Ocaron: i32 = 16777681;
pub const GDK_KEY_Ocircumflex: i32 = 212;
pub const GDK_KEY_Ocircumflexacute: i32 = 16785104;
pub const GDK_KEY_Ocircumflexbelowdot: i32 = 16785112;
pub const GDK_KEY_Ocircumflexgrave: i32 = 16785106;
pub const GDK_KEY_Ocircumflexhook: i32 = 16785108;
pub const GDK_KEY_Ocircumflextilde: i32 = 16785110;
pub const GDK_KEY_Odiaeresis: i32 = 214;
pub const GDK_KEY_Odoubleacute: i32 = 469;
pub const GDK_KEY_OfficeHome: i32 = 269025130;
pub const GDK_KEY_Ograve: i32 = 210;
pub const GDK_KEY_Ohook: i32 = 16785102;
pub const GDK_KEY_Ohorn: i32 = 16777632;
pub const GDK_KEY_Ohornacute: i32 = 16785114;
pub const GDK_KEY_Ohornbelowdot: i32 = 16785122;
pub const GDK_KEY_Ohorngrave: i32 = 16785116;
pub const GDK_KEY_Ohornhook: i32 = 16785118;
pub const GDK_KEY_Ohorntilde: i32 = 16785120;
pub const GDK_KEY_Omacron: i32 = 978;
pub const GDK_KEY_Ooblique: i32 = 216;
pub const GDK_KEY_Open: i32 = 269025131;
pub const GDK_KEY_OpenURL: i32 = 269025080;
pub const GDK_KEY_Option: i32 = 269025132;
pub const GDK_KEY_Oslash: i32 = 216;
pub const GDK_KEY_Otilde: i32 = 213;
pub const GDK_KEY_Overlay1_Enable: i32 = 65144;
pub const GDK_KEY_Overlay2_Enable: i32 = 65145;
pub const GDK_KEY_P: i32 = 80;
pub const GDK_KEY_Pabovedot: i32 = 16784982;
pub const GDK_KEY_Page_Down: i32 = 65366;
pub const GDK_KEY_Page_Up: i32 = 65365;
pub const GDK_KEY_Paste: i32 = 269025133;
pub const GDK_KEY_Pause: i32 = 65299;
pub const GDK_KEY_PesetaSign: i32 = 16785575;
pub const GDK_KEY_Phone: i32 = 269025134;
pub const GDK_KEY_Pictures: i32 = 269025169;
pub const GDK_KEY_Pointer_Accelerate: i32 = 65274;
pub const GDK_KEY_Pointer_Button1: i32 = 65257;
pub const GDK_KEY_Pointer_Button2: i32 = 65258;
pub const GDK_KEY_Pointer_Button3: i32 = 65259;
pub const GDK_KEY_Pointer_Button4: i32 = 65260;
pub const GDK_KEY_Pointer_Button5: i32 = 65261;
pub const GDK_KEY_Pointer_Button_Dflt: i32 = 65256;
pub const GDK_KEY_Pointer_DblClick1: i32 = 65263;
pub const GDK_KEY_Pointer_DblClick2: i32 = 65264;
pub const GDK_KEY_Pointer_DblClick3: i32 = 65265;
pub const GDK_KEY_Pointer_DblClick4: i32 = 65266;
pub const GDK_KEY_Pointer_DblClick5: i32 = 65267;
pub const GDK_KEY_Pointer_DblClick_Dflt: i32 = 65262;
pub const GDK_KEY_Pointer_DfltBtnNext: i32 = 65275;
pub const GDK_KEY_Pointer_DfltBtnPrev: i32 = 65276;
pub const GDK_KEY_Pointer_Down: i32 = 65251;
pub const GDK_KEY_Pointer_DownLeft: i32 = 65254;
pub const GDK_KEY_Pointer_DownRight: i32 = 65255;
pub const GDK_KEY_Pointer_Drag1: i32 = 65269;
pub const GDK_KEY_Pointer_Drag2: i32 = 65270;
pub const GDK_KEY_Pointer_Drag3: i32 = 65271;
pub const GDK_KEY_Pointer_Drag4: i32 = 65272;
pub const GDK_KEY_Pointer_Drag5: i32 = 65277;
pub const GDK_KEY_Pointer_Drag_Dflt: i32 = 65268;
pub const GDK_KEY_Pointer_EnableKeys: i32 = 65273;
pub const GDK_KEY_Pointer_Left: i32 = 65248;
pub const GDK_KEY_Pointer_Right: i32 = 65249;
pub const GDK_KEY_Pointer_Up: i32 = 65250;
pub const GDK_KEY_Pointer_UpLeft: i32 = 65252;
pub const GDK_KEY_Pointer_UpRight: i32 = 65253;
pub const GDK_KEY_PowerDown: i32 = 269025057;
pub const GDK_KEY_PowerOff: i32 = 269025066;
pub const GDK_KEY_Prev_VMode: i32 = 269024803;
pub const GDK_KEY_Prev_Virtual_Screen: i32 = 65233;
pub const GDK_KEY_PreviousCandidate: i32 = 65342;
pub const GDK_KEY_Print: i32 = 65377;
pub const GDK_KEY_Prior: i32 = 65365;
pub const GDK_KEY_Q: i32 = 81;
pub const GDK_KEY_R: i32 = 82;
pub const GDK_KEY_R1: i32 = 65490;
pub const GDK_KEY_R10: i32 = 65499;
pub const GDK_KEY_R11: i32 = 65500;
pub const GDK_KEY_R12: i32 = 65501;
pub const GDK_KEY_R13: i32 = 65502;
pub const GDK_KEY_R14: i32 = 65503;
pub const GDK_KEY_R15: i32 = 65504;
pub const GDK_KEY_R2: i32 = 65491;
pub const GDK_KEY_R3: i32 = 65492;
pub const GDK_KEY_R4: i32 = 65493;
pub const GDK_KEY_R5: i32 = 65494;
pub const GDK_KEY_R6: i32 = 65495;
pub const GDK_KEY_R7: i32 = 65496;
pub const GDK_KEY_R8: i32 = 65497;
pub const GDK_KEY_R9: i32 = 65498;
pub const GDK_KEY_Racute: i32 = 448;
pub const GDK_KEY_Rcaron: i32 = 472;
pub const GDK_KEY_Rcedilla: i32 = 931;
pub const GDK_KEY_Red: i32 = 269025187;
pub const GDK_KEY_Redo: i32 = 65382;
pub const GDK_KEY_Refresh: i32 = 269025065;
pub const GDK_KEY_Reload: i32 = 269025139;
pub const GDK_KEY_RepeatKeys_Enable: i32 = 65138;
pub const GDK_KEY_Reply: i32 = 269025138;
pub const GDK_KEY_Return: i32 = 65293;
pub const GDK_KEY_Right: i32 = 65363;
pub const GDK_KEY_RockerDown: i32 = 269025060;
pub const GDK_KEY_RockerEnter: i32 = 269025061;
pub const GDK_KEY_RockerUp: i32 = 269025059;
pub const GDK_KEY_Romaji: i32 = 65316;
pub const GDK_KEY_RotateWindows: i32 = 269025140;
pub const GDK_KEY_RotationKB: i32 = 269025142;
pub const GDK_KEY_RotationPB: i32 = 269025141;
pub const GDK_KEY_RupeeSign: i32 = 16785576;
pub const GDK_KEY_S: i32 = 83;
pub const GDK_KEY_SCHWA: i32 = 16777615;
pub const GDK_KEY_Sabovedot: i32 = 16784992;
pub const GDK_KEY_Sacute: i32 = 422;
pub const GDK_KEY_Save: i32 = 269025143;
pub const GDK_KEY_Scaron: i32 = 425;
pub const GDK_KEY_Scedilla: i32 = 426;
pub const GDK_KEY_Scircumflex: i32 = 734;
pub const GDK_KEY_ScreenSaver: i32 = 269025069;
pub const GDK_KEY_ScrollClick: i32 = 269025146;
pub const GDK_KEY_ScrollDown: i32 = 269025145;
pub const GDK_KEY_ScrollUp: i32 = 269025144;
pub const GDK_KEY_Scroll_Lock: i32 = 65300;
pub const GDK_KEY_Search: i32 = 269025051;
pub const GDK_KEY_Select: i32 = 65376;
pub const GDK_KEY_SelectButton: i32 = 269025184;
pub const GDK_KEY_Send: i32 = 269025147;
pub const GDK_KEY_Serbian_DJE: i32 = 1713;
pub const GDK_KEY_Serbian_DZE: i32 = 1727;
pub const GDK_KEY_Serbian_JE: i32 = 1720;
pub const GDK_KEY_Serbian_LJE: i32 = 1721;
pub const GDK_KEY_Serbian_NJE: i32 = 1722;
pub const GDK_KEY_Serbian_TSHE: i32 = 1723;
pub const GDK_KEY_Serbian_dje: i32 = 1697;
pub const GDK_KEY_Serbian_dze: i32 = 1711;
pub const GDK_KEY_Serbian_je: i32 = 1704;
pub const GDK_KEY_Serbian_lje: i32 = 1705;
pub const GDK_KEY_Serbian_nje: i32 = 1706;
pub const GDK_KEY_Serbian_tshe: i32 = 1707;
pub const GDK_KEY_Shift_L: i32 = 65505;
pub const GDK_KEY_Shift_Lock: i32 = 65510;
pub const GDK_KEY_Shift_R: i32 = 65506;
pub const GDK_KEY_Shop: i32 = 269025078;
pub const GDK_KEY_SingleCandidate: i32 = 65340;
pub const GDK_KEY_Sinh_a: i32 = 16780677;
pub const GDK_KEY_Sinh_aa: i32 = 16780678;
pub const GDK_KEY_Sinh_aa2: i32 = 16780751;
pub const GDK_KEY_Sinh_ae: i32 = 16780679;
pub const GDK_KEY_Sinh_ae2: i32 = 16780752;
pub const GDK_KEY_Sinh_aee: i32 = 16780680;
pub const GDK_KEY_Sinh_aee2: i32 = 16780753;
pub const GDK_KEY_Sinh_ai: i32 = 16780691;
pub const GDK_KEY_Sinh_ai2: i32 = 16780763;
pub const GDK_KEY_Sinh_al: i32 = 16780746;
pub const GDK_KEY_Sinh_au: i32 = 16780694;
pub const GDK_KEY_Sinh_au2: i32 = 16780766;
pub const GDK_KEY_Sinh_ba: i32 = 16780726;
pub const GDK_KEY_Sinh_bha: i32 = 16780727;
pub const GDK_KEY_Sinh_ca: i32 = 16780704;
pub const GDK_KEY_Sinh_cha: i32 = 16780705;
pub const GDK_KEY_Sinh_dda: i32 = 16780713;
pub const GDK_KEY_Sinh_ddha: i32 = 16780714;
pub const GDK_KEY_Sinh_dha: i32 = 16780719;
pub const GDK_KEY_Sinh_dhha: i32 = 16780720;
pub const GDK_KEY_Sinh_e: i32 = 16780689;
pub const GDK_KEY_Sinh_e2: i32 = 16780761;
pub const GDK_KEY_Sinh_ee: i32 = 16780690;
pub const GDK_KEY_Sinh_ee2: i32 = 16780762;
pub const GDK_KEY_Sinh_fa: i32 = 16780742;
pub const GDK_KEY_Sinh_ga: i32 = 16780700;
pub const GDK_KEY_Sinh_gha: i32 = 16780701;
pub const GDK_KEY_Sinh_h2: i32 = 16780675;
pub const GDK_KEY_Sinh_ha: i32 = 16780740;
pub const GDK_KEY_Sinh_i: i32 = 16780681;
pub const GDK_KEY_Sinh_i2: i32 = 16780754;
pub const GDK_KEY_Sinh_ii: i32 = 16780682;
pub const GDK_KEY_Sinh_ii2: i32 = 16780755;
pub const GDK_KEY_Sinh_ja: i32 = 16780706;
pub const GDK_KEY_Sinh_jha: i32 = 16780707;
pub const GDK_KEY_Sinh_jnya: i32 = 16780709;
pub const GDK_KEY_Sinh_ka: i32 = 16780698;
pub const GDK_KEY_Sinh_kha: i32 = 16780699;
pub const GDK_KEY_Sinh_kunddaliya: i32 = 16780788;
pub const GDK_KEY_Sinh_la: i32 = 16780733;
pub const GDK_KEY_Sinh_lla: i32 = 16780741;
pub const GDK_KEY_Sinh_lu: i32 = 16780687;
pub const GDK_KEY_Sinh_lu2: i32 = 16780767;
pub const GDK_KEY_Sinh_luu: i32 = 16780688;
pub const GDK_KEY_Sinh_luu2: i32 = 16780787;
pub const GDK_KEY_Sinh_ma: i32 = 16780728;
pub const GDK_KEY_Sinh_mba: i32 = 16780729;
pub const GDK_KEY_Sinh_na: i32 = 16780721;
pub const GDK_KEY_Sinh_ndda: i32 = 16780716;
pub const GDK_KEY_Sinh_ndha: i32 = 16780723;
pub const GDK_KEY_Sinh_ng: i32 = 16780674;
pub const GDK_KEY_Sinh_ng2: i32 = 16780702;
pub const GDK_KEY_Sinh_nga: i32 = 16780703;
pub const GDK_KEY_Sinh_nja: i32 = 16780710;
pub const GDK_KEY_Sinh_nna: i32 = 16780715;
pub const GDK_KEY_Sinh_nya: i32 = 16780708;
pub const GDK_KEY_Sinh_o: i32 = 16780692;
pub const GDK_KEY_Sinh_o2: i32 = 16780764;
pub const GDK_KEY_Sinh_oo: i32 = 16780693;
pub const GDK_KEY_Sinh_oo2: i32 = 16780765;
pub const GDK_KEY_Sinh_pa: i32 = 16780724;
pub const GDK_KEY_Sinh_pha: i32 = 16780725;
pub const GDK_KEY_Sinh_ra: i32 = 16780731;
pub const GDK_KEY_Sinh_ri: i32 = 16780685;
pub const GDK_KEY_Sinh_rii: i32 = 16780686;
pub const GDK_KEY_Sinh_ru2: i32 = 16780760;
pub const GDK_KEY_Sinh_ruu2: i32 = 16780786;
pub const GDK_KEY_Sinh_sa: i32 = 16780739;
pub const GDK_KEY_Sinh_sha: i32 = 16780737;
pub const GDK_KEY_Sinh_ssha: i32 = 16780738;
pub const GDK_KEY_Sinh_tha: i32 = 16780717;
pub const GDK_KEY_Sinh_thha: i32 = 16780718;
pub const GDK_KEY_Sinh_tta: i32 = 16780711;
pub const GDK_KEY_Sinh_ttha: i32 = 16780712;
pub const GDK_KEY_Sinh_u: i32 = 16780683;
pub const GDK_KEY_Sinh_u2: i32 = 16780756;
pub const GDK_KEY_Sinh_uu: i32 = 16780684;
pub const GDK_KEY_Sinh_uu2: i32 = 16780758;
pub const GDK_KEY_Sinh_va: i32 = 16780736;
pub const GDK_KEY_Sinh_ya: i32 = 16780730;
pub const GDK_KEY_Sleep: i32 = 269025071;
pub const GDK_KEY_SlowKeys_Enable: i32 = 65139;
pub const GDK_KEY_Spell: i32 = 269025148;
pub const GDK_KEY_SplitScreen: i32 = 269025149;
pub const GDK_KEY_Standby: i32 = 269025040;
pub const GDK_KEY_Start: i32 = 269025050;
pub const GDK_KEY_StickyKeys_Enable: i32 = 65141;
pub const GDK_KEY_Stop: i32 = 269025064;
pub const GDK_KEY_Subtitle: i32 = 269025178;
pub const GDK_KEY_Super_L: i32 = 65515;
pub const GDK_KEY_Super_R: i32 = 65516;
pub const GDK_KEY_Support: i32 = 269025150;
pub const GDK_KEY_Suspend: i32 = 269025191;
pub const GDK_KEY_Switch_VT_1: i32 = 269024769;
pub const GDK_KEY_Switch_VT_10: i32 = 269024778;
pub const GDK_KEY_Switch_VT_11: i32 = 269024779;
pub const GDK_KEY_Switch_VT_12: i32 = 269024780;
pub const GDK_KEY_Switch_VT_2: i32 = 269024770;
pub const GDK_KEY_Switch_VT_3: i32 = 269024771;
pub const GDK_KEY_Switch_VT_4: i32 = 269024772;
pub const GDK_KEY_Switch_VT_5: i32 = 269024773;
pub const GDK_KEY_Switch_VT_6: i32 = 269024774;
pub const GDK_KEY_Switch_VT_7: i32 = 269024775;
pub const GDK_KEY_Switch_VT_8: i32 = 269024776;
pub const GDK_KEY_Switch_VT_9: i32 = 269024777;
pub const GDK_KEY_Sys_Req: i32 = 65301;
pub const GDK_KEY_T: i32 = 84;
pub const GDK_KEY_THORN: i32 = 222;
pub const GDK_KEY_Tab: i32 = 65289;
pub const GDK_KEY_Tabovedot: i32 = 16785002;
pub const GDK_KEY_TaskPane: i32 = 269025151;
pub const GDK_KEY_Tcaron: i32 = 427;
pub const GDK_KEY_Tcedilla: i32 = 478;
pub const GDK_KEY_Terminal: i32 = 269025152;
pub const GDK_KEY_Terminate_Server: i32 = 65237;
pub const GDK_KEY_Thai_baht: i32 = 3551;
pub const GDK_KEY_Thai_bobaimai: i32 = 3514;
pub const GDK_KEY_Thai_chochan: i32 = 3496;
pub const GDK_KEY_Thai_chochang: i32 = 3498;
pub const GDK_KEY_Thai_choching: i32 = 3497;
pub const GDK_KEY_Thai_chochoe: i32 = 3500;
pub const GDK_KEY_Thai_dochada: i32 = 3502;
pub const GDK_KEY_Thai_dodek: i32 = 3508;
pub const GDK_KEY_Thai_fofa: i32 = 3517;
pub const GDK_KEY_Thai_fofan: i32 = 3519;
pub const GDK_KEY_Thai_hohip: i32 = 3531;
pub const GDK_KEY_Thai_honokhuk: i32 = 3534;
pub const GDK_KEY_Thai_khokhai: i32 = 3490;
pub const GDK_KEY_Thai_khokhon: i32 = 3493;
pub const GDK_KEY_Thai_khokhuat: i32 = 3491;
pub const GDK_KEY_Thai_khokhwai: i32 = 3492;
pub const GDK_KEY_Thai_khorakhang: i32 = 3494;
pub const GDK_KEY_Thai_kokai: i32 = 3489;
pub const GDK_KEY_Thai_lakkhangyao: i32 = 3557;
pub const GDK_KEY_Thai_lekchet: i32 = 3575;
pub const GDK_KEY_Thai_lekha: i32 = 3573;
pub const GDK_KEY_Thai_lekhok: i32 = 3574;
pub const GDK_KEY_Thai_lekkao: i32 = 3577;
pub const GDK_KEY_Thai_leknung: i32 = 3569;
pub const GDK_KEY_Thai_lekpaet: i32 = 3576;
pub const GDK_KEY_Thai_leksam: i32 = 3571;
pub const GDK_KEY_Thai_leksi: i32 = 3572;
pub const GDK_KEY_Thai_leksong: i32 = 3570;
pub const GDK_KEY_Thai_leksun: i32 = 3568;
pub const GDK_KEY_Thai_lochula: i32 = 3532;
pub const GDK_KEY_Thai_loling: i32 = 3525;
pub const GDK_KEY_Thai_lu: i32 = 3526;
pub const GDK_KEY_Thai_maichattawa: i32 = 3563;
pub const GDK_KEY_Thai_maiek: i32 = 3560;
pub const GDK_KEY_Thai_maihanakat: i32 = 3537;
pub const GDK_KEY_Thai_maihanakat_maitho: i32 = 3550;
pub const GDK_KEY_Thai_maitaikhu: i32 = 3559;
pub const GDK_KEY_Thai_maitho: i32 = 3561;
pub const GDK_KEY_Thai_maitri: i32 = 3562;
pub const GDK_KEY_Thai_maiyamok: i32 = 3558;
pub const GDK_KEY_Thai_moma: i32 = 3521;
pub const GDK_KEY_Thai_ngongu: i32 = 3495;
pub const GDK_KEY_Thai_nikhahit: i32 = 3565;
pub const GDK_KEY_Thai_nonen: i32 = 3507;
pub const GDK_KEY_Thai_nonu: i32 = 3513;
pub const GDK_KEY_Thai_oang: i32 = 3533;
pub const GDK_KEY_Thai_paiyannoi: i32 = 3535;
pub const GDK_KEY_Thai_phinthu: i32 = 3546;
pub const GDK_KEY_Thai_phophan: i32 = 3518;
pub const GDK_KEY_Thai_phophung: i32 = 3516;
pub const GDK_KEY_Thai_phosamphao: i32 = 3520;
pub const GDK_KEY_Thai_popla: i32 = 3515;
pub const GDK_KEY_Thai_rorua: i32 = 3523;
pub const GDK_KEY_Thai_ru: i32 = 3524;
pub const GDK_KEY_Thai_saraa: i32 = 3536;
pub const GDK_KEY_Thai_saraaa: i32 = 3538;
pub const GDK_KEY_Thai_saraae: i32 = 3553;
pub const GDK_KEY_Thai_saraaimaimalai: i32 = 3556;
pub const GDK_KEY_Thai_saraaimaimuan: i32 = 3555;
pub const GDK_KEY_Thai_saraam: i32 = 3539;
pub const GDK_KEY_Thai_sarae: i32 = 3552;
pub const GDK_KEY_Thai_sarai: i32 = 3540;
pub const GDK_KEY_Thai_saraii: i32 = 3541;
pub const GDK_KEY_Thai_sarao: i32 = 3554;
pub const GDK_KEY_Thai_sarau: i32 = 3544;
pub const GDK_KEY_Thai_saraue: i32 = 3542;
pub const GDK_KEY_Thai_sarauee: i32 = 3543;
pub const GDK_KEY_Thai_sarauu: i32 = 3545;
pub const GDK_KEY_Thai_sorusi: i32 = 3529;
pub const GDK_KEY_Thai_sosala: i32 = 3528;
pub const GDK_KEY_Thai_soso: i32 = 3499;
pub const GDK_KEY_Thai_sosua: i32 = 3530;
pub const GDK_KEY_Thai_thanthakhat: i32 = 3564;
pub const GDK_KEY_Thai_thonangmontho: i32 = 3505;
pub const GDK_KEY_Thai_thophuthao: i32 = 3506;
pub const GDK_KEY_Thai_thothahan: i32 = 3511;
pub const GDK_KEY_Thai_thothan: i32 = 3504;
pub const GDK_KEY_Thai_thothong: i32 = 3512;
pub const GDK_KEY_Thai_thothung: i32 = 3510;
pub const GDK_KEY_Thai_topatak: i32 = 3503;
pub const GDK_KEY_Thai_totao: i32 = 3509;
pub const GDK_KEY_Thai_wowaen: i32 = 3527;
pub const GDK_KEY_Thai_yoyak: i32 = 3522;
pub const GDK_KEY_Thai_yoying: i32 = 3501;
pub const GDK_KEY_Thorn: i32 = 222;
pub const GDK_KEY_Time: i32 = 269025183;
pub const GDK_KEY_ToDoList: i32 = 269025055;
pub const GDK_KEY_Tools: i32 = 269025153;
pub const GDK_KEY_TopMenu: i32 = 269025186;
pub const GDK_KEY_TouchpadOff: i32 = 269025201;
pub const GDK_KEY_TouchpadOn: i32 = 269025200;
pub const GDK_KEY_TouchpadToggle: i32 = 269025193;
pub const GDK_KEY_Touroku: i32 = 65323;
pub const GDK_KEY_Travel: i32 = 269025154;
pub const GDK_KEY_Tslash: i32 = 940;
pub const GDK_KEY_U: i32 = 85;
pub const GDK_KEY_UWB: i32 = 269025174;
pub const GDK_KEY_Uacute: i32 = 218;
pub const GDK_KEY_Ubelowdot: i32 = 16785124;
pub const GDK_KEY_Ubreve: i32 = 733;
pub const GDK_KEY_Ucircumflex: i32 = 219;
pub const GDK_KEY_Udiaeresis: i32 = 220;
pub const GDK_KEY_Udoubleacute: i32 = 475;
pub const GDK_KEY_Ugrave: i32 = 217;
pub const GDK_KEY_Uhook: i32 = 16785126;
pub const GDK_KEY_Uhorn: i32 = 16777647;
pub const GDK_KEY_Uhornacute: i32 = 16785128;
pub const GDK_KEY_Uhornbelowdot: i32 = 16785136;
pub const GDK_KEY_Uhorngrave: i32 = 16785130;
pub const GDK_KEY_Uhornhook: i32 = 16785132;
pub const GDK_KEY_Uhorntilde: i32 = 16785134;
pub const GDK_KEY_Ukrainian_GHE_WITH_UPTURN: i32 = 1725;
pub const GDK_KEY_Ukrainian_I: i32 = 1718;
pub const GDK_KEY_Ukrainian_IE: i32 = 1716;
pub const GDK_KEY_Ukrainian_YI: i32 = 1719;
pub const GDK_KEY_Ukrainian_ghe_with_upturn: i32 = 1709;
pub const GDK_KEY_Ukrainian_i: i32 = 1702;
pub const GDK_KEY_Ukrainian_ie: i32 = 1700;
pub const GDK_KEY_Ukrainian_yi: i32 = 1703;
pub const GDK_KEY_Ukranian_I: i32 = 1718;
pub const GDK_KEY_Ukranian_JE: i32 = 1716;
pub const GDK_KEY_Ukranian_YI: i32 = 1719;
pub const GDK_KEY_Ukranian_i: i32 = 1702;
pub const GDK_KEY_Ukranian_je: i32 = 1700;
pub const GDK_KEY_Ukranian_yi: i32 = 1703;
pub const GDK_KEY_Umacron: i32 = 990;
pub const GDK_KEY_Undo: i32 = 65381;
pub const GDK_KEY_Ungrab: i32 = 269024800;
pub const GDK_KEY_Uogonek: i32 = 985;
pub const GDK_KEY_Up: i32 = 65362;
pub const GDK_KEY_Uring: i32 = 473;
pub const GDK_KEY_User1KB: i32 = 269025157;
pub const GDK_KEY_User2KB: i32 = 269025158;
pub const GDK_KEY_UserPB: i32 = 269025156;
pub const GDK_KEY_Utilde: i32 = 989;
pub const GDK_KEY_V: i32 = 86;
pub const GDK_KEY_VendorHome: i32 = 269025076;
pub const GDK_KEY_Video: i32 = 269025159;
pub const GDK_KEY_View: i32 = 269025185;
pub const GDK_KEY_VoidSymbol: i32 = 16777215;
pub const GDK_KEY_W: i32 = 87;
pub const GDK_KEY_WLAN: i32 = 269025173;
pub const GDK_KEY_WWW: i32 = 269025070;
pub const GDK_KEY_Wacute: i32 = 16785026;
pub const GDK_KEY_WakeUp: i32 = 269025067;
pub const GDK_KEY_Wcircumflex: i32 = 16777588;
pub const GDK_KEY_Wdiaeresis: i32 = 16785028;
pub const GDK_KEY_WebCam: i32 = 269025167;
pub const GDK_KEY_Wgrave: i32 = 16785024;
pub const GDK_KEY_WheelButton: i32 = 269025160;
pub const GDK_KEY_WindowClear: i32 = 269025109;
pub const GDK_KEY_WonSign: i32 = 16785577;
pub const GDK_KEY_Word: i32 = 269025161;
pub const GDK_KEY_X: i32 = 88;
pub const GDK_KEY_Xabovedot: i32 = 16785034;
pub const GDK_KEY_Xfer: i32 = 269025162;
pub const GDK_KEY_Y: i32 = 89;
pub const GDK_KEY_Yacute: i32 = 221;
pub const GDK_KEY_Ybelowdot: i32 = 16785140;
pub const GDK_KEY_Ycircumflex: i32 = 16777590;
pub const GDK_KEY_Ydiaeresis: i32 = 5054;
pub const GDK_KEY_Yellow: i32 = 269025189;
pub const GDK_KEY_Ygrave: i32 = 16785138;
pub const GDK_KEY_Yhook: i32 = 16785142;
pub const GDK_KEY_Ytilde: i32 = 16785144;
pub const GDK_KEY_Z: i32 = 90;
pub const GDK_KEY_Zabovedot: i32 = 431;
pub const GDK_KEY_Zacute: i32 = 428;
pub const GDK_KEY_Zcaron: i32 = 430;
pub const GDK_KEY_Zen_Koho: i32 = 65341;
pub const GDK_KEY_Zenkaku: i32 = 65320;
pub const GDK_KEY_Zenkaku_Hankaku: i32 = 65322;
pub const GDK_KEY_ZoomIn: i32 = 269025163;
pub const GDK_KEY_ZoomOut: i32 = 269025164;
pub const GDK_KEY_Zstroke: i32 = 16777653;
pub const GDK_KEY_a: i32 = 97;
pub const GDK_KEY_aacute: i32 = 225;
pub const GDK_KEY_abelowdot: i32 = 16785057;
pub const GDK_KEY_abovedot: i32 = 511;
pub const GDK_KEY_abreve: i32 = 483;
pub const GDK_KEY_abreveacute: i32 = 16785071;
pub const GDK_KEY_abrevebelowdot: i32 = 16785079;
pub const GDK_KEY_abrevegrave: i32 = 16785073;
pub const GDK_KEY_abrevehook: i32 = 16785075;
pub const GDK_KEY_abrevetilde: i32 = 16785077;
pub const GDK_KEY_acircumflex: i32 = 226;
pub const GDK_KEY_acircumflexacute: i32 = 16785061;
pub const GDK_KEY_acircumflexbelowdot: i32 = 16785069;
pub const GDK_KEY_acircumflexgrave: i32 = 16785063;
pub const GDK_KEY_acircumflexhook: i32 = 16785065;
pub const GDK_KEY_acircumflextilde: i32 = 16785067;
pub const GDK_KEY_acute: i32 = 180;
pub const GDK_KEY_adiaeresis: i32 = 228;
pub const GDK_KEY_ae: i32 = 230;
pub const GDK_KEY_agrave: i32 = 224;
pub const GDK_KEY_ahook: i32 = 16785059;
pub const GDK_KEY_amacron: i32 = 992;
pub const GDK_KEY_ampersand: i32 = 38;
pub const GDK_KEY_aogonek: i32 = 433;
pub const GDK_KEY_apostrophe: i32 = 39;
pub const GDK_KEY_approxeq: i32 = 16785992;
pub const GDK_KEY_approximate: i32 = 2248;
pub const GDK_KEY_aring: i32 = 229;
pub const GDK_KEY_asciicircum: i32 = 94;
pub const GDK_KEY_asciitilde: i32 = 126;
pub const GDK_KEY_asterisk: i32 = 42;
pub const GDK_KEY_at: i32 = 64;
pub const GDK_KEY_atilde: i32 = 227;
pub const GDK_KEY_b: i32 = 98;
pub const GDK_KEY_babovedot: i32 = 16784899;
pub const GDK_KEY_backslash: i32 = 92;
pub const GDK_KEY_ballotcross: i32 = 2804;
pub const GDK_KEY_bar: i32 = 124;
pub const GDK_KEY_because: i32 = 16785973;
pub const GDK_KEY_blank: i32 = 2527;
pub const GDK_KEY_botintegral: i32 = 2213;
pub const GDK_KEY_botleftparens: i32 = 2220;
pub const GDK_KEY_botleftsqbracket: i32 = 2216;
pub const GDK_KEY_botleftsummation: i32 = 2226;
pub const GDK_KEY_botrightparens: i32 = 2222;
pub const GDK_KEY_botrightsqbracket: i32 = 2218;
pub const GDK_KEY_botrightsummation: i32 = 2230;
pub const GDK_KEY_bott: i32 = 2550;
pub const GDK_KEY_botvertsummationconnector: i32 = 2228;
pub const GDK_KEY_braceleft: i32 = 123;
pub const GDK_KEY_braceright: i32 = 125;
pub const GDK_KEY_bracketleft: i32 = 91;
pub const GDK_KEY_bracketright: i32 = 93;
pub const GDK_KEY_braille_blank: i32 = 16787456;
pub const GDK_KEY_braille_dot_1: i32 = 65521;
pub const GDK_KEY_braille_dot_10: i32 = 65530;
pub const GDK_KEY_braille_dot_2: i32 = 65522;
pub const GDK_KEY_braille_dot_3: i32 = 65523;
pub const GDK_KEY_braille_dot_4: i32 = 65524;
pub const GDK_KEY_braille_dot_5: i32 = 65525;
pub const GDK_KEY_braille_dot_6: i32 = 65526;
pub const GDK_KEY_braille_dot_7: i32 = 65527;
pub const GDK_KEY_braille_dot_8: i32 = 65528;
pub const GDK_KEY_braille_dot_9: i32 = 65529;
pub const GDK_KEY_braille_dots_1: i32 = 16787457;
pub const GDK_KEY_braille_dots_12: i32 = 16787459;
pub const GDK_KEY_braille_dots_123: i32 = 16787463;
pub const GDK_KEY_braille_dots_1234: i32 = 16787471;
pub const GDK_KEY_braille_dots_12345: i32 = 16787487;
pub const GDK_KEY_braille_dots_123456: i32 = 16787519;
pub const GDK_KEY_braille_dots_1234567: i32 = 16787583;
pub const GDK_KEY_braille_dots_12345678: i32 = 16787711;
pub const GDK_KEY_braille_dots_1234568: i32 = 16787647;
pub const GDK_KEY_braille_dots_123457: i32 = 16787551;
pub const GDK_KEY_braille_dots_1234578: i32 = 16787679;
pub const GDK_KEY_braille_dots_123458: i32 = 16787615;
pub const GDK_KEY_braille_dots_12346: i32 = 16787503;
pub const GDK_KEY_braille_dots_123467: i32 = 16787567;
pub const GDK_KEY_braille_dots_1234678: i32 = 16787695;
pub const GDK_KEY_braille_dots_123468: i32 = 16787631;
pub const GDK_KEY_braille_dots_12347: i32 = 16787535;
pub const GDK_KEY_braille_dots_123478: i32 = 16787663;
pub const GDK_KEY_braille_dots_12348: i32 = 16787599;
pub const GDK_KEY_braille_dots_1235: i32 = 16787479;
pub const GDK_KEY_braille_dots_12356: i32 = 16787511;
pub const GDK_KEY_braille_dots_123567: i32 = 16787575;
pub const GDK_KEY_braille_dots_1235678: i32 = 16787703;
pub const GDK_KEY_braille_dots_123568: i32 = 16787639;
pub const GDK_KEY_braille_dots_12357: i32 = 16787543;
pub const GDK_KEY_braille_dots_123578: i32 = 16787671;
pub const GDK_KEY_braille_dots_12358: i32 = 16787607;
pub const GDK_KEY_braille_dots_1236: i32 = 16787495;
pub const GDK_KEY_braille_dots_12367: i32 = 16787559;
pub const GDK_KEY_braille_dots_123678: i32 = 16787687;
pub const GDK_KEY_braille_dots_12368: i32 = 16787623;
pub const GDK_KEY_braille_dots_1237: i32 = 16787527;
pub const GDK_KEY_braille_dots_12378: i32 = 16787655;
pub const GDK_KEY_braille_dots_1238: i32 = 16787591;
pub const GDK_KEY_braille_dots_124: i32 = 16787467;
pub const GDK_KEY_braille_dots_1245: i32 = 16787483;
pub const GDK_KEY_braille_dots_12456: i32 = 16787515;
pub const GDK_KEY_braille_dots_124567: i32 = 16787579;
pub const GDK_KEY_braille_dots_1245678: i32 = 16787707;
pub const GDK_KEY_braille_dots_124568: i32 = 16787643;
pub const GDK_KEY_braille_dots_12457: i32 = 16787547;
pub const GDK_KEY_braille_dots_124578: i32 = 16787675;
pub const GDK_KEY_braille_dots_12458: i32 = 16787611;
pub const GDK_KEY_braille_dots_1246: i32 = 16787499;
pub const GDK_KEY_braille_dots_12467: i32 = 16787563;
pub const GDK_KEY_braille_dots_124678: i32 = 16787691;
pub const GDK_KEY_braille_dots_12468: i32 = 16787627;
pub const GDK_KEY_braille_dots_1247: i32 = 16787531;
pub const GDK_KEY_braille_dots_12478: i32 = 16787659;
pub const GDK_KEY_braille_dots_1248: i32 = 16787595;
pub const GDK_KEY_braille_dots_125: i32 = 16787475;
pub const GDK_KEY_braille_dots_1256: i32 = 16787507;
pub const GDK_KEY_braille_dots_12567: i32 = 16787571;
pub const GDK_KEY_braille_dots_125678: i32 = 16787699;
pub const GDK_KEY_braille_dots_12568: i32 = 16787635;
pub const GDK_KEY_braille_dots_1257: i32 = 16787539;
pub const GDK_KEY_braille_dots_12578: i32 = 16787667;
pub const GDK_KEY_braille_dots_1258: i32 = 16787603;
pub const GDK_KEY_braille_dots_126: i32 = 16787491;
pub const GDK_KEY_braille_dots_1267: i32 = 16787555;
pub const GDK_KEY_braille_dots_12678: i32 = 16787683;
pub const GDK_KEY_braille_dots_1268: i32 = 16787619;
pub const GDK_KEY_braille_dots_127: i32 = 16787523;
pub const GDK_KEY_braille_dots_1278: i32 = 16787651;
pub const GDK_KEY_braille_dots_128: i32 = 16787587;
pub const GDK_KEY_braille_dots_13: i32 = 16787461;
pub const GDK_KEY_braille_dots_134: i32 = 16787469;
pub const GDK_KEY_braille_dots_1345: i32 = 16787485;
pub const GDK_KEY_braille_dots_13456: i32 = 16787517;
pub const GDK_KEY_braille_dots_134567: i32 = 16787581;
pub const GDK_KEY_braille_dots_1345678: i32 = 16787709;
pub const GDK_KEY_braille_dots_134568: i32 = 16787645;
pub const GDK_KEY_braille_dots_13457: i32 = 16787549;
pub const GDK_KEY_braille_dots_134578: i32 = 16787677;
pub const GDK_KEY_braille_dots_13458: i32 = 16787613;
pub const GDK_KEY_braille_dots_1346: i32 = 16787501;
pub const GDK_KEY_braille_dots_13467: i32 = 16787565;
pub const GDK_KEY_braille_dots_134678: i32 = 16787693;
pub const GDK_KEY_braille_dots_13468: i32 = 16787629;
pub const GDK_KEY_braille_dots_1347: i32 = 16787533;
pub const GDK_KEY_braille_dots_13478: i32 = 16787661;
pub const GDK_KEY_braille_dots_1348: i32 = 16787597;
pub const GDK_KEY_braille_dots_135: i32 = 16787477;
pub const GDK_KEY_braille_dots_1356: i32 = 16787509;
pub const GDK_KEY_braille_dots_13567: i32 = 16787573;
pub const GDK_KEY_braille_dots_135678: i32 = 16787701;
pub const GDK_KEY_braille_dots_13568: i32 = 16787637;
pub const GDK_KEY_braille_dots_1357: i32 = 16787541;
pub const GDK_KEY_braille_dots_13578: i32 = 16787669;
pub const GDK_KEY_braille_dots_1358: i32 = 16787605;
pub const GDK_KEY_braille_dots_136: i32 = 16787493;
pub const GDK_KEY_braille_dots_1367: i32 = 16787557;
pub const GDK_KEY_braille_dots_13678: i32 = 16787685;
pub const GDK_KEY_braille_dots_1368: i32 = 16787621;
pub const GDK_KEY_braille_dots_137: i32 = 16787525;
pub const GDK_KEY_braille_dots_1378: i32 = 16787653;
pub const GDK_KEY_braille_dots_138: i32 = 16787589;
pub const GDK_KEY_braille_dots_14: i32 = 16787465;
pub const GDK_KEY_braille_dots_145: i32 = 16787481;
pub const GDK_KEY_braille_dots_1456: i32 = 16787513;
pub const GDK_KEY_braille_dots_14567: i32 = 16787577;
pub const GDK_KEY_braille_dots_145678: i32 = 16787705;
pub const GDK_KEY_braille_dots_14568: i32 = 16787641;
pub const GDK_KEY_braille_dots_1457: i32 = 16787545;
pub const GDK_KEY_braille_dots_14578: i32 = 16787673;
pub const GDK_KEY_braille_dots_1458: i32 = 16787609;
pub const GDK_KEY_braille_dots_146: i32 = 16787497;
pub const GDK_KEY_braille_dots_1467: i32 = 16787561;
pub const GDK_KEY_braille_dots_14678: i32 = 16787689;
pub const GDK_KEY_braille_dots_1468: i32 = 16787625;
pub const GDK_KEY_braille_dots_147: i32 = 16787529;
pub const GDK_KEY_braille_dots_1478: i32 = 16787657;
pub const GDK_KEY_braille_dots_148: i32 = 16787593;
pub const GDK_KEY_braille_dots_15: i32 = 16787473;
pub const GDK_KEY_braille_dots_156: i32 = 16787505;
pub const GDK_KEY_braille_dots_1567: i32 = 16787569;
pub const GDK_KEY_braille_dots_15678: i32 = 16787697;
pub const GDK_KEY_braille_dots_1568: i32 = 16787633;
pub const GDK_KEY_braille_dots_157: i32 = 16787537;
pub const GDK_KEY_braille_dots_1578: i32 = 16787665;
pub const GDK_KEY_braille_dots_158: i32 = 16787601;
pub const GDK_KEY_braille_dots_16: i32 = 16787489;
pub const GDK_KEY_braille_dots_167: i32 = 16787553;
pub const GDK_KEY_braille_dots_1678: i32 = 16787681;
pub const GDK_KEY_braille_dots_168: i32 = 16787617;
pub const GDK_KEY_braille_dots_17: i32 = 16787521;
pub const GDK_KEY_braille_dots_178: i32 = 16787649;
pub const GDK_KEY_braille_dots_18: i32 = 16787585;
pub const GDK_KEY_braille_dots_2: i32 = 16787458;
pub const GDK_KEY_braille_dots_23: i32 = 16787462;
pub const GDK_KEY_braille_dots_234: i32 = 16787470;
pub const GDK_KEY_braille_dots_2345: i32 = 16787486;
pub const GDK_KEY_braille_dots_23456: i32 = 16787518;
pub const GDK_KEY_braille_dots_234567: i32 = 16787582;
pub const GDK_KEY_braille_dots_2345678: i32 = 16787710;
pub const GDK_KEY_braille_dots_234568: i32 = 16787646;
pub const GDK_KEY_braille_dots_23457: i32 = 16787550;
pub const GDK_KEY_braille_dots_234578: i32 = 16787678;
pub const GDK_KEY_braille_dots_23458: i32 = 16787614;
pub const GDK_KEY_braille_dots_2346: i32 = 16787502;
pub const GDK_KEY_braille_dots_23467: i32 = 16787566;
pub const GDK_KEY_braille_dots_234678: i32 = 16787694;
pub const GDK_KEY_braille_dots_23468: i32 = 16787630;
pub const GDK_KEY_braille_dots_2347: i32 = 16787534;
pub const GDK_KEY_braille_dots_23478: i32 = 16787662;
pub const GDK_KEY_braille_dots_2348: i32 = 16787598;
pub const GDK_KEY_braille_dots_235: i32 = 16787478;
pub const GDK_KEY_braille_dots_2356: i32 = 16787510;
pub const GDK_KEY_braille_dots_23567: i32 = 16787574;
pub const GDK_KEY_braille_dots_235678: i32 = 16787702;
pub const GDK_KEY_braille_dots_23568: i32 = 16787638;
pub const GDK_KEY_braille_dots_2357: i32 = 16787542;
pub const GDK_KEY_braille_dots_23578: i32 = 16787670;
pub const GDK_KEY_braille_dots_2358: i32 = 16787606;
pub const GDK_KEY_braille_dots_236: i32 = 16787494;
pub const GDK_KEY_braille_dots_2367: i32 = 16787558;
pub const GDK_KEY_braille_dots_23678: i32 = 16787686;
pub const GDK_KEY_braille_dots_2368: i32 = 16787622;
pub const GDK_KEY_braille_dots_237: i32 = 16787526;
pub const GDK_KEY_braille_dots_2378: i32 = 16787654;
pub const GDK_KEY_braille_dots_238: i32 = 16787590;
pub const GDK_KEY_braille_dots_24: i32 = 16787466;
pub const GDK_KEY_braille_dots_245: i32 = 16787482;
pub const GDK_KEY_braille_dots_2456: i32 = 16787514;
pub const GDK_KEY_braille_dots_24567: i32 = 16787578;
pub const GDK_KEY_braille_dots_245678: i32 = 16787706;
pub const GDK_KEY_braille_dots_24568: i32 = 16787642;
pub const GDK_KEY_braille_dots_2457: i32 = 16787546;
pub const GDK_KEY_braille_dots_24578: i32 = 16787674;
pub const GDK_KEY_braille_dots_2458: i32 = 16787610;
pub const GDK_KEY_braille_dots_246: i32 = 16787498;
pub const GDK_KEY_braille_dots_2467: i32 = 16787562;
pub const GDK_KEY_braille_dots_24678: i32 = 16787690;
pub const GDK_KEY_braille_dots_2468: i32 = 16787626;
pub const GDK_KEY_braille_dots_247: i32 = 16787530;
pub const GDK_KEY_braille_dots_2478: i32 = 16787658;
pub const GDK_KEY_braille_dots_248: i32 = 16787594;
pub const GDK_KEY_braille_dots_25: i32 = 16787474;
pub const GDK_KEY_braille_dots_256: i32 = 16787506;
pub const GDK_KEY_braille_dots_2567: i32 = 16787570;
pub const GDK_KEY_braille_dots_25678: i32 = 16787698;
pub const GDK_KEY_braille_dots_2568: i32 = 16787634;
pub const GDK_KEY_braille_dots_257: i32 = 16787538;
pub const GDK_KEY_braille_dots_2578: i32 = 16787666;
pub const GDK_KEY_braille_dots_258: i32 = 16787602;
pub const GDK_KEY_braille_dots_26: i32 = 16787490;
pub const GDK_KEY_braille_dots_267: i32 = 16787554;
pub const GDK_KEY_braille_dots_2678: i32 = 16787682;
pub const GDK_KEY_braille_dots_268: i32 = 16787618;
pub const GDK_KEY_braille_dots_27: i32 = 16787522;
pub const GDK_KEY_braille_dots_278: i32 = 16787650;
pub const GDK_KEY_braille_dots_28: i32 = 16787586;
pub const GDK_KEY_braille_dots_3: i32 = 16787460;
pub const GDK_KEY_braille_dots_34: i32 = 16787468;
pub const GDK_KEY_braille_dots_345: i32 = 16787484;
pub const GDK_KEY_braille_dots_3456: i32 = 16787516;
pub const GDK_KEY_braille_dots_34567: i32 = 16787580;
pub const GDK_KEY_braille_dots_345678: i32 = 16787708;
pub const GDK_KEY_braille_dots_34568: i32 = 16787644;
pub const GDK_KEY_braille_dots_3457: i32 = 16787548;
pub const GDK_KEY_braille_dots_34578: i32 = 16787676;
pub const GDK_KEY_braille_dots_3458: i32 = 16787612;
pub const GDK_KEY_braille_dots_346: i32 = 16787500;
pub const GDK_KEY_braille_dots_3467: i32 = 16787564;
pub const GDK_KEY_braille_dots_34678: i32 = 16787692;
pub const GDK_KEY_braille_dots_3468: i32 = 16787628;
pub const GDK_KEY_braille_dots_347: i32 = 16787532;
pub const GDK_KEY_braille_dots_3478: i32 = 16787660;
pub const GDK_KEY_braille_dots_348: i32 = 16787596;
pub const GDK_KEY_braille_dots_35: i32 = 16787476;
pub const GDK_KEY_braille_dots_356: i32 = 16787508;
pub const GDK_KEY_braille_dots_3567: i32 = 16787572;
pub const GDK_KEY_braille_dots_35678: i32 = 16787700;
pub const GDK_KEY_braille_dots_3568: i32 = 16787636;
pub const GDK_KEY_braille_dots_357: i32 = 16787540;
pub const GDK_KEY_braille_dots_3578: i32 = 16787668;
pub const GDK_KEY_braille_dots_358: i32 = 16787604;
pub const GDK_KEY_braille_dots_36: i32 = 16787492;
pub const GDK_KEY_braille_dots_367: i32 = 16787556;
pub const GDK_KEY_braille_dots_3678: i32 = 16787684;
pub const GDK_KEY_braille_dots_368: i32 = 16787620;
pub const GDK_KEY_braille_dots_37: i32 = 16787524;
pub const GDK_KEY_braille_dots_378: i32 = 16787652;
pub const GDK_KEY_braille_dots_38: i32 = 16787588;
pub const GDK_KEY_braille_dots_4: i32 = 16787464;
pub const GDK_KEY_braille_dots_45: i32 = 16787480;
pub const GDK_KEY_braille_dots_456: i32 = 16787512;
pub const GDK_KEY_braille_dots_4567: i32 = 16787576;
pub const GDK_KEY_braille_dots_45678: i32 = 16787704;
pub const GDK_KEY_braille_dots_4568: i32 = 16787640;
pub const GDK_KEY_braille_dots_457: i32 = 16787544;
pub const GDK_KEY_braille_dots_4578: i32 = 16787672;
pub const GDK_KEY_braille_dots_458: i32 = 16787608;
pub const GDK_KEY_braille_dots_46: i32 = 16787496;
pub const GDK_KEY_braille_dots_467: i32 = 16787560;
pub const GDK_KEY_braille_dots_4678: i32 = 16787688;
pub const GDK_KEY_braille_dots_468: i32 = 16787624;
pub const GDK_KEY_braille_dots_47: i32 = 16787528;
pub const GDK_KEY_braille_dots_478: i32 = 16787656;
pub const GDK_KEY_braille_dots_48: i32 = 16787592;
pub const GDK_KEY_braille_dots_5: i32 = 16787472;
pub const GDK_KEY_braille_dots_56: i32 = 16787504;
pub const GDK_KEY_braille_dots_567: i32 = 16787568;
pub const GDK_KEY_braille_dots_5678: i32 = 16787696;
pub const GDK_KEY_braille_dots_568: i32 = 16787632;
pub const GDK_KEY_braille_dots_57: i32 = 16787536;
pub const GDK_KEY_braille_dots_578: i32 = 16787664;
pub const GDK_KEY_braille_dots_58: i32 = 16787600;
pub const GDK_KEY_braille_dots_6: i32 = 16787488;
pub const GDK_KEY_braille_dots_67: i32 = 16787552;
pub const GDK_KEY_braille_dots_678: i32 = 16787680;
pub const GDK_KEY_braille_dots_68: i32 = 16787616;
pub const GDK_KEY_braille_dots_7: i32 = 16787520;
pub const GDK_KEY_braille_dots_78: i32 = 16787648;
pub const GDK_KEY_braille_dots_8: i32 = 16787584;
pub const GDK_KEY_breve: i32 = 418;
pub const GDK_KEY_brokenbar: i32 = 166;
pub const GDK_KEY_c: i32 = 99;
pub const GDK_KEY_c_h: i32 = 65187;
pub const GDK_KEY_cabovedot: i32 = 741;
pub const GDK_KEY_cacute: i32 = 486;
pub const GDK_KEY_careof: i32 = 2744;
pub const GDK_KEY_caret: i32 = 2812;
pub const GDK_KEY_caron: i32 = 439;
pub const GDK_KEY_ccaron: i32 = 488;
pub const GDK_KEY_ccedilla: i32 = 231;
pub const GDK_KEY_ccircumflex: i32 = 742;
pub const GDK_KEY_cedilla: i32 = 184;
pub const GDK_KEY_cent: i32 = 162;
pub const GDK_KEY_ch: i32 = 65184;
pub const GDK_KEY_checkerboard: i32 = 2529;
pub const GDK_KEY_checkmark: i32 = 2803;
pub const GDK_KEY_circle: i32 = 3023;
pub const GDK_KEY_club: i32 = 2796;
pub const GDK_KEY_colon: i32 = 58;
pub const GDK_KEY_comma: i32 = 44;
pub const GDK_KEY_containsas: i32 = 16785931;
pub const GDK_KEY_copyright: i32 = 169;
pub const GDK_KEY_cr: i32 = 2532;
pub const GDK_KEY_crossinglines: i32 = 2542;
pub const GDK_KEY_cuberoot: i32 = 16785947;
pub const GDK_KEY_currency: i32 = 164;
pub const GDK_KEY_cursor: i32 = 2815;
pub const GDK_KEY_d: i32 = 100;
pub const GDK_KEY_dabovedot: i32 = 16784907;
pub const GDK_KEY_dagger: i32 = 2801;
pub const GDK_KEY_dcaron: i32 = 495;
pub const GDK_KEY_dead_A: i32 = 65153;
pub const GDK_KEY_dead_E: i32 = 65155;
pub const GDK_KEY_dead_I: i32 = 65157;
pub const GDK_KEY_dead_O: i32 = 65159;
pub const GDK_KEY_dead_U: i32 = 65161;
pub const GDK_KEY_dead_a: i32 = 65152;
pub const GDK_KEY_dead_abovecomma: i32 = 65124;
pub const GDK_KEY_dead_abovedot: i32 = 65110;
pub const GDK_KEY_dead_abovereversedcomma: i32 = 65125;
pub const GDK_KEY_dead_abovering: i32 = 65112;
pub const GDK_KEY_dead_acute: i32 = 65105;
pub const GDK_KEY_dead_belowbreve: i32 = 65131;
pub const GDK_KEY_dead_belowcircumflex: i32 = 65129;
pub const GDK_KEY_dead_belowcomma: i32 = 65134;
pub const GDK_KEY_dead_belowdiaeresis: i32 = 65132;
pub const GDK_KEY_dead_belowdot: i32 = 65120;
pub const GDK_KEY_dead_belowmacron: i32 = 65128;
pub const GDK_KEY_dead_belowring: i32 = 65127;
pub const GDK_KEY_dead_belowtilde: i32 = 65130;
pub const GDK_KEY_dead_breve: i32 = 65109;
pub const GDK_KEY_dead_capital_schwa: i32 = 65163;
pub const GDK_KEY_dead_caron: i32 = 65114;
pub const GDK_KEY_dead_cedilla: i32 = 65115;
pub const GDK_KEY_dead_circumflex: i32 = 65106;
pub const GDK_KEY_dead_currency: i32 = 65135;
pub const GDK_KEY_dead_dasia: i32 = 65125;
pub const GDK_KEY_dead_diaeresis: i32 = 65111;
pub const GDK_KEY_dead_doubleacute: i32 = 65113;
pub const GDK_KEY_dead_doublegrave: i32 = 65126;
pub const GDK_KEY_dead_e: i32 = 65154;
pub const GDK_KEY_dead_grave: i32 = 65104;
pub const GDK_KEY_dead_greek: i32 = 65164;
pub const GDK_KEY_dead_hook: i32 = 65121;
pub const GDK_KEY_dead_horn: i32 = 65122;
pub const GDK_KEY_dead_i: i32 = 65156;
pub const GDK_KEY_dead_invertedbreve: i32 = 65133;
pub const GDK_KEY_dead_iota: i32 = 65117;
pub const GDK_KEY_dead_macron: i32 = 65108;
pub const GDK_KEY_dead_o: i32 = 65158;
pub const GDK_KEY_dead_ogonek: i32 = 65116;
pub const GDK_KEY_dead_perispomeni: i32 = 65107;
pub const GDK_KEY_dead_psili: i32 = 65124;
pub const GDK_KEY_dead_semivoiced_sound: i32 = 65119;
pub const GDK_KEY_dead_small_schwa: i32 = 65162;
pub const GDK_KEY_dead_stroke: i32 = 65123;
pub const GDK_KEY_dead_tilde: i32 = 65107;
pub const GDK_KEY_dead_u: i32 = 65160;
pub const GDK_KEY_dead_voiced_sound: i32 = 65118;
pub const GDK_KEY_decimalpoint: i32 = 2749;
pub const GDK_KEY_degree: i32 = 176;
pub const GDK_KEY_diaeresis: i32 = 168;
pub const GDK_KEY_diamond: i32 = 2797;
pub const GDK_KEY_digitspace: i32 = 2725;
pub const GDK_KEY_dintegral: i32 = 16785964;
pub const GDK_KEY_division: i32 = 247;
pub const GDK_KEY_dollar: i32 = 36;
pub const GDK_KEY_doubbaselinedot: i32 = 2735;
pub const GDK_KEY_doubleacute: i32 = 445;
pub const GDK_KEY_doubledagger: i32 = 2802;
pub const GDK_KEY_doublelowquotemark: i32 = 2814;
pub const GDK_KEY_downarrow: i32 = 2302;
pub const GDK_KEY_downcaret: i32 = 2984;
pub const GDK_KEY_downshoe: i32 = 3030;
pub const GDK_KEY_downstile: i32 = 3012;
pub const GDK_KEY_downtack: i32 = 3010;
pub const GDK_KEY_dstroke: i32 = 496;
pub const GDK_KEY_e: i32 = 101;
pub const GDK_KEY_eabovedot: i32 = 1004;
pub const GDK_KEY_eacute: i32 = 233;
pub const GDK_KEY_ebelowdot: i32 = 16785081;
pub const GDK_KEY_ecaron: i32 = 492;
pub const GDK_KEY_ecircumflex: i32 = 234;
pub const GDK_KEY_ecircumflexacute: i32 = 16785087;
pub const GDK_KEY_ecircumflexbelowdot: i32 = 16785095;
pub const GDK_KEY_ecircumflexgrave: i32 = 16785089;
pub const GDK_KEY_ecircumflexhook: i32 = 16785091;
pub const GDK_KEY_ecircumflextilde: i32 = 16785093;
pub const GDK_KEY_ediaeresis: i32 = 235;
pub const GDK_KEY_egrave: i32 = 232;
pub const GDK_KEY_ehook: i32 = 16785083;
pub const GDK_KEY_eightsubscript: i32 = 16785544;
pub const GDK_KEY_eightsuperior: i32 = 16785528;
pub const GDK_KEY_elementof: i32 = 16785928;
pub const GDK_KEY_ellipsis: i32 = 2734;
pub const GDK_KEY_em3space: i32 = 2723;
pub const GDK_KEY_em4space: i32 = 2724;
pub const GDK_KEY_emacron: i32 = 954;
pub const GDK_KEY_emdash: i32 = 2729;
pub const GDK_KEY_emfilledcircle: i32 = 2782;
pub const GDK_KEY_emfilledrect: i32 = 2783;
pub const GDK_KEY_emopencircle: i32 = 2766;
pub const GDK_KEY_emopenrectangle: i32 = 2767;
pub const GDK_KEY_emptyset: i32 = 16785925;
pub const GDK_KEY_emspace: i32 = 2721;
pub const GDK_KEY_endash: i32 = 2730;
pub const GDK_KEY_enfilledcircbullet: i32 = 2790;
pub const GDK_KEY_enfilledsqbullet: i32 = 2791;
pub const GDK_KEY_eng: i32 = 959;
pub const GDK_KEY_enopencircbullet: i32 = 2784;
pub const GDK_KEY_enopensquarebullet: i32 = 2785;
pub const GDK_KEY_enspace: i32 = 2722;
pub const GDK_KEY_eogonek: i32 = 490;
pub const GDK_KEY_equal: i32 = 61;
pub const GDK_KEY_eth: i32 = 240;
pub const GDK_KEY_etilde: i32 = 16785085;
pub const GDK_KEY_exclam: i32 = 33;
pub const GDK_KEY_exclamdown: i32 = 161;
pub const GDK_KEY_ezh: i32 = 16777874;
pub const GDK_KEY_f: i32 = 102;
pub const GDK_KEY_fabovedot: i32 = 16784927;
pub const GDK_KEY_femalesymbol: i32 = 2808;
pub const GDK_KEY_ff: i32 = 2531;
pub const GDK_KEY_figdash: i32 = 2747;
pub const GDK_KEY_filledlefttribullet: i32 = 2780;
pub const GDK_KEY_filledrectbullet: i32 = 2779;
pub const GDK_KEY_filledrighttribullet: i32 = 2781;
pub const GDK_KEY_filledtribulletdown: i32 = 2793;
pub const GDK_KEY_filledtribulletup: i32 = 2792;
pub const GDK_KEY_fiveeighths: i32 = 2757;
pub const GDK_KEY_fivesixths: i32 = 2743;
pub const GDK_KEY_fivesubscript: i32 = 16785541;
pub const GDK_KEY_fivesuperior: i32 = 16785525;
pub const GDK_KEY_fourfifths: i32 = 2741;
pub const GDK_KEY_foursubscript: i32 = 16785540;
pub const GDK_KEY_foursuperior: i32 = 16785524;
pub const GDK_KEY_fourthroot: i32 = 16785948;
pub const GDK_KEY_function: i32 = 2294;
pub const GDK_KEY_g: i32 = 103;
pub const GDK_KEY_gabovedot: i32 = 757;
pub const GDK_KEY_gbreve: i32 = 699;
pub const GDK_KEY_gcaron: i32 = 16777703;
pub const GDK_KEY_gcedilla: i32 = 955;
pub const GDK_KEY_gcircumflex: i32 = 760;
pub const GDK_KEY_grave: i32 = 96;
pub const GDK_KEY_greater: i32 = 62;
pub const GDK_KEY_greaterthanequal: i32 = 2238;
pub const GDK_KEY_guillemotleft: i32 = 171;
pub const GDK_KEY_guillemotright: i32 = 187;
pub const GDK_KEY_h: i32 = 104;
pub const GDK_KEY_hairspace: i32 = 2728;
pub const GDK_KEY_hcircumflex: i32 = 694;
pub const GDK_KEY_heart: i32 = 2798;
pub const GDK_KEY_hebrew_aleph: i32 = 3296;
pub const GDK_KEY_hebrew_ayin: i32 = 3314;
pub const GDK_KEY_hebrew_bet: i32 = 3297;
pub const GDK_KEY_hebrew_beth: i32 = 3297;
pub const GDK_KEY_hebrew_chet: i32 = 3303;
pub const GDK_KEY_hebrew_dalet: i32 = 3299;
pub const GDK_KEY_hebrew_daleth: i32 = 3299;
pub const GDK_KEY_hebrew_doublelowline: i32 = 3295;
pub const GDK_KEY_hebrew_finalkaph: i32 = 3306;
pub const GDK_KEY_hebrew_finalmem: i32 = 3309;
pub const GDK_KEY_hebrew_finalnun: i32 = 3311;
pub const GDK_KEY_hebrew_finalpe: i32 = 3315;
pub const GDK_KEY_hebrew_finalzade: i32 = 3317;
pub const GDK_KEY_hebrew_finalzadi: i32 = 3317;
pub const GDK_KEY_hebrew_gimel: i32 = 3298;
pub const GDK_KEY_hebrew_gimmel: i32 = 3298;
pub const GDK_KEY_hebrew_he: i32 = 3300;
pub const GDK_KEY_hebrew_het: i32 = 3303;
pub const GDK_KEY_hebrew_kaph: i32 = 3307;
pub const GDK_KEY_hebrew_kuf: i32 = 3319;
pub const GDK_KEY_hebrew_lamed: i32 = 3308;
pub const GDK_KEY_hebrew_mem: i32 = 3310;
pub const GDK_KEY_hebrew_nun: i32 = 3312;
pub const GDK_KEY_hebrew_pe: i32 = 3316;
pub const GDK_KEY_hebrew_qoph: i32 = 3319;
pub const GDK_KEY_hebrew_resh: i32 = 3320;
pub const GDK_KEY_hebrew_samech: i32 = 3313;
pub const GDK_KEY_hebrew_samekh: i32 = 3313;
pub const GDK_KEY_hebrew_shin: i32 = 3321;
pub const GDK_KEY_hebrew_taf: i32 = 3322;
pub const GDK_KEY_hebrew_taw: i32 = 3322;
pub const GDK_KEY_hebrew_tet: i32 = 3304;
pub const GDK_KEY_hebrew_teth: i32 = 3304;
pub const GDK_KEY_hebrew_waw: i32 = 3301;
pub const GDK_KEY_hebrew_yod: i32 = 3305;
pub const GDK_KEY_hebrew_zade: i32 = 3318;
pub const GDK_KEY_hebrew_zadi: i32 = 3318;
pub const GDK_KEY_hebrew_zain: i32 = 3302;
pub const GDK_KEY_hebrew_zayin: i32 = 3302;
pub const GDK_KEY_hexagram: i32 = 2778;
pub const GDK_KEY_horizconnector: i32 = 2211;
pub const GDK_KEY_horizlinescan1: i32 = 2543;
pub const GDK_KEY_horizlinescan3: i32 = 2544;
pub const GDK_KEY_horizlinescan5: i32 = 2545;
pub const GDK_KEY_horizlinescan7: i32 = 2546;
pub const GDK_KEY_horizlinescan9: i32 = 2547;
pub const GDK_KEY_hstroke: i32 = 689;
pub const GDK_KEY_ht: i32 = 2530;
pub const GDK_KEY_hyphen: i32 = 173;
pub const GDK_KEY_i: i32 = 105;
pub const GDK_KEY_iTouch: i32 = 269025120;
pub const GDK_KEY_iacute: i32 = 237;
pub const GDK_KEY_ibelowdot: i32 = 16785099;
pub const GDK_KEY_ibreve: i32 = 16777517;
pub const GDK_KEY_icircumflex: i32 = 238;
pub const GDK_KEY_identical: i32 = 2255;
pub const GDK_KEY_idiaeresis: i32 = 239;
pub const GDK_KEY_idotless: i32 = 697;
pub const GDK_KEY_ifonlyif: i32 = 2253;
pub const GDK_KEY_igrave: i32 = 236;
pub const GDK_KEY_ihook: i32 = 16785097;
pub const GDK_KEY_imacron: i32 = 1007;
pub const GDK_KEY_implies: i32 = 2254;
pub const GDK_KEY_includedin: i32 = 2266;
pub const GDK_KEY_includes: i32 = 2267;
pub const GDK_KEY_infinity: i32 = 2242;
pub const GDK_KEY_integral: i32 = 2239;
pub const GDK_KEY_intersection: i32 = 2268;
pub const GDK_KEY_iogonek: i32 = 999;
pub const GDK_KEY_itilde: i32 = 949;
pub const GDK_KEY_j: i32 = 106;
pub const GDK_KEY_jcircumflex: i32 = 700;
pub const GDK_KEY_jot: i32 = 3018;
pub const GDK_KEY_k: i32 = 107;
pub const GDK_KEY_kana_A: i32 = 1201;
pub const GDK_KEY_kana_CHI: i32 = 1217;
pub const GDK_KEY_kana_E: i32 = 1204;
pub const GDK_KEY_kana_FU: i32 = 1228;
pub const GDK_KEY_kana_HA: i32 = 1226;
pub const GDK_KEY_kana_HE: i32 = 1229;
pub const GDK_KEY_kana_HI: i32 = 1227;
pub const GDK_KEY_kana_HO: i32 = 1230;
pub const GDK_KEY_kana_HU: i32 = 1228;
pub const GDK_KEY_kana_I: i32 = 1202;
pub const GDK_KEY_kana_KA: i32 = 1206;
pub const GDK_KEY_kana_KE: i32 = 1209;
pub const GDK_KEY_kana_KI: i32 = 1207;
pub const GDK_KEY_kana_KO: i32 = 1210;
pub const GDK_KEY_kana_KU: i32 = 1208;
pub const GDK_KEY_kana_MA: i32 = 1231;
pub const GDK_KEY_kana_ME: i32 = 1234;
pub const GDK_KEY_kana_MI: i32 = 1232;
pub const GDK_KEY_kana_MO: i32 = 1235;
pub const GDK_KEY_kana_MU: i32 = 1233;
pub const GDK_KEY_kana_N: i32 = 1245;
pub const GDK_KEY_kana_NA: i32 = 1221;
pub const GDK_KEY_kana_NE: i32 = 1224;
pub const GDK_KEY_kana_NI: i32 = 1222;
pub const GDK_KEY_kana_NO: i32 = 1225;
pub const GDK_KEY_kana_NU: i32 = 1223;
pub const GDK_KEY_kana_O: i32 = 1205;
pub const GDK_KEY_kana_RA: i32 = 1239;
pub const GDK_KEY_kana_RE: i32 = 1242;
pub const GDK_KEY_kana_RI: i32 = 1240;
pub const GDK_KEY_kana_RO: i32 = 1243;
pub const GDK_KEY_kana_RU: i32 = 1241;
pub const GDK_KEY_kana_SA: i32 = 1211;
pub const GDK_KEY_kana_SE: i32 = 1214;
pub const GDK_KEY_kana_SHI: i32 = 1212;
pub const GDK_KEY_kana_SO: i32 = 1215;
pub const GDK_KEY_kana_SU: i32 = 1213;
pub const GDK_KEY_kana_TA: i32 = 1216;
pub const GDK_KEY_kana_TE: i32 = 1219;
pub const GDK_KEY_kana_TI: i32 = 1217;
pub const GDK_KEY_kana_TO: i32 = 1220;
pub const GDK_KEY_kana_TSU: i32 = 1218;
pub const GDK_KEY_kana_TU: i32 = 1218;
pub const GDK_KEY_kana_U: i32 = 1203;
pub const GDK_KEY_kana_WA: i32 = 1244;
pub const GDK_KEY_kana_WO: i32 = 1190;
pub const GDK_KEY_kana_YA: i32 = 1236;
pub const GDK_KEY_kana_YO: i32 = 1238;
pub const GDK_KEY_kana_YU: i32 = 1237;
pub const GDK_KEY_kana_a: i32 = 1191;
pub const GDK_KEY_kana_closingbracket: i32 = 1187;
pub const GDK_KEY_kana_comma: i32 = 1188;
pub const GDK_KEY_kana_conjunctive: i32 = 1189;
pub const GDK_KEY_kana_e: i32 = 1194;
pub const GDK_KEY_kana_fullstop: i32 = 1185;
pub const GDK_KEY_kana_i: i32 = 1192;
pub const GDK_KEY_kana_middledot: i32 = 1189;
pub const GDK_KEY_kana_o: i32 = 1195;
pub const GDK_KEY_kana_openingbracket: i32 = 1186;
pub const GDK_KEY_kana_switch: i32 = 65406;
pub const GDK_KEY_kana_tsu: i32 = 1199;
pub const GDK_KEY_kana_tu: i32 = 1199;
pub const GDK_KEY_kana_u: i32 = 1193;
pub const GDK_KEY_kana_ya: i32 = 1196;
pub const GDK_KEY_kana_yo: i32 = 1198;
pub const GDK_KEY_kana_yu: i32 = 1197;
pub const GDK_KEY_kappa: i32 = 930;
pub const GDK_KEY_kcedilla: i32 = 1011;
pub const GDK_KEY_kra: i32 = 930;
pub const GDK_KEY_l: i32 = 108;
pub const GDK_KEY_lacute: i32 = 485;
pub const GDK_KEY_latincross: i32 = 2777;
pub const GDK_KEY_lbelowdot: i32 = 16784951;
pub const GDK_KEY_lcaron: i32 = 437;
pub const GDK_KEY_lcedilla: i32 = 950;
pub const GDK_KEY_leftanglebracket: i32 = 2748;
pub const GDK_KEY_leftarrow: i32 = 2299;
pub const GDK_KEY_leftcaret: i32 = 2979;
pub const GDK_KEY_leftdoublequotemark: i32 = 2770;
pub const GDK_KEY_leftmiddlecurlybrace: i32 = 2223;
pub const GDK_KEY_leftopentriangle: i32 = 2764;
pub const GDK_KEY_leftpointer: i32 = 2794;
pub const GDK_KEY_leftradical: i32 = 2209;
pub const GDK_KEY_leftshoe: i32 = 3034;
pub const GDK_KEY_leftsinglequotemark: i32 = 2768;
pub const GDK_KEY_leftt: i32 = 2548;
pub const GDK_KEY_lefttack: i32 = 3036;
pub const GDK_KEY_less: i32 = 60;
pub const GDK_KEY_lessthanequal: i32 = 2236;
pub const GDK_KEY_lf: i32 = 2533;
pub const GDK_KEY_logicaland: i32 = 2270;
pub const GDK_KEY_logicalor: i32 = 2271;
pub const GDK_KEY_lowleftcorner: i32 = 2541;
pub const GDK_KEY_lowrightcorner: i32 = 2538;
pub const GDK_KEY_lstroke: i32 = 435;
pub const GDK_KEY_m: i32 = 109;
pub const GDK_KEY_mabovedot: i32 = 16784961;
pub const GDK_KEY_macron: i32 = 175;
pub const GDK_KEY_malesymbol: i32 = 2807;
pub const GDK_KEY_maltesecross: i32 = 2800;
pub const GDK_KEY_marker: i32 = 2751;
pub const GDK_KEY_masculine: i32 = 186;
pub const GDK_KEY_minus: i32 = 45;
pub const GDK_KEY_minutes: i32 = 2774;
pub const GDK_KEY_mu: i32 = 181;
pub const GDK_KEY_multiply: i32 = 215;
pub const GDK_KEY_musicalflat: i32 = 2806;
pub const GDK_KEY_musicalsharp: i32 = 2805;
pub const GDK_KEY_n: i32 = 110;
pub const GDK_KEY_nabla: i32 = 2245;
pub const GDK_KEY_nacute: i32 = 497;
pub const GDK_KEY_ncaron: i32 = 498;
pub const GDK_KEY_ncedilla: i32 = 1009;
pub const GDK_KEY_ninesubscript: i32 = 16785545;
pub const GDK_KEY_ninesuperior: i32 = 16785529;
pub const GDK_KEY_nl: i32 = 2536;
pub const GDK_KEY_nobreakspace: i32 = 160;
pub const GDK_KEY_notapproxeq: i32 = 16785991;
pub const GDK_KEY_notelementof: i32 = 16785929;
pub const GDK_KEY_notequal: i32 = 2237;
pub const GDK_KEY_notidentical: i32 = 16786018;
pub const GDK_KEY_notsign: i32 = 172;
pub const GDK_KEY_ntilde: i32 = 241;
pub const GDK_KEY_numbersign: i32 = 35;
pub const GDK_KEY_numerosign: i32 = 1712;
pub const GDK_KEY_o: i32 = 111;
pub const GDK_KEY_oacute: i32 = 243;
pub const GDK_KEY_obarred: i32 = 16777845;
pub const GDK_KEY_obelowdot: i32 = 16785101;
pub const GDK_KEY_ocaron: i32 = 16777682;
pub const GDK_KEY_ocircumflex: i32 = 244;
pub const GDK_KEY_ocircumflexacute: i32 = 16785105;
pub const GDK_KEY_ocircumflexbelowdot: i32 = 16785113;
pub const GDK_KEY_ocircumflexgrave: i32 = 16785107;
pub const GDK_KEY_ocircumflexhook: i32 = 16785109;
pub const GDK_KEY_ocircumflextilde: i32 = 16785111;
pub const GDK_KEY_odiaeresis: i32 = 246;
pub const GDK_KEY_odoubleacute: i32 = 501;
pub const GDK_KEY_oe: i32 = 5053;
pub const GDK_KEY_ogonek: i32 = 434;
pub const GDK_KEY_ograve: i32 = 242;
pub const GDK_KEY_ohook: i32 = 16785103;
pub const GDK_KEY_ohorn: i32 = 16777633;
pub const GDK_KEY_ohornacute: i32 = 16785115;
pub const GDK_KEY_ohornbelowdot: i32 = 16785123;
pub const GDK_KEY_ohorngrave: i32 = 16785117;
pub const GDK_KEY_ohornhook: i32 = 16785119;
pub const GDK_KEY_ohorntilde: i32 = 16785121;
pub const GDK_KEY_omacron: i32 = 1010;
pub const GDK_KEY_oneeighth: i32 = 2755;
pub const GDK_KEY_onefifth: i32 = 2738;
pub const GDK_KEY_onehalf: i32 = 189;
pub const GDK_KEY_onequarter: i32 = 188;
pub const GDK_KEY_onesixth: i32 = 2742;
pub const GDK_KEY_onesubscript: i32 = 16785537;
pub const GDK_KEY_onesuperior: i32 = 185;
pub const GDK_KEY_onethird: i32 = 2736;
pub const GDK_KEY_ooblique: i32 = 248;
pub const GDK_KEY_openrectbullet: i32 = 2786;
pub const GDK_KEY_openstar: i32 = 2789;
pub const GDK_KEY_opentribulletdown: i32 = 2788;
pub const GDK_KEY_opentribulletup: i32 = 2787;
pub const GDK_KEY_ordfeminine: i32 = 170;
pub const GDK_KEY_oslash: i32 = 248;
pub const GDK_KEY_otilde: i32 = 245;
pub const GDK_KEY_overbar: i32 = 3008;
pub const GDK_KEY_overline: i32 = 1150;
pub const GDK_KEY_p: i32 = 112;
pub const GDK_KEY_pabovedot: i32 = 16784983;
pub const GDK_KEY_paragraph: i32 = 182;
pub const GDK_KEY_parenleft: i32 = 40;
pub const GDK_KEY_parenright: i32 = 41;
pub const GDK_KEY_partdifferential: i32 = 16785922;
pub const GDK_KEY_partialderivative: i32 = 2287;
pub const GDK_KEY_percent: i32 = 37;
pub const GDK_KEY_period: i32 = 46;
pub const GDK_KEY_periodcentered: i32 = 183;
pub const GDK_KEY_permille: i32 = 2773;
pub const GDK_KEY_phonographcopyright: i32 = 2811;
pub const GDK_KEY_plus: i32 = 43;
pub const GDK_KEY_plusminus: i32 = 177;
pub const GDK_KEY_prescription: i32 = 2772;
pub const GDK_KEY_prolongedsound: i32 = 1200;
pub const GDK_KEY_punctspace: i32 = 2726;
pub const GDK_KEY_q: i32 = 113;
pub const GDK_KEY_quad: i32 = 3020;
pub const GDK_KEY_question: i32 = 63;
pub const GDK_KEY_questiondown: i32 = 191;
pub const GDK_KEY_quotedbl: i32 = 34;
pub const GDK_KEY_quoteleft: i32 = 96;
pub const GDK_KEY_quoteright: i32 = 39;
pub const GDK_KEY_r: i32 = 114;
pub const GDK_KEY_racute: i32 = 480;
pub const GDK_KEY_radical: i32 = 2262;
pub const GDK_KEY_rcaron: i32 = 504;
pub const GDK_KEY_rcedilla: i32 = 947;
pub const GDK_KEY_registered: i32 = 174;
pub const GDK_KEY_rightanglebracket: i32 = 2750;
pub const GDK_KEY_rightarrow: i32 = 2301;
pub const GDK_KEY_rightcaret: i32 = 2982;
pub const GDK_KEY_rightdoublequotemark: i32 = 2771;
pub const GDK_KEY_rightmiddlecurlybrace: i32 = 2224;
pub const GDK_KEY_rightmiddlesummation: i32 = 2231;
pub const GDK_KEY_rightopentriangle: i32 = 2765;
pub const GDK_KEY_rightpointer: i32 = 2795;
pub const GDK_KEY_rightshoe: i32 = 3032;
pub const GDK_KEY_rightsinglequotemark: i32 = 2769;
pub const GDK_KEY_rightt: i32 = 2549;
pub const GDK_KEY_righttack: i32 = 3068;
pub const GDK_KEY_s: i32 = 115;
pub const GDK_KEY_sabovedot: i32 = 16784993;
pub const GDK_KEY_sacute: i32 = 438;
pub const GDK_KEY_scaron: i32 = 441;
pub const GDK_KEY_scedilla: i32 = 442;
pub const GDK_KEY_schwa: i32 = 16777817;
pub const GDK_KEY_scircumflex: i32 = 766;
pub const GDK_KEY_script_switch: i32 = 65406;
pub const GDK_KEY_seconds: i32 = 2775;
pub const GDK_KEY_section: i32 = 167;
pub const GDK_KEY_semicolon: i32 = 59;
pub const GDK_KEY_semivoicedsound: i32 = 1247;
pub const GDK_KEY_seveneighths: i32 = 2758;
pub const GDK_KEY_sevensubscript: i32 = 16785543;
pub const GDK_KEY_sevensuperior: i32 = 16785527;
pub const GDK_KEY_signaturemark: i32 = 2762;
pub const GDK_KEY_signifblank: i32 = 2732;
pub const GDK_KEY_similarequal: i32 = 2249;
pub const GDK_KEY_singlelowquotemark: i32 = 2813;
pub const GDK_KEY_sixsubscript: i32 = 16785542;
pub const GDK_KEY_sixsuperior: i32 = 16785526;
pub const GDK_KEY_slash: i32 = 47;
pub const GDK_KEY_soliddiamond: i32 = 2528;
pub const GDK_KEY_space: i32 = 32;
pub const GDK_KEY_squareroot: i32 = 16785946;
pub const GDK_KEY_ssharp: i32 = 223;
pub const GDK_KEY_sterling: i32 = 163;
pub const GDK_KEY_stricteq: i32 = 16786019;
pub const GDK_KEY_t: i32 = 116;
pub const GDK_KEY_tabovedot: i32 = 16785003;
pub const GDK_KEY_tcaron: i32 = 443;
pub const GDK_KEY_tcedilla: i32 = 510;
pub const GDK_KEY_telephone: i32 = 2809;
pub const GDK_KEY_telephonerecorder: i32 = 2810;
pub const GDK_KEY_therefore: i32 = 2240;
pub const GDK_KEY_thinspace: i32 = 2727;
pub const GDK_KEY_thorn: i32 = 254;
pub const GDK_KEY_threeeighths: i32 = 2756;
pub const GDK_KEY_threefifths: i32 = 2740;
pub const GDK_KEY_threequarters: i32 = 190;
pub const GDK_KEY_threesubscript: i32 = 16785539;
pub const GDK_KEY_threesuperior: i32 = 179;
pub const GDK_KEY_tintegral: i32 = 16785965;
pub const GDK_KEY_topintegral: i32 = 2212;
pub const GDK_KEY_topleftparens: i32 = 2219;
pub const GDK_KEY_topleftradical: i32 = 2210;
pub const GDK_KEY_topleftsqbracket: i32 = 2215;
pub const GDK_KEY_topleftsummation: i32 = 2225;
pub const GDK_KEY_toprightparens: i32 = 2221;
pub const GDK_KEY_toprightsqbracket: i32 = 2217;
pub const GDK_KEY_toprightsummation: i32 = 2229;
pub const GDK_KEY_topt: i32 = 2551;
pub const GDK_KEY_topvertsummationconnector: i32 = 2227;
pub const GDK_KEY_trademark: i32 = 2761;
pub const GDK_KEY_trademarkincircle: i32 = 2763;
pub const GDK_KEY_tslash: i32 = 956;
pub const GDK_KEY_twofifths: i32 = 2739;
pub const GDK_KEY_twosubscript: i32 = 16785538;
pub const GDK_KEY_twosuperior: i32 = 178;
pub const GDK_KEY_twothirds: i32 = 2737;
pub const GDK_KEY_u: i32 = 117;
pub const GDK_KEY_uacute: i32 = 250;
pub const GDK_KEY_ubelowdot: i32 = 16785125;
pub const GDK_KEY_ubreve: i32 = 765;
pub const GDK_KEY_ucircumflex: i32 = 251;
pub const GDK_KEY_udiaeresis: i32 = 252;
pub const GDK_KEY_udoubleacute: i32 = 507;
pub const GDK_KEY_ugrave: i32 = 249;
pub const GDK_KEY_uhook: i32 = 16785127;
pub const GDK_KEY_uhorn: i32 = 16777648;
pub const GDK_KEY_uhornacute: i32 = 16785129;
pub const GDK_KEY_uhornbelowdot: i32 = 16785137;
pub const GDK_KEY_uhorngrave: i32 = 16785131;
pub const GDK_KEY_uhornhook: i32 = 16785133;
pub const GDK_KEY_uhorntilde: i32 = 16785135;
pub const GDK_KEY_umacron: i32 = 1022;
pub const GDK_KEY_underbar: i32 = 3014;
pub const GDK_KEY_underscore: i32 = 95;
pub const GDK_KEY_union: i32 = 2269;
pub const GDK_KEY_uogonek: i32 = 1017;
pub const GDK_KEY_uparrow: i32 = 2300;
pub const GDK_KEY_upcaret: i32 = 2985;
pub const GDK_KEY_upleftcorner: i32 = 2540;
pub const GDK_KEY_uprightcorner: i32 = 2539;
pub const GDK_KEY_upshoe: i32 = 3011;
pub const GDK_KEY_upstile: i32 = 3027;
pub const GDK_KEY_uptack: i32 = 3022;
pub const GDK_KEY_uring: i32 = 505;
pub const GDK_KEY_utilde: i32 = 1021;
pub const GDK_KEY_v: i32 = 118;
pub const GDK_KEY_variation: i32 = 2241;
pub const GDK_KEY_vertbar: i32 = 2552;
pub const GDK_KEY_vertconnector: i32 = 2214;
pub const GDK_KEY_voicedsound: i32 = 1246;
pub const GDK_KEY_vt: i32 = 2537;
pub const GDK_KEY_w: i32 = 119;
pub const GDK_KEY_wacute: i32 = 16785027;
pub const GDK_KEY_wcircumflex: i32 = 16777589;
pub const GDK_KEY_wdiaeresis: i32 = 16785029;
pub const GDK_KEY_wgrave: i32 = 16785025;
pub const GDK_KEY_x: i32 = 120;
pub const GDK_KEY_xabovedot: i32 = 16785035;
pub const GDK_KEY_y: i32 = 121;
pub const GDK_KEY_yacute: i32 = 253;
pub const GDK_KEY_ybelowdot: i32 = 16785141;
pub const GDK_KEY_ycircumflex: i32 = 16777591;
pub const GDK_KEY_ydiaeresis: i32 = 255;
pub const GDK_KEY_yen: i32 = 165;
pub const GDK_KEY_ygrave: i32 = 16785139;
pub const GDK_KEY_yhook: i32 = 16785143;
pub const GDK_KEY_ytilde: i32 = 16785145;
pub const GDK_KEY_z: i32 = 122;
pub const GDK_KEY_zabovedot: i32 = 447;
pub const GDK_KEY_zacute: i32 = 444;
pub const GDK_KEY_zcaron: i32 = 446;
pub const GDK_KEY_zerosubscript: i32 = 16785536;
pub const GDK_KEY_zerosuperior: i32 = 16785520;
pub const GDK_KEY_zstroke: i32 = 16777654;
pub const GDK_MAX_TIMECOORD_AXES: i32 = 128;
pub const GDK_PARENT_RELATIVE: i32 = 1;
pub const GDK_PRIORITY_REDRAW: i32 = 20;

bitflags! {
    #[repr(C)]
    pub flags GdkAnchorHints: c_uint {
        const GDK_ANCHOR_FLIP_X = 1,
        const GDK_ANCHOR_FLIP_Y = 2,
        const GDK_ANCHOR_SLIDE_X = 4,
        const GDK_ANCHOR_SLIDE_Y = 8,
        const GDK_ANCHOR_RESIZE_X = 16,
        const GDK_ANCHOR_RESIZE_Y = 32,
        const GDK_ANCHOR_FLIP = 3,
        const GDK_ANCHOR_SLIDE = 12,
        const GDK_ANCHOR_RESIZE = 48,
    }
}

bitflags! {
    #[repr(C)]
    pub flags GdkAxisFlags: c_uint {
        const GDK_AXIS_FLAG_X = 2,
        const GDK_AXIS_FLAG_Y = 4,
        const GDK_AXIS_FLAG_PRESSURE = 8,
        const GDK_AXIS_FLAG_XTILT = 16,
        const GDK_AXIS_FLAG_YTILT = 32,
        const GDK_AXIS_FLAG_WHEEL = 64,
        const GDK_AXIS_FLAG_DISTANCE = 128,
        const GDK_AXIS_FLAG_ROTATION = 256,
        const GDK_AXIS_FLAG_SLIDER = 512,
    }
}

bitflags! {
    #[repr(C)]
    pub flags GdkDragAction: c_uint {
        const GDK_ACTION_DEFAULT = 1,
        const GDK_ACTION_COPY = 2,
        const GDK_ACTION_MOVE = 4,
        const GDK_ACTION_LINK = 8,
        const GDK_ACTION_PRIVATE = 16,
        const GDK_ACTION_ASK = 32,
    }
}

bitflags! {
    #[repr(C)]
    pub flags GdkEventMask: c_uint {
        const GDK_EXPOSURE_MASK = 2,
        const GDK_POINTER_MOTION_MASK = 4,
        const GDK_POINTER_MOTION_HINT_MASK = 8,
        const GDK_BUTTON_MOTION_MASK = 16,
        const GDK_BUTTON1_MOTION_MASK = 32,
        const GDK_BUTTON2_MOTION_MASK = 64,
        const GDK_BUTTON3_MOTION_MASK = 128,
        const GDK_BUTTON_PRESS_MASK = 256,
        const GDK_BUTTON_RELEASE_MASK = 512,
        const GDK_KEY_PRESS_MASK = 1024,
        const GDK_KEY_RELEASE_MASK = 2048,
        const GDK_ENTER_NOTIFY_MASK = 4096,
        const GDK_LEAVE_NOTIFY_MASK = 8192,
        const GDK_FOCUS_CHANGE_MASK = 16384,
        const GDK_STRUCTURE_MASK = 32768,
        const GDK_PROPERTY_CHANGE_MASK = 65536,
        const GDK_VISIBILITY_NOTIFY_MASK = 131072,
        const GDK_PROXIMITY_IN_MASK = 262144,
        const GDK_PROXIMITY_OUT_MASK = 524288,
        const GDK_SUBSTRUCTURE_MASK = 1048576,
        const GDK_SCROLL_MASK = 2097152,
        const GDK_TOUCH_MASK = 4194304,
        const GDK_SMOOTH_SCROLL_MASK = 8388608,
        const GDK_TOUCHPAD_GESTURE_MASK = 16777216,
        const GDK_TABLET_PAD_MASK = 33554432,
        const GDK_ALL_EVENTS_MASK = 16777214,
    }
}

bitflags! {
    #[repr(C)]
    pub flags GdkFrameClockPhase: c_uint {
        const GDK_FRAME_CLOCK_PHASE_NONE = 0,
        const GDK_FRAME_CLOCK_PHASE_FLUSH_EVENTS = 1,
        const GDK_FRAME_CLOCK_PHASE_BEFORE_PAINT = 2,
        const GDK_FRAME_CLOCK_PHASE_UPDATE = 4,
        const GDK_FRAME_CLOCK_PHASE_LAYOUT = 8,
        const GDK_FRAME_CLOCK_PHASE_PAINT = 16,
        const GDK_FRAME_CLOCK_PHASE_RESUME_EVENTS = 32,
        const GDK_FRAME_CLOCK_PHASE_AFTER_PAINT = 64,
    }
}

bitflags! {
    #[repr(C)]
    pub flags GdkModifierType: c_uint {
        const GDK_SHIFT_MASK = 1,
        const GDK_LOCK_MASK = 2,
        const GDK_CONTROL_MASK = 4,
        const GDK_MOD1_MASK = 8,
        const GDK_MOD2_MASK = 16,
        const GDK_MOD3_MASK = 32,
        const GDK_MOD4_MASK = 64,
        const GDK_MOD5_MASK = 128,
        const GDK_BUTTON1_MASK = 256,
        const GDK_BUTTON2_MASK = 512,
        const GDK_BUTTON3_MASK = 1024,
        const GDK_BUTTON4_MASK = 2048,
        const GDK_BUTTON5_MASK = 4096,
        const GDK_MODIFIER_RESERVED_13_MASK = 8192,
        const GDK_MODIFIER_RESERVED_14_MASK = 16384,
        const GDK_MODIFIER_RESERVED_15_MASK = 32768,
        const GDK_MODIFIER_RESERVED_16_MASK = 65536,
        const GDK_MODIFIER_RESERVED_17_MASK = 131072,
        const GDK_MODIFIER_RESERVED_18_MASK = 262144,
        const GDK_MODIFIER_RESERVED_19_MASK = 524288,
        const GDK_MODIFIER_RESERVED_20_MASK = 1048576,
        const GDK_MODIFIER_RESERVED_21_MASK = 2097152,
        const GDK_MODIFIER_RESERVED_22_MASK = 4194304,
        const GDK_MODIFIER_RESERVED_23_MASK = 8388608,
        const GDK_MODIFIER_RESERVED_24_MASK = 16777216,
        const GDK_MODIFIER_RESERVED_25_MASK = 33554432,
        const GDK_SUPER_MASK = 67108864,
        const GDK_HYPER_MASK = 134217728,
        const GDK_META_MASK = 268435456,
        const GDK_MODIFIER_RESERVED_29_MASK = 536870912,
        const GDK_RELEASE_MASK = 1073741824,
        const GDK_MODIFIER_MASK = 1543512063,
    }
}

bitflags! {
    #[repr(C)]
    pub flags GdkSeatCapabilities: c_uint {
        const GDK_SEAT_CAPABILITY_NONE = 0,
        const GDK_SEAT_CAPABILITY_POINTER = 1,
        const GDK_SEAT_CAPABILITY_TOUCH = 2,
        const GDK_SEAT_CAPABILITY_TABLET_STYLUS = 4,
        const GDK_SEAT_CAPABILITY_KEYBOARD = 8,
        const GDK_SEAT_CAPABILITY_ALL_POINTING = 7,
        const GDK_SEAT_CAPABILITY_ALL = 15,
    }
}

bitflags! {
    #[repr(C)]
    pub flags GdkWMDecoration: c_uint {
        const GDK_DECOR_ALL = 1,
        const GDK_DECOR_BORDER = 2,
        const GDK_DECOR_RESIZEH = 4,
        const GDK_DECOR_TITLE = 8,
        const GDK_DECOR_MENU = 16,
        const GDK_DECOR_MINIMIZE = 32,
        const GDK_DECOR_MAXIMIZE = 64,
    }
}

bitflags! {
    #[repr(C)]
    pub flags GdkWMFunction: c_uint {
        const GDK_FUNC_ALL = 1,
        const GDK_FUNC_RESIZE = 2,
        const GDK_FUNC_MOVE = 4,
        const GDK_FUNC_MINIMIZE = 8,
        const GDK_FUNC_MAXIMIZE = 16,
        const GDK_FUNC_CLOSE = 32,
    }
}

bitflags! {
    #[repr(C)]
    pub flags GdkWindowAttributesType: c_uint {
        const GDK_WA_TITLE = 2,
        const GDK_WA_X = 4,
        const GDK_WA_Y = 8,
        const GDK_WA_CURSOR = 16,
        const GDK_WA_VISUAL = 32,
        const GDK_WA_WMCLASS = 64,
        const GDK_WA_NOREDIR = 128,
        const GDK_WA_TYPE_HINT = 256,
    }
}

bitflags! {
    #[repr(C)]
    pub flags GdkWindowHints: c_uint {
        const GDK_HINT_POS = 1,
        const GDK_HINT_MIN_SIZE = 2,
        const GDK_HINT_MAX_SIZE = 4,
        const GDK_HINT_BASE_SIZE = 8,
        const GDK_HINT_ASPECT = 16,
        const GDK_HINT_RESIZE_INC = 32,
        const GDK_HINT_WIN_GRAVITY = 64,
        const GDK_HINT_USER_POS = 128,
        const GDK_HINT_USER_SIZE = 256,
    }
}

bitflags! {
    #[repr(C)]
    pub flags GdkWindowState: c_uint {
        const GDK_WINDOW_STATE_WITHDRAWN = 1,
        const GDK_WINDOW_STATE_ICONIFIED = 2,
        const GDK_WINDOW_STATE_MAXIMIZED = 4,
        const GDK_WINDOW_STATE_STICKY = 8,
        const GDK_WINDOW_STATE_FULLSCREEN = 16,
        const GDK_WINDOW_STATE_ABOVE = 32,
        const GDK_WINDOW_STATE_BELOW = 64,
        const GDK_WINDOW_STATE_FOCUSED = 128,
        const GDK_WINDOW_STATE_TILED = 256,
    }
}


pub type GdkEvent = c_void; // union

pub type GdkEventFunc = Option<unsafe extern "C" fn(*mut GdkEvent, gpointer)>;
pub type GdkFilterFunc = Option<unsafe extern "C" fn(*mut GdkXEvent, *mut GdkEvent, gpointer) -> GdkFilterReturn>;
pub type GdkSeatGrabPrepareFunc = Option<unsafe extern "C" fn(*mut GdkSeat, *mut GdkWindow, gpointer)>;
pub type GdkWindowChildFunc = Option<unsafe extern "C" fn(*mut GdkWindow, gpointer) -> gboolean>;
pub type GdkWindowInvalidateHandlerFunc = Option<unsafe extern "C" fn(*mut GdkWindow, *mut cairo::cairo_region_t)>;

#[repr(C)]
pub struct GdkAtom_(c_void);

#[repr(C)]
pub struct GdkColor {
    pub pixel: u32,
    pub red: u16,
    pub green: u16,
    pub blue: u16,
}

#[repr(C)]
pub struct GdkDevicePadInterface(c_void);

#[repr(C)]
pub struct GdkDrawingContextClass(c_void);

#[repr(C)]
pub struct GdkEventAny {
    pub type_: GdkEventType,
    pub window: *mut GdkWindow,
    pub send_event: i8,
}

#[repr(C)]
pub struct GdkEventButton {
    pub type_: GdkEventType,
    pub window: *mut GdkWindow,
    pub send_event: i8,
    pub time: u32,
    pub x: c_double,
    pub y: c_double,
    pub axes: *mut c_double,
    pub state: GdkModifierType,
    pub button: c_uint,
    pub device: *mut GdkDevice,
    pub x_root: c_double,
    pub y_root: c_double,
}

#[repr(C)]
pub struct GdkEventConfigure {
    pub type_: GdkEventType,
    pub window: *mut GdkWindow,
    pub send_event: i8,
    pub x: c_int,
    pub y: c_int,
    pub width: c_int,
    pub height: c_int,
}

#[repr(C)]
pub struct GdkEventCrossing {
    pub type_: GdkEventType,
    pub window: *mut GdkWindow,
    pub send_event: i8,
    pub subwindow: *mut GdkWindow,
    pub time: u32,
    pub x: c_double,
    pub y: c_double,
    pub x_root: c_double,
    pub y_root: c_double,
    pub mode: GdkCrossingMode,
    pub detail: GdkNotifyType,
    pub focus: gboolean,
    pub state: GdkModifierType,
}

#[repr(C)]
pub struct GdkEventDND {
    pub type_: GdkEventType,
    pub window: *mut GdkWindow,
    pub send_event: i8,
    pub context: *mut GdkDragContext,
    pub time: u32,
    pub x_root: c_short,
    pub y_root: c_short,
}

#[repr(C)]
pub struct GdkEventExpose {
    pub type_: GdkEventType,
    pub window: *mut GdkWindow,
    pub send_event: i8,
    pub area: GdkRectangle,
    pub region: *mut cairo::cairo_region_t,
    pub count: c_int,
}

#[repr(C)]
pub struct GdkEventFocus {
    pub type_: GdkEventType,
    pub window: *mut GdkWindow,
    pub send_event: i8,
    pub in_: i16,
}

#[repr(C)]
pub struct GdkEventGrabBroken {
    pub type_: GdkEventType,
    pub window: *mut GdkWindow,
    pub send_event: i8,
    pub keyboard: gboolean,
    pub implicit: gboolean,
    pub grab_window: *mut GdkWindow,
}

#[repr(C)]
pub struct GdkEventKey {
    pub type_: GdkEventType,
    pub window: *mut GdkWindow,
    pub send_event: i8,
    pub time: u32,
    pub state: GdkModifierType,
    pub keyval: c_uint,
    pub length: c_int,
    pub string: *mut c_char,
    pub hardware_keycode: u16,
    pub group: u8,
    _truncated_record_marker: c_void,
    //is_modifier: guint: 1,
}

#[repr(C)]
pub struct GdkEventMotion {
    pub type_: GdkEventType,
    pub window: *mut GdkWindow,
    pub send_event: i8,
    pub time: u32,
    pub x: c_double,
    pub y: c_double,
    pub axes: *mut c_double,
    pub state: GdkModifierType,
    pub is_hint: i16,
    pub device: *mut GdkDevice,
    pub x_root: c_double,
    pub y_root: c_double,
}

#[repr(C)]
pub struct GdkEventOwnerChange {
    pub type_: GdkEventType,
    pub window: *mut GdkWindow,
    pub send_event: i8,
    pub owner: *mut GdkWindow,
    pub reason: GdkOwnerChange,
    pub selection: GdkAtom,
    pub time: u32,
    pub selection_time: u32,
}

#[repr(C)]
pub struct GdkEventPadAxis {
    pub type_: GdkEventType,
    pub window: *mut GdkWindow,
    pub send_event: i8,
    pub time: u32,
    pub group: c_uint,
    pub index: c_uint,
    pub mode: c_uint,
    pub value: c_double,
}

#[repr(C)]
pub struct GdkEventPadButton {
    pub type_: GdkEventType,
    pub window: *mut GdkWindow,
    pub send_event: i8,
    pub time: u32,
    pub group: c_uint,
    pub button: c_uint,
    pub mode: c_uint,
}

#[repr(C)]
pub struct GdkEventPadGroupMode {
    pub type_: GdkEventType,
    pub window: *mut GdkWindow,
    pub send_event: i8,
    pub time: u32,
    pub group: c_uint,
    pub mode: c_uint,
}

#[repr(C)]
pub struct GdkEventProperty {
    pub type_: GdkEventType,
    pub window: *mut GdkWindow,
    pub send_event: i8,
    pub atom: GdkAtom,
    pub time: u32,
    pub state: GdkPropertyState,
}

#[repr(C)]
pub struct GdkEventProximity {
    pub type_: GdkEventType,
    pub window: *mut GdkWindow,
    pub send_event: i8,
    pub time: u32,
    pub device: *mut GdkDevice,
}

#[repr(C)]
pub struct GdkEventScroll {
    pub type_: GdkEventType,
    pub window: *mut GdkWindow,
    pub send_event: i8,
    pub time: u32,
    pub x: c_double,
    pub y: c_double,
    pub state: GdkModifierType,
    pub direction: GdkScrollDirection,
    pub device: *mut GdkDevice,
    pub x_root: c_double,
    pub y_root: c_double,
    pub delta_x: c_double,
    pub delta_y: c_double,
    _truncated_record_marker: c_void,
    //is_stop: guint: 1,
}

#[repr(C)]
pub struct GdkEventSelection {
    pub type_: GdkEventType,
    pub window: *mut GdkWindow,
    pub send_event: i8,
    pub selection: GdkAtom,
    pub target: GdkAtom,
    pub property: GdkAtom,
    pub time: u32,
    pub requestor: *mut GdkWindow,
}

#[repr(C)]
pub struct GdkEventSequence(c_void);

#[repr(C)]
pub struct GdkEventSetting {
    pub type_: GdkEventType,
    pub window: *mut GdkWindow,
    pub send_event: i8,
    pub action: GdkSettingAction,
    pub name: *mut c_char,
}

#[repr(C)]
pub struct GdkEventTouch {
    pub type_: GdkEventType,
    pub window: *mut GdkWindow,
    pub send_event: i8,
    pub time: u32,
    pub x: c_double,
    pub y: c_double,
    pub axes: *mut c_double,
    pub state: GdkModifierType,
    pub sequence: *mut GdkEventSequence,
    pub emulating_pointer: gboolean,
    pub device: *mut GdkDevice,
    pub x_root: c_double,
    pub y_root: c_double,
}

#[repr(C)]
pub struct GdkEventTouchpadPinch {
    pub type_: GdkEventType,
    pub window: *mut GdkWindow,
    pub send_event: i8,
    pub phase: GdkTouchpadGesturePhase,
    pub n_fingers: i8,
    pub time: u32,
    pub x: c_double,
    pub y: c_double,
    pub dx: c_double,
    pub dy: c_double,
    pub angle_delta: c_double,
    pub scale: c_double,
    pub x_root: c_double,
    pub y_root: c_double,
    pub state: GdkModifierType,
}

#[repr(C)]
pub struct GdkEventTouchpadSwipe {
    pub type_: GdkEventType,
    pub window: *mut GdkWindow,
    pub send_event: i8,
    pub phase: GdkTouchpadGesturePhase,
    pub n_fingers: i8,
    pub time: u32,
    pub x: c_double,
    pub y: c_double,
    pub dx: c_double,
    pub dy: c_double,
    pub x_root: c_double,
    pub y_root: c_double,
    pub state: GdkModifierType,
}

#[repr(C)]
pub struct GdkEventVisibility {
    pub type_: GdkEventType,
    pub window: *mut GdkWindow,
    pub send_event: i8,
    pub state: GdkVisibilityState,
}

#[repr(C)]
pub struct GdkEventWindowState {
    pub type_: GdkEventType,
    pub window: *mut GdkWindow,
    pub send_event: i8,
    pub changed_mask: GdkWindowState,
    pub new_window_state: GdkWindowState,
}

#[repr(C)]
pub struct GdkFrameClockClass(c_void);

#[repr(C)]
pub struct GdkFrameClockPrivate(c_void);

#[repr(C)]
pub struct GdkFrameTimings(c_void);

#[repr(C)]
pub struct GdkGeometry {
    pub min_width: c_int,
    pub min_height: c_int,
    pub max_width: c_int,
    pub max_height: c_int,
    pub base_width: c_int,
    pub base_height: c_int,
    pub width_inc: c_int,
    pub height_inc: c_int,
    pub min_aspect: c_double,
    pub max_aspect: c_double,
    pub win_gravity: GdkGravity,
}

#[repr(C)]
pub struct GdkKeymapKey {
    pub keycode: c_uint,
    pub group: c_int,
    pub level: c_int,
}

#[repr(C)]
pub struct GdkMonitorClass(c_void);

#[repr(C)]
pub struct GdkPoint {
    pub x: c_int,
    pub y: c_int,
}

#[repr(C)]
pub struct GdkRGBA {
    pub red: c_double,
    pub green: c_double,
    pub blue: c_double,
    pub alpha: c_double,
}

#[repr(C)]
pub struct GdkRectangle {
    pub x: c_int,
    pub y: c_int,
    pub width: c_int,
    pub height: c_int,
}

#[repr(C)]
pub struct GdkTimeCoord {
    pub time: u32,
    pub axes: [c_double; 128],
}

#[repr(C)]
pub struct GdkWindowAttr {
    pub title: *mut c_char,
    pub event_mask: c_int,
    pub x: c_int,
    pub y: c_int,
    pub width: c_int,
    pub height: c_int,
    pub wclass: GdkWindowWindowClass,
    pub visual: *mut GdkVisual,
    pub window_type: GdkWindowType,
    pub cursor: *mut GdkCursor,
    pub wmclass_name: *mut c_char,
    pub wmclass_class: *mut c_char,
    pub override_redirect: gboolean,
    pub type_hint: GdkWindowTypeHint,
}

#[repr(C)]
pub struct GdkWindowClass {
    pub parent_class: gobject::GObjectClass,
    pub pick_embedded_child: Option<unsafe extern "C" fn(*mut GdkWindow, c_double, c_double) -> *mut GdkWindow>,
    pub to_embedder: Option<unsafe extern "C" fn(*mut GdkWindow, c_double, c_double, *mut c_double, *mut c_double)>,
    pub from_embedder: Option<unsafe extern "C" fn(*mut GdkWindow, c_double, c_double, *mut c_double, *mut c_double)>,
    pub create_surface: Option<unsafe extern "C" fn(*mut GdkWindow, c_int, c_int) -> *mut cairo::cairo_surface_t>,
    pub _gdk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gdk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gdk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gdk_reserved4: Option<unsafe extern "C" fn()>,
    pub _gdk_reserved5: Option<unsafe extern "C" fn()>,
    pub _gdk_reserved6: Option<unsafe extern "C" fn()>,
    pub _gdk_reserved7: Option<unsafe extern "C" fn()>,
    pub _gdk_reserved8: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GdkWindowRedirect(c_void);


#[repr(C)]
pub struct GdkAppLaunchContext(c_void);
#[repr(C)]
pub struct GdkCursor(c_void);
#[repr(C)]
pub struct GdkDevice(c_void);
#[repr(C)]
pub struct GdkDeviceManager(c_void);
#[repr(C)]
pub struct GdkDeviceTool(c_void);
#[repr(C)]
pub struct GdkDisplay(c_void);
#[repr(C)]
pub struct GdkDisplayManager(c_void);
#[repr(C)]
pub struct GdkDragContext(c_void);
#[repr(C)]
pub struct GdkDrawingContext(c_void);
#[repr(C)]
pub struct GdkFrameClock(c_void);
#[repr(C)]
pub struct GdkGLContext(c_void);
#[repr(C)]
pub struct GdkKeymap(c_void);
#[repr(C)]
pub struct GdkMonitor(c_void);
#[repr(C)]
pub struct GdkScreen(c_void);
#[repr(C)]
pub struct GdkSeat(c_void);
#[repr(C)]
pub struct GdkVisual(c_void);
#[repr(C)]
pub struct GdkWindow(c_void);

#[repr(C)]
pub struct GdkDevicePad(c_void);

extern "C" {

    //=========================================================================
    // GdkGLError
    //=========================================================================
    pub fn gdk_gl_error_quark() -> glib::GQuark;

    //=========================================================================
    // GdkEvent
    //=========================================================================
    pub fn gdk_event_new(type_: GdkEventType) -> *mut GdkEvent;
    pub fn gdk_event_copy(event: *const GdkEvent) -> *mut GdkEvent;
    pub fn gdk_event_free(event: *mut GdkEvent);
    pub fn gdk_event_get_axis(event: *const GdkEvent, axis_use: GdkAxisUse, value: *mut c_double) -> gboolean;
    pub fn gdk_event_get_button(event: *const GdkEvent, button: *mut c_uint) -> gboolean;
    pub fn gdk_event_get_click_count(event: *const GdkEvent, click_count: *mut c_uint) -> gboolean;
    pub fn gdk_event_get_coords(event: *const GdkEvent, x_win: *mut c_double, y_win: *mut c_double) -> gboolean;
    pub fn gdk_event_get_device(event: *const GdkEvent) -> *mut GdkDevice;
    #[cfg(feature = "v3_22")]
    pub fn gdk_event_get_device_tool(event: *const GdkEvent) -> *mut GdkDeviceTool;
    pub fn gdk_event_get_event_sequence(event: *const GdkEvent) -> *mut GdkEventSequence;
    #[cfg(feature = "v3_10")]
    pub fn gdk_event_get_event_type(event: *const GdkEvent) -> GdkEventType;
    pub fn gdk_event_get_keycode(event: *const GdkEvent, keycode: *mut u16) -> gboolean;
    pub fn gdk_event_get_keyval(event: *const GdkEvent, keyval: *mut c_uint) -> gboolean;
    #[cfg(feature = "v3_22")]
    pub fn gdk_event_get_pointer_emulated(event: *mut GdkEvent) -> gboolean;
    pub fn gdk_event_get_root_coords(event: *const GdkEvent, x_root: *mut c_double, y_root: *mut c_double) -> gboolean;
    #[cfg(feature = "v3_22")]
    pub fn gdk_event_get_scancode(event: *mut GdkEvent) -> c_int;
    pub fn gdk_event_get_screen(event: *const GdkEvent) -> *mut GdkScreen;
    pub fn gdk_event_get_scroll_deltas(event: *const GdkEvent, delta_x: *mut c_double, delta_y: *mut c_double) -> gboolean;
    pub fn gdk_event_get_scroll_direction(event: *const GdkEvent, direction: *mut GdkScrollDirection) -> gboolean;
    #[cfg(feature = "v3_20")]
    pub fn gdk_event_get_seat(event: *const GdkEvent) -> *mut GdkSeat;
    pub fn gdk_event_get_source_device(event: *const GdkEvent) -> *mut GdkDevice;
    pub fn gdk_event_get_state(event: *const GdkEvent, state: *mut GdkModifierType) -> gboolean;
    pub fn gdk_event_get_time(event: *const GdkEvent) -> u32;
    #[cfg(feature = "v3_10")]
    pub fn gdk_event_get_window(event: *const GdkEvent) -> *mut GdkWindow;
    #[cfg(feature = "v3_20")]
    pub fn gdk_event_is_scroll_stop_event(event: *const GdkEvent) -> gboolean;
    pub fn gdk_event_put(event: *const GdkEvent);
    pub fn gdk_event_set_device(event: *mut GdkEvent, device: *mut GdkDevice);
    #[cfg(feature = "v3_22")]
    pub fn gdk_event_set_device_tool(event: *mut GdkEvent, tool: *mut GdkDeviceTool);
    pub fn gdk_event_set_screen(event: *mut GdkEvent, screen: *mut GdkScreen);
    pub fn gdk_event_set_source_device(event: *mut GdkEvent, device: *mut GdkDevice);
    pub fn gdk_event_triggers_context_menu(event: *const GdkEvent) -> gboolean;
    pub fn gdk_event_get() -> *mut GdkEvent;
    pub fn gdk_event_handler_set(func: GdkEventFunc, data: gpointer, notify: glib::GDestroyNotify);
    pub fn gdk_event_peek() -> *mut GdkEvent;
    pub fn gdk_event_request_motions(event: *const GdkEventMotion);

    //=========================================================================
    // GdkAtom_
    //=========================================================================
    pub fn gdk_atom_name(atom: GdkAtom) -> *mut c_char;
    pub fn gdk_atom_intern(atom_name: *const c_char, only_if_exists: gboolean) -> GdkAtom;
    pub fn gdk_atom_intern_static_string(atom_name: *const c_char) -> GdkAtom;

    //=========================================================================
    // GdkColor
    //=========================================================================
    pub fn gdk_color_get_type() -> GType;
    pub fn gdk_color_copy(color: *const GdkColor) -> *mut GdkColor;
    pub fn gdk_color_equal(colora: *const GdkColor, colorb: *const GdkColor) -> gboolean;
    pub fn gdk_color_free(color: *mut GdkColor);
    pub fn gdk_color_hash(color: *const GdkColor) -> c_uint;
    pub fn gdk_color_to_string(color: *const GdkColor) -> *mut c_char;
    pub fn gdk_color_parse(spec: *const c_char, color: *mut GdkColor) -> gboolean;

    //=========================================================================
    // GdkEventSequence
    //=========================================================================
    pub fn gdk_event_sequence_get_type() -> GType;

    //=========================================================================
    // GdkFrameTimings
    //=========================================================================
    pub fn gdk_frame_timings_get_type() -> GType;
    #[cfg(feature = "v3_8")]
    pub fn gdk_frame_timings_get_complete(timings: *mut GdkFrameTimings) -> gboolean;
    #[cfg(feature = "v3_8")]
    pub fn gdk_frame_timings_get_frame_counter(timings: *mut GdkFrameTimings) -> i64;
    pub fn gdk_frame_timings_get_frame_time(timings: *mut GdkFrameTimings) -> i64;
    #[cfg(feature = "v3_8")]
    pub fn gdk_frame_timings_get_predicted_presentation_time(timings: *mut GdkFrameTimings) -> i64;
    #[cfg(feature = "v3_8")]
    pub fn gdk_frame_timings_get_presentation_time(timings: *mut GdkFrameTimings) -> i64;
    #[cfg(feature = "v3_8")]
    pub fn gdk_frame_timings_get_refresh_interval(timings: *mut GdkFrameTimings) -> i64;
    #[cfg(feature = "v3_8")]
    pub fn gdk_frame_timings_ref(timings: *mut GdkFrameTimings) -> *mut GdkFrameTimings;
    #[cfg(feature = "v3_8")]
    pub fn gdk_frame_timings_unref(timings: *mut GdkFrameTimings);

    //=========================================================================
    // GdkRGBA
    //=========================================================================
    pub fn gdk_rgba_get_type() -> GType;
    pub fn gdk_rgba_copy(rgba: *const GdkRGBA) -> *mut GdkRGBA;
    pub fn gdk_rgba_equal(p1: gconstpointer, p2: gconstpointer) -> gboolean;
    pub fn gdk_rgba_free(rgba: *mut GdkRGBA);
    pub fn gdk_rgba_hash(p: gconstpointer) -> c_uint;
    pub fn gdk_rgba_parse(rgba: *mut GdkRGBA, spec: *const c_char) -> gboolean;
    pub fn gdk_rgba_to_string(rgba: *const GdkRGBA) -> *mut c_char;

    //=========================================================================
    // GdkRectangle
    //=========================================================================
    pub fn gdk_rectangle_get_type() -> GType;
    #[cfg(feature = "v3_20")]
    pub fn gdk_rectangle_equal(rect1: *const GdkRectangle, rect2: *const GdkRectangle) -> gboolean;
    pub fn gdk_rectangle_intersect(src1: *const GdkRectangle, src2: *const GdkRectangle, dest: *mut GdkRectangle) -> gboolean;
    pub fn gdk_rectangle_union(src1: *const GdkRectangle, src2: *const GdkRectangle, dest: *mut GdkRectangle);

    //=========================================================================
    // GdkAppLaunchContext
    //=========================================================================
    pub fn gdk_app_launch_context_get_type() -> GType;
    pub fn gdk_app_launch_context_new() -> *mut GdkAppLaunchContext;
    pub fn gdk_app_launch_context_set_desktop(context: *mut GdkAppLaunchContext, desktop: c_int);
    pub fn gdk_app_launch_context_set_display(context: *mut GdkAppLaunchContext, display: *mut GdkDisplay);
    pub fn gdk_app_launch_context_set_icon(context: *mut GdkAppLaunchContext, icon: *mut gio::GIcon);
    pub fn gdk_app_launch_context_set_icon_name(context: *mut GdkAppLaunchContext, icon_name: *const c_char);
    pub fn gdk_app_launch_context_set_screen(context: *mut GdkAppLaunchContext, screen: *mut GdkScreen);
    pub fn gdk_app_launch_context_set_timestamp(context: *mut GdkAppLaunchContext, timestamp: u32);

    //=========================================================================
    // GdkCursor
    //=========================================================================
    pub fn gdk_cursor_get_type() -> GType;
    pub fn gdk_cursor_new(cursor_type: GdkCursorType) -> *mut GdkCursor;
    pub fn gdk_cursor_new_for_display(display: *mut GdkDisplay, cursor_type: GdkCursorType) -> *mut GdkCursor;
    pub fn gdk_cursor_new_from_name(display: *mut GdkDisplay, name: *const c_char) -> *mut GdkCursor;
    pub fn gdk_cursor_new_from_pixbuf(display: *mut GdkDisplay, pixbuf: *mut gdk_pixbuf::GdkPixbuf, x: c_int, y: c_int) -> *mut GdkCursor;
    #[cfg(feature = "v3_10")]
    pub fn gdk_cursor_new_from_surface(display: *mut GdkDisplay, surface: *mut cairo::cairo_surface_t, x: c_double, y: c_double) -> *mut GdkCursor;
    pub fn gdk_cursor_get_cursor_type(cursor: *mut GdkCursor) -> GdkCursorType;
    pub fn gdk_cursor_get_display(cursor: *mut GdkCursor) -> *mut GdkDisplay;
    pub fn gdk_cursor_get_image(cursor: *mut GdkCursor) -> *mut gdk_pixbuf::GdkPixbuf;
    #[cfg(feature = "v3_10")]
    pub fn gdk_cursor_get_surface(cursor: *mut GdkCursor, x_hot: *mut c_double, y_hot: *mut c_double) -> *mut cairo::cairo_surface_t;
    pub fn gdk_cursor_ref(cursor: *mut GdkCursor) -> *mut GdkCursor;
    pub fn gdk_cursor_unref(cursor: *mut GdkCursor);

    //=========================================================================
    // GdkDevice
    //=========================================================================
    pub fn gdk_device_get_type() -> GType;
    pub fn gdk_device_free_history(events: *mut *mut GdkTimeCoord, n_events: c_int);
    pub fn gdk_device_grab_info_libgtk_only(display: *mut GdkDisplay, device: *mut GdkDevice, grab_window: *mut *mut GdkWindow, owner_events: *mut gboolean) -> gboolean;
    pub fn gdk_device_get_associated_device(device: *mut GdkDevice) -> *mut GdkDevice;
    #[cfg(feature = "v3_22")]
    pub fn gdk_device_get_axes(device: *mut GdkDevice) -> GdkAxisFlags;
    pub fn gdk_device_get_axis(device: *mut GdkDevice, axes: *mut c_double, use_: GdkAxisUse, value: *mut c_double) -> gboolean;
    pub fn gdk_device_get_axis_use(device: *mut GdkDevice, index_: c_uint) -> GdkAxisUse;
    pub fn gdk_device_get_axis_value(device: *mut GdkDevice, axes: *mut c_double, axis_label: GdkAtom, value: *mut c_double) -> gboolean;
    pub fn gdk_device_get_device_type(device: *mut GdkDevice) -> GdkDeviceType;
    pub fn gdk_device_get_display(device: *mut GdkDevice) -> *mut GdkDisplay;
    pub fn gdk_device_get_has_cursor(device: *mut GdkDevice) -> gboolean;
    pub fn gdk_device_get_history(device: *mut GdkDevice, window: *mut GdkWindow, start: u32, stop: u32, events: *mut *mut *mut GdkTimeCoord, n_events: *mut c_int) -> gboolean;
    pub fn gdk_device_get_key(device: *mut GdkDevice, index_: c_uint, keyval: *mut c_uint, modifiers: *mut GdkModifierType) -> gboolean;
    #[cfg(feature = "v3_12")]
    pub fn gdk_device_get_last_event_window(device: *mut GdkDevice) -> *mut GdkWindow;
    pub fn gdk_device_get_mode(device: *mut GdkDevice) -> GdkInputMode;
    pub fn gdk_device_get_n_axes(device: *mut GdkDevice) -> c_int;
    pub fn gdk_device_get_n_keys(device: *mut GdkDevice) -> c_int;
    pub fn gdk_device_get_name(device: *mut GdkDevice) -> *const c_char;
    pub fn gdk_device_get_position(device: *mut GdkDevice, screen: *mut *mut GdkScreen, x: *mut c_int, y: *mut c_int);
    #[cfg(feature = "v3_10")]
    pub fn gdk_device_get_position_double(device: *mut GdkDevice, screen: *mut *mut GdkScreen, x: *mut c_double, y: *mut c_double);
    #[cfg(feature = "v3_16")]
    pub fn gdk_device_get_product_id(device: *mut GdkDevice) -> *const c_char;
    #[cfg(feature = "v3_20")]
    pub fn gdk_device_get_seat(device: *mut GdkDevice) -> *mut GdkSeat;
    pub fn gdk_device_get_source(device: *mut GdkDevice) -> GdkInputSource;
    pub fn gdk_device_get_state(device: *mut GdkDevice, window: *mut GdkWindow, axes: *mut c_double, mask: *mut GdkModifierType);
    #[cfg(feature = "v3_16")]
    pub fn gdk_device_get_vendor_id(device: *mut GdkDevice) -> *const c_char;
    pub fn gdk_device_get_window_at_position(device: *mut GdkDevice, win_x: *mut c_int, win_y: *mut c_int) -> *mut GdkWindow;
    pub fn gdk_device_get_window_at_position_double(device: *mut GdkDevice, win_x: *mut c_double, win_y: *mut c_double) -> *mut GdkWindow;
    pub fn gdk_device_grab(device: *mut GdkDevice, window: *mut GdkWindow, grab_ownership: GdkGrabOwnership, owner_events: gboolean, event_mask: GdkEventMask, cursor: *mut GdkCursor, time_: u32) -> GdkGrabStatus;
    pub fn gdk_device_list_axes(device: *mut GdkDevice) -> *mut glib::GList;
    pub fn gdk_device_list_slave_devices(device: *mut GdkDevice) -> *mut glib::GList;
    pub fn gdk_device_set_axis_use(device: *mut GdkDevice, index_: c_uint, use_: GdkAxisUse);
    pub fn gdk_device_set_key(device: *mut GdkDevice, index_: c_uint, keyval: c_uint, modifiers: GdkModifierType);
    pub fn gdk_device_set_mode(device: *mut GdkDevice, mode: GdkInputMode) -> gboolean;
    pub fn gdk_device_ungrab(device: *mut GdkDevice, time_: u32);
    pub fn gdk_device_warp(device: *mut GdkDevice, screen: *mut GdkScreen, x: c_int, y: c_int);

    //=========================================================================
    // GdkDeviceManager
    //=========================================================================
    pub fn gdk_device_manager_get_type() -> GType;
    pub fn gdk_device_manager_get_client_pointer(device_manager: *mut GdkDeviceManager) -> *mut GdkDevice;
    pub fn gdk_device_manager_get_display(device_manager: *mut GdkDeviceManager) -> *mut GdkDisplay;
    pub fn gdk_device_manager_list_devices(device_manager: *mut GdkDeviceManager, type_: GdkDeviceType) -> *mut glib::GList;

    //=========================================================================
    // GdkDeviceTool
    //=========================================================================
    pub fn gdk_device_tool_get_type() -> GType;
    #[cfg(feature = "v3_22")]
    pub fn gdk_device_tool_get_hardware_id(tool: *mut GdkDeviceTool) -> u64;
    #[cfg(feature = "v3_22")]
    pub fn gdk_device_tool_get_serial(tool: *mut GdkDeviceTool) -> u64;
    #[cfg(feature = "v3_22")]
    pub fn gdk_device_tool_get_tool_type(tool: *mut GdkDeviceTool) -> GdkDeviceToolType;

    //=========================================================================
    // GdkDisplay
    //=========================================================================
    pub fn gdk_display_get_type() -> GType;
    pub fn gdk_display_get_default() -> *mut GdkDisplay;
    pub fn gdk_display_open(display_name: *const c_char) -> *mut GdkDisplay;
    pub fn gdk_display_open_default_libgtk_only() -> *mut GdkDisplay;
    pub fn gdk_display_beep(display: *mut GdkDisplay);
    pub fn gdk_display_close(display: *mut GdkDisplay);
    pub fn gdk_display_device_is_grabbed(display: *mut GdkDisplay, device: *mut GdkDevice) -> gboolean;
    pub fn gdk_display_flush(display: *mut GdkDisplay);
    pub fn gdk_display_get_app_launch_context(display: *mut GdkDisplay) -> *mut GdkAppLaunchContext;
    pub fn gdk_display_get_default_cursor_size(display: *mut GdkDisplay) -> c_uint;
    pub fn gdk_display_get_default_group(display: *mut GdkDisplay) -> *mut GdkWindow;
    pub fn gdk_display_get_default_screen(display: *mut GdkDisplay) -> *mut GdkScreen;
    #[cfg(feature = "v3_20")]
    pub fn gdk_display_get_default_seat(display: *mut GdkDisplay) -> *mut GdkSeat;
    pub fn gdk_display_get_device_manager(display: *mut GdkDisplay) -> *mut GdkDeviceManager;
    pub fn gdk_display_get_event(display: *mut GdkDisplay) -> *mut GdkEvent;
    pub fn gdk_display_get_maximal_cursor_size(display: *mut GdkDisplay, width: *mut c_uint, height: *mut c_uint);
    #[cfg(feature = "v3_22")]
    pub fn gdk_display_get_monitor(display: *mut GdkDisplay, monitor_num: c_int) -> *mut GdkMonitor;
    #[cfg(feature = "v3_22")]
    pub fn gdk_display_get_monitor_at_point(display: *mut GdkDisplay, x: c_int, y: c_int) -> *mut GdkMonitor;
    #[cfg(feature = "v3_22")]
    pub fn gdk_display_get_monitor_at_window(display: *mut GdkDisplay, window: *mut GdkWindow) -> *mut GdkMonitor;
    #[cfg(feature = "v3_22")]
    pub fn gdk_display_get_n_monitors(display: *mut GdkDisplay) -> c_int;
    pub fn gdk_display_get_n_screens(display: *mut GdkDisplay) -> c_int;
    pub fn gdk_display_get_name(display: *mut GdkDisplay) -> *const c_char;
    pub fn gdk_display_get_pointer(display: *mut GdkDisplay, screen: *mut *mut GdkScreen, x: *mut c_int, y: *mut c_int, mask: *mut GdkModifierType);
    #[cfg(feature = "v3_22")]
    pub fn gdk_display_get_primary_monitor(display: *mut GdkDisplay) -> *mut GdkMonitor;
    pub fn gdk_display_get_screen(display: *mut GdkDisplay, screen_num: c_int) -> *mut GdkScreen;
    pub fn gdk_display_get_window_at_pointer(display: *mut GdkDisplay, win_x: *mut c_int, win_y: *mut c_int) -> *mut GdkWindow;
    pub fn gdk_display_has_pending(display: *mut GdkDisplay) -> gboolean;
    pub fn gdk_display_is_closed(display: *mut GdkDisplay) -> gboolean;
    pub fn gdk_display_keyboard_ungrab(display: *mut GdkDisplay, time_: u32);
    pub fn gdk_display_list_devices(display: *mut GdkDisplay) -> *mut glib::GList;
    #[cfg(feature = "v3_20")]
    pub fn gdk_display_list_seats(display: *mut GdkDisplay) -> *mut glib::GList;
    pub fn gdk_display_notify_startup_complete(display: *mut GdkDisplay, startup_id: *const c_char);
    pub fn gdk_display_peek_event(display: *mut GdkDisplay) -> *mut GdkEvent;
    pub fn gdk_display_pointer_is_grabbed(display: *mut GdkDisplay) -> gboolean;
    pub fn gdk_display_pointer_ungrab(display: *mut GdkDisplay, time_: u32);
    pub fn gdk_display_put_event(display: *mut GdkDisplay, event: *const GdkEvent);
    pub fn gdk_display_request_selection_notification(display: *mut GdkDisplay, selection: GdkAtom) -> gboolean;
    pub fn gdk_display_set_double_click_distance(display: *mut GdkDisplay, distance: c_uint);
    pub fn gdk_display_set_double_click_time(display: *mut GdkDisplay, msec: c_uint);
    pub fn gdk_display_store_clipboard(display: *mut GdkDisplay, clipboard_window: *mut GdkWindow, time_: u32, targets: *mut GdkAtom, n_targets: c_int);
    pub fn gdk_display_supports_clipboard_persistence(display: *mut GdkDisplay) -> gboolean;
    pub fn gdk_display_supports_composite(display: *mut GdkDisplay) -> gboolean;
    pub fn gdk_display_supports_cursor_alpha(display: *mut GdkDisplay) -> gboolean;
    pub fn gdk_display_supports_cursor_color(display: *mut GdkDisplay) -> gboolean;
    pub fn gdk_display_supports_input_shapes(display: *mut GdkDisplay) -> gboolean;
    pub fn gdk_display_supports_selection_notification(display: *mut GdkDisplay) -> gboolean;
    pub fn gdk_display_supports_shapes(display: *mut GdkDisplay) -> gboolean;
    pub fn gdk_display_sync(display: *mut GdkDisplay);
    pub fn gdk_display_warp_pointer(display: *mut GdkDisplay, screen: *mut GdkScreen, x: c_int, y: c_int);

    //=========================================================================
    // GdkDisplayManager
    //=========================================================================
    pub fn gdk_display_manager_get_type() -> GType;
    pub fn gdk_display_manager_get() -> *mut GdkDisplayManager;
    pub fn gdk_display_manager_get_default_display(manager: *mut GdkDisplayManager) -> *mut GdkDisplay;
    pub fn gdk_display_manager_list_displays(manager: *mut GdkDisplayManager) -> *mut glib::GSList;
    pub fn gdk_display_manager_open_display(manager: *mut GdkDisplayManager, name: *const c_char) -> *mut GdkDisplay;
    pub fn gdk_display_manager_set_default_display(manager: *mut GdkDisplayManager, display: *mut GdkDisplay);

    //=========================================================================
    // GdkDragContext
    //=========================================================================
    pub fn gdk_drag_context_get_type() -> GType;
    pub fn gdk_drag_context_get_actions(context: *mut GdkDragContext) -> GdkDragAction;
    pub fn gdk_drag_context_get_dest_window(context: *mut GdkDragContext) -> *mut GdkWindow;
    pub fn gdk_drag_context_get_device(context: *mut GdkDragContext) -> *mut GdkDevice;
    #[cfg(feature = "v3_20")]
    pub fn gdk_drag_context_get_drag_window(context: *mut GdkDragContext) -> *mut GdkWindow;
    pub fn gdk_drag_context_get_protocol(context: *mut GdkDragContext) -> GdkDragProtocol;
    pub fn gdk_drag_context_get_selected_action(context: *mut GdkDragContext) -> GdkDragAction;
    pub fn gdk_drag_context_get_source_window(context: *mut GdkDragContext) -> *mut GdkWindow;
    pub fn gdk_drag_context_get_suggested_action(context: *mut GdkDragContext) -> GdkDragAction;
    pub fn gdk_drag_context_list_targets(context: *mut GdkDragContext) -> *mut glib::GList;
    #[cfg(feature = "v3_20")]
    pub fn gdk_drag_context_manage_dnd(context: *mut GdkDragContext, ipc_window: *mut GdkWindow, actions: GdkDragAction) -> gboolean;
    pub fn gdk_drag_context_set_device(context: *mut GdkDragContext, device: *mut GdkDevice);
    #[cfg(feature = "v3_20")]
    pub fn gdk_drag_context_set_hotspot(context: *mut GdkDragContext, hot_x: c_int, hot_y: c_int);

    //=========================================================================
    // GdkDrawingContext
    //=========================================================================
    pub fn gdk_drawing_context_get_type() -> GType;
    #[cfg(feature = "v3_22")]
    pub fn gdk_drawing_context_get_cairo_context(context: *mut GdkDrawingContext) -> *mut cairo::cairo_t;
    #[cfg(feature = "v3_22")]
    pub fn gdk_drawing_context_get_clip(context: *mut GdkDrawingContext) -> *mut cairo::cairo_region_t;
    #[cfg(feature = "v3_22")]
    pub fn gdk_drawing_context_get_window(context: *mut GdkDrawingContext) -> *mut GdkWindow;
    #[cfg(feature = "v3_22")]
    pub fn gdk_drawing_context_is_valid(context: *mut GdkDrawingContext) -> gboolean;

    //=========================================================================
    // GdkFrameClock
    //=========================================================================
    pub fn gdk_frame_clock_get_type() -> GType;
    #[cfg(feature = "v3_8")]
    pub fn gdk_frame_clock_begin_updating(frame_clock: *mut GdkFrameClock);
    #[cfg(feature = "v3_8")]
    pub fn gdk_frame_clock_end_updating(frame_clock: *mut GdkFrameClock);
    #[cfg(feature = "v3_8")]
    pub fn gdk_frame_clock_get_current_timings(frame_clock: *mut GdkFrameClock) -> *mut GdkFrameTimings;
    #[cfg(feature = "v3_8")]
    pub fn gdk_frame_clock_get_frame_counter(frame_clock: *mut GdkFrameClock) -> i64;
    #[cfg(feature = "v3_8")]
    pub fn gdk_frame_clock_get_frame_time(frame_clock: *mut GdkFrameClock) -> i64;
    #[cfg(feature = "v3_8")]
    pub fn gdk_frame_clock_get_history_start(frame_clock: *mut GdkFrameClock) -> i64;
    #[cfg(feature = "v3_8")]
    pub fn gdk_frame_clock_get_refresh_info(frame_clock: *mut GdkFrameClock, base_time: i64, refresh_interval_return: *mut i64, presentation_time_return: *mut i64);
    #[cfg(feature = "v3_8")]
    pub fn gdk_frame_clock_get_timings(frame_clock: *mut GdkFrameClock, frame_counter: i64) -> *mut GdkFrameTimings;
    #[cfg(feature = "v3_8")]
    pub fn gdk_frame_clock_request_phase(frame_clock: *mut GdkFrameClock, phase: GdkFrameClockPhase);

    //=========================================================================
    // GdkGLContext
    //=========================================================================
    pub fn gdk_gl_context_get_type() -> GType;
    #[cfg(feature = "v3_16")]
    pub fn gdk_gl_context_clear_current();
    #[cfg(feature = "v3_16")]
    pub fn gdk_gl_context_get_current() -> *mut GdkGLContext;
    #[cfg(feature = "v3_16")]
    pub fn gdk_gl_context_get_debug_enabled(context: *mut GdkGLContext) -> gboolean;
    #[cfg(feature = "v3_16")]
    pub fn gdk_gl_context_get_display(context: *mut GdkGLContext) -> *mut GdkDisplay;
    #[cfg(feature = "v3_16")]
    pub fn gdk_gl_context_get_forward_compatible(context: *mut GdkGLContext) -> gboolean;
    #[cfg(feature = "v3_16")]
    pub fn gdk_gl_context_get_required_version(context: *mut GdkGLContext, major: *mut c_int, minor: *mut c_int);
    #[cfg(feature = "v3_16")]
    pub fn gdk_gl_context_get_shared_context(context: *mut GdkGLContext) -> *mut GdkGLContext;
    #[cfg(feature = "v3_22")]
    pub fn gdk_gl_context_get_use_es(context: *mut GdkGLContext) -> gboolean;
    #[cfg(feature = "v3_16")]
    pub fn gdk_gl_context_get_version(context: *mut GdkGLContext, major: *mut c_int, minor: *mut c_int);
    #[cfg(feature = "v3_16")]
    pub fn gdk_gl_context_get_window(context: *mut GdkGLContext) -> *mut GdkWindow;
    #[cfg(feature = "v3_20")]
    pub fn gdk_gl_context_is_legacy(context: *mut GdkGLContext) -> gboolean;
    #[cfg(feature = "v3_16")]
    pub fn gdk_gl_context_make_current(context: *mut GdkGLContext);
    #[cfg(feature = "v3_16")]
    pub fn gdk_gl_context_realize(context: *mut GdkGLContext, error: *mut *mut glib::GError) -> gboolean;
    #[cfg(feature = "v3_16")]
    pub fn gdk_gl_context_set_debug_enabled(context: *mut GdkGLContext, enabled: gboolean);
    #[cfg(feature = "v3_16")]
    pub fn gdk_gl_context_set_forward_compatible(context: *mut GdkGLContext, compatible: gboolean);
    #[cfg(feature = "v3_16")]
    pub fn gdk_gl_context_set_required_version(context: *mut GdkGLContext, major: c_int, minor: c_int);
    #[cfg(feature = "v3_22")]
    pub fn gdk_gl_context_set_use_es(context: *mut GdkGLContext, use_es: c_int);

    //=========================================================================
    // GdkKeymap
    //=========================================================================
    pub fn gdk_keymap_get_type() -> GType;
    pub fn gdk_keymap_get_default() -> *mut GdkKeymap;
    pub fn gdk_keymap_get_for_display(display: *mut GdkDisplay) -> *mut GdkKeymap;
    pub fn gdk_keymap_add_virtual_modifiers(keymap: *mut GdkKeymap, state: *mut GdkModifierType);
    pub fn gdk_keymap_get_caps_lock_state(keymap: *mut GdkKeymap) -> gboolean;
    pub fn gdk_keymap_get_direction(keymap: *mut GdkKeymap) -> pango::PangoDirection;
    pub fn gdk_keymap_get_entries_for_keycode(keymap: *mut GdkKeymap, hardware_keycode: c_uint, keys: *mut *mut GdkKeymapKey, keyvals: *mut *mut c_uint, n_entries: *mut c_int) -> gboolean;
    pub fn gdk_keymap_get_entries_for_keyval(keymap: *mut GdkKeymap, keyval: c_uint, keys: *mut *mut GdkKeymapKey, n_keys: *mut c_int) -> gboolean;
    pub fn gdk_keymap_get_modifier_mask(keymap: *mut GdkKeymap, intent: GdkModifierIntent) -> GdkModifierType;
    pub fn gdk_keymap_get_modifier_state(keymap: *mut GdkKeymap) -> c_uint;
    pub fn gdk_keymap_get_num_lock_state(keymap: *mut GdkKeymap) -> gboolean;
    #[cfg(feature = "v3_18")]
    pub fn gdk_keymap_get_scroll_lock_state(keymap: *mut GdkKeymap) -> gboolean;
    pub fn gdk_keymap_have_bidi_layouts(keymap: *mut GdkKeymap) -> gboolean;
    pub fn gdk_keymap_lookup_key(keymap: *mut GdkKeymap, key: *const GdkKeymapKey) -> c_uint;
    pub fn gdk_keymap_map_virtual_modifiers(keymap: *mut GdkKeymap, state: *mut GdkModifierType) -> gboolean;
    pub fn gdk_keymap_translate_keyboard_state(keymap: *mut GdkKeymap, hardware_keycode: c_uint, state: GdkModifierType, group: c_int, keyval: *mut c_uint, effective_group: *mut c_int, level: *mut c_int, consumed_modifiers: *mut GdkModifierType) -> gboolean;

    //=========================================================================
    // GdkMonitor
    //=========================================================================
    pub fn gdk_monitor_get_type() -> GType;
    #[cfg(feature = "v3_22")]
    pub fn gdk_monitor_get_display(monitor: *mut GdkMonitor) -> *mut GdkDisplay;
    #[cfg(feature = "v3_22")]
    pub fn gdk_monitor_get_geometry(monitor: *mut GdkMonitor, geometry: *mut GdkRectangle);
    #[cfg(feature = "v3_22")]
    pub fn gdk_monitor_get_height_mm(monitor: *mut GdkMonitor) -> c_int;
    pub fn gdk_monitor_get_manufacturer(monitor: *mut GdkMonitor) -> *const c_char;
    pub fn gdk_monitor_get_model(monitor: *mut GdkMonitor) -> *const c_char;
    #[cfg(feature = "v3_22")]
    pub fn gdk_monitor_get_refresh_rate(monitor: *mut GdkMonitor) -> c_int;
    #[cfg(feature = "v3_22")]
    pub fn gdk_monitor_get_scale_factor(monitor: *mut GdkMonitor) -> c_int;
    #[cfg(feature = "v3_22")]
    pub fn gdk_monitor_get_subpixel_layout(monitor: *mut GdkMonitor) -> GdkSubpixelLayout;
    #[cfg(feature = "v3_22")]
    pub fn gdk_monitor_get_width_mm(monitor: *mut GdkMonitor) -> c_int;
    #[cfg(feature = "v3_22")]
    pub fn gdk_monitor_get_workarea(monitor: *mut GdkMonitor, workarea: *mut GdkRectangle);
    #[cfg(feature = "v3_22")]
    pub fn gdk_monitor_is_primary(monitor: *mut GdkMonitor) -> gboolean;

    //=========================================================================
    // GdkScreen
    //=========================================================================
    pub fn gdk_screen_get_type() -> GType;
    pub fn gdk_screen_get_default() -> *mut GdkScreen;
    pub fn gdk_screen_height() -> c_int;
    pub fn gdk_screen_height_mm() -> c_int;
    pub fn gdk_screen_width() -> c_int;
    pub fn gdk_screen_width_mm() -> c_int;
    pub fn gdk_screen_get_active_window(screen: *mut GdkScreen) -> *mut GdkWindow;
    pub fn gdk_screen_get_display(screen: *mut GdkScreen) -> *mut GdkDisplay;
    pub fn gdk_screen_get_font_options(screen: *mut GdkScreen) -> *const cairo::cairo_font_options_t;
    pub fn gdk_screen_get_height(screen: *mut GdkScreen) -> c_int;
    pub fn gdk_screen_get_height_mm(screen: *mut GdkScreen) -> c_int;
    pub fn gdk_screen_get_monitor_at_point(screen: *mut GdkScreen, x: c_int, y: c_int) -> c_int;
    pub fn gdk_screen_get_monitor_at_window(screen: *mut GdkScreen, window: *mut GdkWindow) -> c_int;
    pub fn gdk_screen_get_monitor_geometry(screen: *mut GdkScreen, monitor_num: c_int, dest: *mut GdkRectangle);
    pub fn gdk_screen_get_monitor_height_mm(screen: *mut GdkScreen, monitor_num: c_int) -> c_int;
    pub fn gdk_screen_get_monitor_plug_name(screen: *mut GdkScreen, monitor_num: c_int) -> *mut c_char;
    #[cfg(feature = "v3_10")]
    pub fn gdk_screen_get_monitor_scale_factor(screen: *mut GdkScreen, monitor_num: c_int) -> c_int;
    pub fn gdk_screen_get_monitor_width_mm(screen: *mut GdkScreen, monitor_num: c_int) -> c_int;
    pub fn gdk_screen_get_monitor_workarea(screen: *mut GdkScreen, monitor_num: c_int, dest: *mut GdkRectangle);
    pub fn gdk_screen_get_n_monitors(screen: *mut GdkScreen) -> c_int;
    pub fn gdk_screen_get_number(screen: *mut GdkScreen) -> c_int;
    pub fn gdk_screen_get_primary_monitor(screen: *mut GdkScreen) -> c_int;
    pub fn gdk_screen_get_resolution(screen: *mut GdkScreen) -> c_double;
    pub fn gdk_screen_get_rgba_visual(screen: *mut GdkScreen) -> *mut GdkVisual;
    pub fn gdk_screen_get_root_window(screen: *mut GdkScreen) -> *mut GdkWindow;
    pub fn gdk_screen_get_setting(screen: *mut GdkScreen, name: *const c_char, value: *mut gobject::GValue) -> gboolean;
    pub fn gdk_screen_get_system_visual(screen: *mut GdkScreen) -> *mut GdkVisual;
    pub fn gdk_screen_get_toplevel_windows(screen: *mut GdkScreen) -> *mut glib::GList;
    pub fn gdk_screen_get_width(screen: *mut GdkScreen) -> c_int;
    pub fn gdk_screen_get_width_mm(screen: *mut GdkScreen) -> c_int;
    pub fn gdk_screen_get_window_stack(screen: *mut GdkScreen) -> *mut glib::GList;
    pub fn gdk_screen_is_composited(screen: *mut GdkScreen) -> gboolean;
    pub fn gdk_screen_list_visuals(screen: *mut GdkScreen) -> *mut glib::GList;
    pub fn gdk_screen_make_display_name(screen: *mut GdkScreen) -> *mut c_char;
    pub fn gdk_screen_set_font_options(screen: *mut GdkScreen, options: *const cairo::cairo_font_options_t);
    pub fn gdk_screen_set_resolution(screen: *mut GdkScreen, dpi: c_double);

    //=========================================================================
    // GdkSeat
    //=========================================================================
    pub fn gdk_seat_get_type() -> GType;
    #[cfg(feature = "v3_20")]
    pub fn gdk_seat_get_capabilities(seat: *mut GdkSeat) -> GdkSeatCapabilities;
    pub fn gdk_seat_get_display(seat: *mut GdkSeat) -> *mut GdkDisplay;
    #[cfg(feature = "v3_20")]
    pub fn gdk_seat_get_keyboard(seat: *mut GdkSeat) -> *mut GdkDevice;
    #[cfg(feature = "v3_20")]
    pub fn gdk_seat_get_pointer(seat: *mut GdkSeat) -> *mut GdkDevice;
    #[cfg(feature = "v3_20")]
    pub fn gdk_seat_get_slaves(seat: *mut GdkSeat, capabilities: GdkSeatCapabilities) -> *mut glib::GList;
    #[cfg(feature = "v3_20")]
    pub fn gdk_seat_grab(seat: *mut GdkSeat, window: *mut GdkWindow, capabilities: GdkSeatCapabilities, owner_events: gboolean, cursor: *mut GdkCursor, event: *const GdkEvent, prepare_func: GdkSeatGrabPrepareFunc, prepare_func_data: gpointer) -> GdkGrabStatus;
    #[cfg(feature = "v3_20")]
    pub fn gdk_seat_ungrab(seat: *mut GdkSeat);

    //=========================================================================
    // GdkVisual
    //=========================================================================
    pub fn gdk_visual_get_type() -> GType;
    pub fn gdk_visual_get_best() -> *mut GdkVisual;
    pub fn gdk_visual_get_best_depth() -> c_int;
    pub fn gdk_visual_get_best_type() -> GdkVisualType;
    pub fn gdk_visual_get_best_with_both(depth: c_int, visual_type: GdkVisualType) -> *mut GdkVisual;
    pub fn gdk_visual_get_best_with_depth(depth: c_int) -> *mut GdkVisual;
    pub fn gdk_visual_get_best_with_type(visual_type: GdkVisualType) -> *mut GdkVisual;
    pub fn gdk_visual_get_system() -> *mut GdkVisual;
    pub fn gdk_visual_get_bits_per_rgb(visual: *mut GdkVisual) -> c_int;
    pub fn gdk_visual_get_blue_pixel_details(visual: *mut GdkVisual, mask: *mut u32, shift: *mut c_int, precision: *mut c_int);
    pub fn gdk_visual_get_byte_order(visual: *mut GdkVisual) -> GdkByteOrder;
    pub fn gdk_visual_get_colormap_size(visual: *mut GdkVisual) -> c_int;
    pub fn gdk_visual_get_depth(visual: *mut GdkVisual) -> c_int;
    pub fn gdk_visual_get_green_pixel_details(visual: *mut GdkVisual, mask: *mut u32, shift: *mut c_int, precision: *mut c_int);
    pub fn gdk_visual_get_red_pixel_details(visual: *mut GdkVisual, mask: *mut u32, shift: *mut c_int, precision: *mut c_int);
    pub fn gdk_visual_get_screen(visual: *mut GdkVisual) -> *mut GdkScreen;
    pub fn gdk_visual_get_visual_type(visual: *mut GdkVisual) -> GdkVisualType;

    //=========================================================================
    // GdkWindow
    //=========================================================================
    pub fn gdk_window_get_type() -> GType;
    pub fn gdk_window_new(parent: *mut GdkWindow, attributes: *mut GdkWindowAttr, attributes_mask: c_int) -> *mut GdkWindow;
    pub fn gdk_window_at_pointer(win_x: *mut c_int, win_y: *mut c_int) -> *mut GdkWindow;
    pub fn gdk_window_constrain_size(geometry: *mut GdkGeometry, flags: GdkWindowHints, width: c_int, height: c_int, new_width: *mut c_int, new_height: *mut c_int);
    pub fn gdk_window_process_all_updates();
    pub fn gdk_window_set_debug_updates(setting: gboolean);
    pub fn gdk_window_add_filter(window: *mut GdkWindow, function: GdkFilterFunc, data: gpointer);
    pub fn gdk_window_beep(window: *mut GdkWindow);
    #[cfg(feature = "v3_22")]
    pub fn gdk_window_begin_draw_frame(window: *mut GdkWindow, region: *const cairo::cairo_region_t) -> *mut GdkDrawingContext;
    pub fn gdk_window_begin_move_drag(window: *mut GdkWindow, button: c_int, root_x: c_int, root_y: c_int, timestamp: u32);
    pub fn gdk_window_begin_move_drag_for_device(window: *mut GdkWindow, device: *mut GdkDevice, button: c_int, root_x: c_int, root_y: c_int, timestamp: u32);
    pub fn gdk_window_begin_paint_rect(window: *mut GdkWindow, rectangle: *const GdkRectangle);
    pub fn gdk_window_begin_paint_region(window: *mut GdkWindow, region: *const cairo::cairo_region_t);
    pub fn gdk_window_begin_resize_drag(window: *mut GdkWindow, edge: GdkWindowEdge, button: c_int, root_x: c_int, root_y: c_int, timestamp: u32);
    pub fn gdk_window_begin_resize_drag_for_device(window: *mut GdkWindow, edge: GdkWindowEdge, device: *mut GdkDevice, button: c_int, root_x: c_int, root_y: c_int, timestamp: u32);
    pub fn gdk_window_configure_finished(window: *mut GdkWindow);
    pub fn gdk_window_coords_from_parent(window: *mut GdkWindow, parent_x: c_double, parent_y: c_double, x: *mut c_double, y: *mut c_double);
    pub fn gdk_window_coords_to_parent(window: *mut GdkWindow, x: c_double, y: c_double, parent_x: *mut c_double, parent_y: *mut c_double);
    #[cfg(feature = "v3_16")]
    pub fn gdk_window_create_gl_context(window: *mut GdkWindow, error: *mut *mut glib::GError) -> *mut GdkGLContext;
    #[cfg(feature = "v3_10")]
    pub fn gdk_window_create_similar_image_surface(window: *mut GdkWindow, format: c_int, width: c_int, height: c_int, scale: c_int) -> *mut cairo::cairo_surface_t;
    pub fn gdk_window_create_similar_surface(window: *mut GdkWindow, content: cairo::cairo_content_t, width: c_int, height: c_int) -> *mut cairo::cairo_surface_t;
    pub fn gdk_window_deiconify(window: *mut GdkWindow);
    pub fn gdk_window_destroy(window: *mut GdkWindow);
    pub fn gdk_window_destroy_notify(window: *mut GdkWindow);
    pub fn gdk_window_enable_synchronized_configure(window: *mut GdkWindow);
    #[cfg(feature = "v3_22")]
    pub fn gdk_window_end_draw_frame(window: *mut GdkWindow, context: *mut GdkDrawingContext);
    pub fn gdk_window_end_paint(window: *mut GdkWindow);
    pub fn gdk_window_ensure_native(window: *mut GdkWindow) -> gboolean;
    pub fn gdk_window_flush(window: *mut GdkWindow);
    pub fn gdk_window_focus(window: *mut GdkWindow, timestamp: u32);
    pub fn gdk_window_freeze_toplevel_updates_libgtk_only(window: *mut GdkWindow);
    pub fn gdk_window_freeze_updates(window: *mut GdkWindow);
    pub fn gdk_window_fullscreen(window: *mut GdkWindow);
    pub fn gdk_window_fullscreen_on_monitor(window: *mut GdkWindow, monitor: c_int);
    pub fn gdk_window_geometry_changed(window: *mut GdkWindow);
    pub fn gdk_window_get_accept_focus(window: *mut GdkWindow) -> gboolean;
    pub fn gdk_window_get_background_pattern(window: *mut GdkWindow) -> *mut cairo::cairo_pattern_t;
    pub fn gdk_window_get_children(window: *mut GdkWindow) -> *mut glib::GList;
    #[cfg(feature = "v3_10")]
    pub fn gdk_window_get_children_with_user_data(window: *mut GdkWindow, user_data: gpointer) -> *mut glib::GList;
    pub fn gdk_window_get_clip_region(window: *mut GdkWindow) -> *mut cairo::cairo_region_t;
    pub fn gdk_window_get_composited(window: *mut GdkWindow) -> gboolean;
    pub fn gdk_window_get_cursor(window: *mut GdkWindow) -> *mut GdkCursor;
    pub fn gdk_window_get_decorations(window: *mut GdkWindow, decorations: *mut GdkWMDecoration) -> gboolean;
    pub fn gdk_window_get_device_cursor(window: *mut GdkWindow, device: *mut GdkDevice) -> *mut GdkCursor;
    pub fn gdk_window_get_device_events(window: *mut GdkWindow, device: *mut GdkDevice) -> GdkEventMask;
    pub fn gdk_window_get_device_position(window: *mut GdkWindow, device: *mut GdkDevice, x: *mut c_int, y: *mut c_int, mask: *mut GdkModifierType) -> *mut GdkWindow;
    #[cfg(feature = "v3_10")]
    pub fn gdk_window_get_device_position_double(window: *mut GdkWindow, device: *mut GdkDevice, x: *mut c_double, y: *mut c_double, mask: *mut GdkModifierType) -> *mut GdkWindow;
    pub fn gdk_window_get_display(window: *mut GdkWindow) -> *mut GdkDisplay;
    pub fn gdk_window_get_drag_protocol(window: *mut GdkWindow, target: *mut *mut GdkWindow) -> GdkDragProtocol;
    pub fn gdk_window_get_effective_parent(window: *mut GdkWindow) -> *mut GdkWindow;
    pub fn gdk_window_get_effective_toplevel(window: *mut GdkWindow) -> *mut GdkWindow;
    #[cfg(feature = "v3_12")]
    pub fn gdk_window_get_event_compression(window: *mut GdkWindow) -> gboolean;
    pub fn gdk_window_get_events(window: *mut GdkWindow) -> GdkEventMask;
    pub fn gdk_window_get_focus_on_map(window: *mut GdkWindow) -> gboolean;
    #[cfg(feature = "v3_8")]
    pub fn gdk_window_get_frame_clock(window: *mut GdkWindow) -> *mut GdkFrameClock;
    pub fn gdk_window_get_frame_extents(window: *mut GdkWindow, rect: *mut GdkRectangle);
    #[cfg(feature = "v3_8")]
    pub fn gdk_window_get_fullscreen_mode(window: *mut GdkWindow) -> GdkFullscreenMode;
    pub fn gdk_window_get_geometry(window: *mut GdkWindow, x: *mut c_int, y: *mut c_int, width: *mut c_int, height: *mut c_int);
    pub fn gdk_window_get_group(window: *mut GdkWindow) -> *mut GdkWindow;
    pub fn gdk_window_get_height(window: *mut GdkWindow) -> c_int;
    pub fn gdk_window_get_modal_hint(window: *mut GdkWindow) -> gboolean;
    pub fn gdk_window_get_origin(window: *mut GdkWindow, x: *mut c_int, y: *mut c_int) -> c_int;
    pub fn gdk_window_get_parent(window: *mut GdkWindow) -> *mut GdkWindow;
    #[cfg(feature = "v3_18")]
    pub fn gdk_window_get_pass_through(window: *mut GdkWindow) -> gboolean;
    pub fn gdk_window_get_pointer(window: *mut GdkWindow, x: *mut c_int, y: *mut c_int, mask: *mut GdkModifierType) -> *mut GdkWindow;
    pub fn gdk_window_get_position(window: *mut GdkWindow, x: *mut c_int, y: *mut c_int);
    pub fn gdk_window_get_root_coords(window: *mut GdkWindow, x: c_int, y: c_int, root_x: *mut c_int, root_y: *mut c_int);
    pub fn gdk_window_get_root_origin(window: *mut GdkWindow, x: *mut c_int, y: *mut c_int);
    #[cfg(feature = "v3_10")]
    pub fn gdk_window_get_scale_factor(window: *mut GdkWindow) -> c_int;
    pub fn gdk_window_get_screen(window: *mut GdkWindow) -> *mut GdkScreen;
    pub fn gdk_window_get_source_events(window: *mut GdkWindow, source: GdkInputSource) -> GdkEventMask;
    pub fn gdk_window_get_state(window: *mut GdkWindow) -> GdkWindowState;
    pub fn gdk_window_get_support_multidevice(window: *mut GdkWindow) -> gboolean;
    pub fn gdk_window_get_toplevel(window: *mut GdkWindow) -> *mut GdkWindow;
    pub fn gdk_window_get_type_hint(window: *mut GdkWindow) -> GdkWindowTypeHint;
    pub fn gdk_window_get_update_area(window: *mut GdkWindow) -> *mut cairo::cairo_region_t;
    pub fn gdk_window_get_user_data(window: *mut GdkWindow, data: *mut gpointer);
    pub fn gdk_window_get_visible_region(window: *mut GdkWindow) -> *mut cairo::cairo_region_t;
    pub fn gdk_window_get_visual(window: *mut GdkWindow) -> *mut GdkVisual;
    pub fn gdk_window_get_width(window: *mut GdkWindow) -> c_int;
    pub fn gdk_window_get_window_type(window: *mut GdkWindow) -> GdkWindowType;
    pub fn gdk_window_has_native(window: *mut GdkWindow) -> gboolean;
    pub fn gdk_window_hide(window: *mut GdkWindow);
    pub fn gdk_window_iconify(window: *mut GdkWindow);
    pub fn gdk_window_input_shape_combine_region(window: *mut GdkWindow, shape_region: *const cairo::cairo_region_t, offset_x: c_int, offset_y: c_int);
    pub fn gdk_window_invalidate_maybe_recurse(window: *mut GdkWindow, region: *const cairo::cairo_region_t, child_func: GdkWindowChildFunc, user_data: gpointer);
    pub fn gdk_window_invalidate_rect(window: *mut GdkWindow, rect: *const GdkRectangle, invalidate_children: gboolean);
    pub fn gdk_window_invalidate_region(window: *mut GdkWindow, region: *const cairo::cairo_region_t, invalidate_children: gboolean);
    pub fn gdk_window_is_destroyed(window: *mut GdkWindow) -> gboolean;
    pub fn gdk_window_is_input_only(window: *mut GdkWindow) -> gboolean;
    pub fn gdk_window_is_shaped(window: *mut GdkWindow) -> gboolean;
    pub fn gdk_window_is_viewable(window: *mut GdkWindow) -> gboolean;
    pub fn gdk_window_is_visible(window: *mut GdkWindow) -> gboolean;
    pub fn gdk_window_lower(window: *mut GdkWindow);
    #[cfg(feature = "v3_16")]
    pub fn gdk_window_mark_paint_from_clip(window: *mut GdkWindow, cr: *mut cairo::cairo_t);
    pub fn gdk_window_maximize(window: *mut GdkWindow);
    pub fn gdk_window_merge_child_input_shapes(window: *mut GdkWindow);
    pub fn gdk_window_merge_child_shapes(window: *mut GdkWindow);
    pub fn gdk_window_move(window: *mut GdkWindow, x: c_int, y: c_int);
    pub fn gdk_window_move_region(window: *mut GdkWindow, region: *const cairo::cairo_region_t, dx: c_int, dy: c_int);
    pub fn gdk_window_move_resize(window: *mut GdkWindow, x: c_int, y: c_int, width: c_int, height: c_int);
    pub fn gdk_window_peek_children(window: *mut GdkWindow) -> *mut glib::GList;
    pub fn gdk_window_process_updates(window: *mut GdkWindow, update_children: gboolean);
    pub fn gdk_window_raise(window: *mut GdkWindow);
    pub fn gdk_window_register_dnd(window: *mut GdkWindow);
    pub fn gdk_window_remove_filter(window: *mut GdkWindow, function: GdkFilterFunc, data: gpointer);
    pub fn gdk_window_reparent(window: *mut GdkWindow, new_parent: *mut GdkWindow, x: c_int, y: c_int);
    pub fn gdk_window_resize(window: *mut GdkWindow, width: c_int, height: c_int);
    pub fn gdk_window_restack(window: *mut GdkWindow, sibling: *mut GdkWindow, above: gboolean);
    pub fn gdk_window_scroll(window: *mut GdkWindow, dx: c_int, dy: c_int);
    pub fn gdk_window_set_accept_focus(window: *mut GdkWindow, accept_focus: gboolean);
    pub fn gdk_window_set_background(window: *mut GdkWindow, color: *const GdkColor);
    pub fn gdk_window_set_background_pattern(window: *mut GdkWindow, pattern: *mut cairo::cairo_pattern_t);
    pub fn gdk_window_set_background_rgba(window: *mut GdkWindow, rgba: *const GdkRGBA);
    pub fn gdk_window_set_child_input_shapes(window: *mut GdkWindow);
    pub fn gdk_window_set_child_shapes(window: *mut GdkWindow);
    pub fn gdk_window_set_composited(window: *mut GdkWindow, composited: gboolean);
    pub fn gdk_window_set_cursor(window: *mut GdkWindow, cursor: *mut GdkCursor);
    pub fn gdk_window_set_decorations(window: *mut GdkWindow, decorations: GdkWMDecoration);
    pub fn gdk_window_set_device_cursor(window: *mut GdkWindow, device: *mut GdkDevice, cursor: *mut GdkCursor);
    pub fn gdk_window_set_device_events(window: *mut GdkWindow, device: *mut GdkDevice, event_mask: GdkEventMask);
    #[cfg(feature = "v3_12")]
    pub fn gdk_window_set_event_compression(window: *mut GdkWindow, event_compression: gboolean);
    pub fn gdk_window_set_events(window: *mut GdkWindow, event_mask: GdkEventMask);
    pub fn gdk_window_set_focus_on_map(window: *mut GdkWindow, focus_on_map: gboolean);
    #[cfg(feature = "v3_8")]
    pub fn gdk_window_set_fullscreen_mode(window: *mut GdkWindow, mode: GdkFullscreenMode);
    pub fn gdk_window_set_functions(window: *mut GdkWindow, functions: GdkWMFunction);
    pub fn gdk_window_set_geometry_hints(window: *mut GdkWindow, geometry: *const GdkGeometry, geom_mask: GdkWindowHints);
    pub fn gdk_window_set_group(window: *mut GdkWindow, leader: *mut GdkWindow);
    pub fn gdk_window_set_icon_list(window: *mut GdkWindow, pixbufs: *mut glib::GList);
    pub fn gdk_window_set_icon_name(window: *mut GdkWindow, name: *const c_char);
    #[cfg(feature = "v3_10")]
    pub fn gdk_window_set_invalidate_handler(window: *mut GdkWindow, handler: GdkWindowInvalidateHandlerFunc);
    pub fn gdk_window_set_keep_above(window: *mut GdkWindow, setting: gboolean);
    pub fn gdk_window_set_keep_below(window: *mut GdkWindow, setting: gboolean);
    pub fn gdk_window_set_modal_hint(window: *mut GdkWindow, modal: gboolean);
    pub fn gdk_window_set_opacity(window: *mut GdkWindow, opacity: c_double);
    #[cfg(feature = "v3_10")]
    pub fn gdk_window_set_opaque_region(window: *mut GdkWindow, region: *mut cairo::cairo_region_t);
    pub fn gdk_window_set_override_redirect(window: *mut GdkWindow, override_redirect: gboolean);
    #[cfg(feature = "v3_18")]
    pub fn gdk_window_set_pass_through(window: *mut GdkWindow, pass_through: gboolean);
    pub fn gdk_window_set_role(window: *mut GdkWindow, role: *const c_char);
    #[cfg(feature = "v3_12")]
    pub fn gdk_window_set_shadow_width(window: *mut GdkWindow, left: c_int, right: c_int, top: c_int, bottom: c_int);
    pub fn gdk_window_set_skip_pager_hint(window: *mut GdkWindow, skips_pager: gboolean);
    pub fn gdk_window_set_skip_taskbar_hint(window: *mut GdkWindow, skips_taskbar: gboolean);
    pub fn gdk_window_set_source_events(window: *mut GdkWindow, source: GdkInputSource, event_mask: GdkEventMask);
    pub fn gdk_window_set_startup_id(window: *mut GdkWindow, startup_id: *const c_char);
    pub fn gdk_window_set_static_gravities(window: *mut GdkWindow, use_static: gboolean) -> gboolean;
    pub fn gdk_window_set_support_multidevice(window: *mut GdkWindow, support_multidevice: gboolean);
    pub fn gdk_window_set_title(window: *mut GdkWindow, title: *const c_char);
    pub fn gdk_window_set_transient_for(window: *mut GdkWindow, parent: *mut GdkWindow);
    pub fn gdk_window_set_type_hint(window: *mut GdkWindow, hint: GdkWindowTypeHint);
    pub fn gdk_window_set_urgency_hint(window: *mut GdkWindow, urgent: gboolean);
    pub fn gdk_window_set_user_data(window: *mut GdkWindow, user_data: *mut gobject::GObject);
    pub fn gdk_window_shape_combine_region(window: *mut GdkWindow, shape_region: *const cairo::cairo_region_t, offset_x: c_int, offset_y: c_int);
    pub fn gdk_window_show(window: *mut GdkWindow);
    pub fn gdk_window_show_unraised(window: *mut GdkWindow);
    #[cfg(feature = "v3_14")]
    pub fn gdk_window_show_window_menu(window: *mut GdkWindow, event: *mut GdkEvent) -> gboolean;
    pub fn gdk_window_stick(window: *mut GdkWindow);
    pub fn gdk_window_thaw_toplevel_updates_libgtk_only(window: *mut GdkWindow);
    pub fn gdk_window_thaw_updates(window: *mut GdkWindow);
    pub fn gdk_window_unfullscreen(window: *mut GdkWindow);
    pub fn gdk_window_unmaximize(window: *mut GdkWindow);
    pub fn gdk_window_unstick(window: *mut GdkWindow);
    pub fn gdk_window_withdraw(window: *mut GdkWindow);

    //=========================================================================
    // GdkDevicePad
    //=========================================================================
    pub fn gdk_device_pad_get_type() -> GType;
    #[cfg(feature = "v3_22")]
    pub fn gdk_device_pad_get_feature_group(pad: *mut GdkDevicePad, feature: GdkDevicePadFeature, feature_idx: c_int) -> c_int;
    #[cfg(feature = "v3_22")]
    pub fn gdk_device_pad_get_group_n_modes(pad: *mut GdkDevicePad, group_idx: c_int) -> c_int;
    #[cfg(feature = "v3_22")]
    pub fn gdk_device_pad_get_n_features(pad: *mut GdkDevicePad, feature: GdkDevicePadFeature) -> c_int;
    #[cfg(feature = "v3_22")]
    pub fn gdk_device_pad_get_n_groups(pad: *mut GdkDevicePad) -> c_int;

    //=========================================================================
    // Other functions
    //=========================================================================
    pub fn gdk_add_option_entries_libgtk_only(group: *mut glib::GOptionGroup);
    pub fn gdk_beep();
    pub fn gdk_cairo_create(window: *mut GdkWindow) -> *mut cairo::cairo_t;
    #[cfg(feature = "v3_16")]
    pub fn gdk_cairo_draw_from_gl(cr: *mut cairo::cairo_t, window: *mut GdkWindow, source: c_int, source_type: c_int, buffer_scale: c_int, x: c_int, y: c_int, width: c_int, height: c_int);
    pub fn gdk_cairo_get_clip_rectangle(cr: *mut cairo::cairo_t, rect: *mut GdkRectangle) -> gboolean;
    #[cfg(feature = "v3_22")]
    pub fn gdk_cairo_get_drawing_context(cr: *mut cairo::cairo_t) -> *mut GdkDrawingContext;
    pub fn gdk_cairo_rectangle(cr: *mut cairo::cairo_t, rectangle: *const GdkRectangle);
    pub fn gdk_cairo_region(cr: *mut cairo::cairo_t, region: *const cairo::cairo_region_t);
    pub fn gdk_cairo_region_create_from_surface(surface: *mut cairo::cairo_surface_t) -> *mut cairo::cairo_region_t;
    pub fn gdk_cairo_set_source_color(cr: *mut cairo::cairo_t, color: *const GdkColor);
    pub fn gdk_cairo_set_source_pixbuf(cr: *mut cairo::cairo_t, pixbuf: *const gdk_pixbuf::GdkPixbuf, pixbuf_x: c_double, pixbuf_y: c_double);
    pub fn gdk_cairo_set_source_rgba(cr: *mut cairo::cairo_t, rgba: *const GdkRGBA);
    pub fn gdk_cairo_set_source_window(cr: *mut cairo::cairo_t, window: *mut GdkWindow, x: c_double, y: c_double);
    #[cfg(feature = "v3_10")]
    pub fn gdk_cairo_surface_create_from_pixbuf(pixbuf: *const gdk_pixbuf::GdkPixbuf, scale: c_int, for_window: *mut GdkWindow) -> *mut cairo::cairo_surface_t;
    pub fn gdk_disable_multidevice();
    pub fn gdk_drag_abort(context: *mut GdkDragContext, time_: u32);
    pub fn gdk_drag_begin(window: *mut GdkWindow, targets: *mut glib::GList) -> *mut GdkDragContext;
    pub fn gdk_drag_begin_for_device(window: *mut GdkWindow, device: *mut GdkDevice, targets: *mut glib::GList) -> *mut GdkDragContext;
    #[cfg(feature = "v3_20")]
    pub fn gdk_drag_begin_from_point(window: *mut GdkWindow, device: *mut GdkDevice, targets: *mut glib::GList, x_root: c_int, y_root: c_int) -> *mut GdkDragContext;
    pub fn gdk_drag_drop(context: *mut GdkDragContext, time_: u32);
    #[cfg(feature = "v3_20")]
    pub fn gdk_drag_drop_done(context: *mut GdkDragContext, success: gboolean);
    pub fn gdk_drag_drop_succeeded(context: *mut GdkDragContext) -> gboolean;
    pub fn gdk_drag_find_window_for_screen(context: *mut GdkDragContext, drag_window: *mut GdkWindow, screen: *mut GdkScreen, x_root: c_int, y_root: c_int, dest_window: *mut *mut GdkWindow, protocol: *mut GdkDragProtocol);
    pub fn gdk_drag_get_selection(context: *mut GdkDragContext) -> GdkAtom;
    pub fn gdk_drag_motion(context: *mut GdkDragContext, dest_window: *mut GdkWindow, protocol: GdkDragProtocol, x_root: c_int, y_root: c_int, suggested_action: GdkDragAction, possible_actions: GdkDragAction, time_: u32) -> gboolean;
    pub fn gdk_drag_status(context: *mut GdkDragContext, action: GdkDragAction, time_: u32);
    pub fn gdk_drop_finish(context: *mut GdkDragContext, success: gboolean, time_: u32);
    pub fn gdk_drop_reply(context: *mut GdkDragContext, accepted: gboolean, time_: u32);
    pub fn gdk_error_trap_pop() -> c_int;
    pub fn gdk_error_trap_pop_ignored();
    pub fn gdk_error_trap_push();
    pub fn gdk_events_get_angle(event1: *mut GdkEvent, event2: *mut GdkEvent, angle: *mut c_double) -> gboolean;
    pub fn gdk_events_get_center(event1: *mut GdkEvent, event2: *mut GdkEvent, x: *mut c_double, y: *mut c_double) -> gboolean;
    pub fn gdk_events_get_distance(event1: *mut GdkEvent, event2: *mut GdkEvent, distance: *mut c_double) -> gboolean;
    pub fn gdk_events_pending() -> gboolean;
    pub fn gdk_flush();
    pub fn gdk_get_default_root_window() -> *mut GdkWindow;
    pub fn gdk_get_display() -> *mut c_char;
    pub fn gdk_get_display_arg_name() -> *const c_char;
    pub fn gdk_get_program_class() -> *const c_char;
    pub fn gdk_get_show_events() -> gboolean;
    pub fn gdk_init(argc: *mut c_int, argv: *mut *mut *mut c_char);
    pub fn gdk_init_check(argc: *mut c_int, argv: *mut *mut *mut c_char) -> gboolean;
    pub fn gdk_keyboard_grab(window: *mut GdkWindow, owner_events: gboolean, time_: u32) -> GdkGrabStatus;
    pub fn gdk_keyboard_ungrab(time_: u32);
    pub fn gdk_keyval_convert_case(symbol: c_uint, lower: *mut c_uint, upper: *mut c_uint);
    pub fn gdk_keyval_from_name(keyval_name: *const c_char) -> c_uint;
    pub fn gdk_keyval_is_lower(keyval: c_uint) -> gboolean;
    pub fn gdk_keyval_is_upper(keyval: c_uint) -> gboolean;
    pub fn gdk_keyval_name(keyval: c_uint) -> *mut c_char;
    pub fn gdk_keyval_to_lower(keyval: c_uint) -> c_uint;
    pub fn gdk_keyval_to_unicode(keyval: c_uint) -> u32;
    pub fn gdk_keyval_to_upper(keyval: c_uint) -> c_uint;
    pub fn gdk_list_visuals() -> *mut glib::GList;
    pub fn gdk_notify_startup_complete();
    pub fn gdk_notify_startup_complete_with_id(startup_id: *const c_char);
    pub fn gdk_offscreen_window_get_embedder(window: *mut GdkWindow) -> *mut GdkWindow;
    pub fn gdk_offscreen_window_get_surface(window: *mut GdkWindow) -> *mut cairo::cairo_surface_t;
    pub fn gdk_offscreen_window_set_embedder(window: *mut GdkWindow, embedder: *mut GdkWindow);
    pub fn gdk_pango_context_get() -> *mut pango::PangoContext;
    #[cfg(feature = "v3_22")]
    pub fn gdk_pango_context_get_for_display(display: *mut GdkDisplay) -> *mut pango::PangoContext;
    pub fn gdk_pango_context_get_for_screen(screen: *mut GdkScreen) -> *mut pango::PangoContext;
    pub fn gdk_pango_layout_get_clip_region(layout: *mut pango::PangoLayout, x_origin: c_int, y_origin: c_int, index_ranges: *const c_int, n_ranges: c_int) -> *mut cairo::cairo_region_t;
    pub fn gdk_pango_layout_line_get_clip_region(line: *mut pango::PangoLayoutLine, x_origin: c_int, y_origin: c_int, index_ranges: *mut c_int, n_ranges: c_int) -> *mut cairo::cairo_region_t;
    pub fn gdk_parse_args(argc: *mut c_int, argv: *mut *mut *mut c_char);
    pub fn gdk_pixbuf_get_from_surface(surface: *mut cairo::cairo_surface_t, src_x: c_int, src_y: c_int, width: c_int, height: c_int) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn gdk_pixbuf_get_from_window(window: *mut GdkWindow, src_x: c_int, src_y: c_int, width: c_int, height: c_int) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn gdk_pointer_grab(window: *mut GdkWindow, owner_events: gboolean, event_mask: GdkEventMask, confine_to: *mut GdkWindow, cursor: *mut GdkCursor, time_: u32) -> GdkGrabStatus;
    pub fn gdk_pointer_is_grabbed() -> gboolean;
    pub fn gdk_pointer_ungrab(time_: u32);
    pub fn gdk_pre_parse_libgtk_only();
    pub fn gdk_property_change(window: *mut GdkWindow, property: GdkAtom, type_: GdkAtom, format: c_int, mode: GdkPropMode, data: *const u8, nelements: c_int);
    pub fn gdk_property_delete(window: *mut GdkWindow, property: GdkAtom);
    pub fn gdk_property_get(window: *mut GdkWindow, property: GdkAtom, type_: GdkAtom, offset: c_ulong, length: c_ulong, pdelete: c_int, actual_property_type: *mut GdkAtom, actual_format: *mut c_int, actual_length: *mut c_int, data: *mut *mut u8) -> gboolean;
    pub fn gdk_query_depths(depths: *mut *mut c_int, count: *mut c_int);
    pub fn gdk_query_visual_types(visual_types: *mut *mut GdkVisualType, count: *mut c_int);
    pub fn gdk_selection_convert(requestor: *mut GdkWindow, selection: GdkAtom, target: GdkAtom, time_: u32);
    pub fn gdk_selection_owner_get(selection: GdkAtom) -> *mut GdkWindow;
    pub fn gdk_selection_owner_get_for_display(display: *mut GdkDisplay, selection: GdkAtom) -> *mut GdkWindow;
    pub fn gdk_selection_owner_set(owner: *mut GdkWindow, selection: GdkAtom, time_: u32, send_event: gboolean) -> gboolean;
    pub fn gdk_selection_owner_set_for_display(display: *mut GdkDisplay, owner: *mut GdkWindow, selection: GdkAtom, time_: u32, send_event: gboolean) -> gboolean;
    pub fn gdk_selection_property_get(requestor: *mut GdkWindow, data: *mut *mut u8, prop_type: *mut GdkAtom, prop_format: *mut c_int) -> c_int;
    pub fn gdk_selection_send_notify(requestor: *mut GdkWindow, selection: GdkAtom, target: GdkAtom, property: GdkAtom, time_: u32);
    pub fn gdk_selection_send_notify_for_display(display: *mut GdkDisplay, requestor: *mut GdkWindow, selection: GdkAtom, target: GdkAtom, property: GdkAtom, time_: u32);
    #[cfg(feature = "v3_10")]
    pub fn gdk_set_allowed_backends(backends: *const c_char);
    pub fn gdk_set_double_click_time(msec: c_uint);
    pub fn gdk_set_program_class(program_class: *const c_char);
    pub fn gdk_set_show_events(show_events: gboolean);
    pub fn gdk_setting_get(name: *const c_char, value: *mut gobject::GValue) -> gboolean;
    pub fn gdk_synthesize_window_state(window: *mut GdkWindow, unset_flags: GdkWindowState, set_flags: GdkWindowState);
    pub fn gdk_test_render_sync(window: *mut GdkWindow);
    pub fn gdk_test_simulate_button(window: *mut GdkWindow, x: c_int, y: c_int, button: c_uint, modifiers: GdkModifierType, button_pressrelease: GdkEventType) -> gboolean;
    pub fn gdk_test_simulate_key(window: *mut GdkWindow, x: c_int, y: c_int, keyval: c_uint, modifiers: GdkModifierType, key_pressrelease: GdkEventType) -> gboolean;
    pub fn gdk_text_property_to_utf8_list_for_display(display: *mut GdkDisplay, encoding: GdkAtom, format: c_int, text: *mut u8, length: c_int, list: *mut *mut *mut c_char) -> c_int;
    pub fn gdk_threads_add_idle(function: glib::GSourceFunc, data: gpointer) -> c_uint;
    pub fn gdk_threads_add_idle_full(priority: c_int, function: glib::GSourceFunc, data: gpointer, notify: glib::GDestroyNotify) -> c_uint;
    pub fn gdk_threads_add_timeout(interval: c_uint, function: glib::GSourceFunc, data: gpointer) -> c_uint;
    pub fn gdk_threads_add_timeout_full(priority: c_int, interval: c_uint, function: glib::GSourceFunc, data: gpointer, notify: glib::GDestroyNotify) -> c_uint;
    pub fn gdk_threads_add_timeout_seconds(interval: c_uint, function: glib::GSourceFunc, data: gpointer) -> c_uint;
    pub fn gdk_threads_add_timeout_seconds_full(priority: c_int, interval: c_uint, function: glib::GSourceFunc, data: gpointer, notify: glib::GDestroyNotify) -> c_uint;
    pub fn gdk_threads_enter();
    pub fn gdk_threads_init();
    pub fn gdk_threads_leave();
    pub fn gdk_threads_set_lock_functions(enter_fn: gobject::GCallback, leave_fn: gobject::GCallback);
    pub fn gdk_unicode_to_keyval(wc: u32) -> c_uint;
    pub fn gdk_utf8_to_string_target(str: *const c_char) -> *mut c_char;

}
